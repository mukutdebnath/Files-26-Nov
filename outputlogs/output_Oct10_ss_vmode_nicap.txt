/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:290: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = pandas.to_numeric(datax['Delay'], errors='coerce')
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:298: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = predicted_y
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:300: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax.sort_values(by='Vin', inplace=True)
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:304: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Vin'] = datax['Vin'] - data['Vin'].min()
/home/dynamo/a/debnathm/func_modelling/puma_functional_model/MyWorks/adcdata.py:305: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  datax['Delay'] = datax['Delay'] - 1e-9
Available models:
resnet20_adc resnet110 resnet1202 resnet20 resnet32 resnet44 resnet56 resnet8
Train Model Details: resNet20 model with ADC charactersitics
ADC Characteristics: 8th October Voltage mode SS ADC, non ideal cap
Parameters:
            ADC Bits: 7
            ADC Fractional Bits: 5
            ADC Bit Scale: 1.0
            ADC Corner/Index: 0
            Weight Bits: 7
            Weight Fractional Bits: 7
            Max ADC Out: 3.96875
            Max Weight: 0.9921875
           -------------------------
            Weight Noise Std. Dev. Gamma: 0.0
           -------------------------
            ADC VAT:  True
           -------------------------
            ADC VAT Full Random:  False
           -------------------------
            ADC VAT characteristic manual seed: 42
           -------------------------
Number of thresold levels: 127
ADC Bits: 7
Files already downloaded and verified
current lr 1.00000e-01
Epoch: [0][0/391]	Time 3.118 (3.118)	Data 0.156 (0.156)	Loss 4.5141 (4.5141)	Prec@1 9.375 (9.375)
Epoch: [0][60/391]	Time 0.166 (0.244)	Data 0.000 (0.003)	Loss 1.8868 (2.5144)	Prec@1 28.906 (19.787)
Epoch: [0][120/391]	Time 0.165 (0.218)	Data 0.000 (0.001)	Loss 1.7087 (2.1819)	Prec@1 30.469 (24.897)
Epoch: [0][180/391]	Time 0.165 (0.209)	Data 0.000 (0.001)	Loss 1.6266 (2.0381)	Prec@1 42.188 (28.112)
Epoch: [0][240/391]	Time 0.164 (0.203)	Data 0.000 (0.001)	Loss 1.6976 (1.9582)	Prec@1 35.156 (30.021)
Epoch: [0][300/391]	Time 0.167 (0.201)	Data 0.000 (0.001)	Loss 1.5651 (1.9000)	Prec@1 36.719 (31.473)
Epoch: [0][360/391]	Time 0.235 (0.198)	Data 0.000 (0.001)	Loss 1.6697 (1.8474)	Prec@1 43.750 (33.120)
Test: [0/79]	Time 0.255 (0.255)	Loss 1.5694 (1.5694)	Prec@1 43.750 (43.750)
Test: [60/79]	Time 0.155 (0.187)	Loss 1.3130 (1.5840)	Prec@1 50.781 (42.520)
 * Prec@1 42.330
Best Accuracy:42.33
current lr 1.00000e-01
Epoch: [1][0/391]	Time 0.299 (0.299)	Data 0.127 (0.127)	Loss 1.5983 (1.5983)	Prec@1 42.969 (42.969)
Epoch: [1][60/391]	Time 0.165 (0.195)	Data 0.000 (0.002)	Loss 1.6688 (1.5507)	Prec@1 40.625 (42.597)
Epoch: [1][120/391]	Time 0.166 (0.193)	Data 0.000 (0.001)	Loss 1.4634 (1.5567)	Prec@1 46.875 (42.575)
Epoch: [1][180/391]	Time 0.246 (0.193)	Data 0.000 (0.001)	Loss 1.6416 (1.5202)	Prec@1 41.406 (43.703)
Epoch: [1][240/391]	Time 0.166 (0.194)	Data 0.000 (0.001)	Loss 1.3721 (1.4982)	Prec@1 47.656 (44.667)
Epoch: [1][300/391]	Time 0.239 (0.194)	Data 0.000 (0.001)	Loss 1.4207 (1.4727)	Prec@1 46.094 (45.681)
Epoch: [1][360/391]	Time 0.165 (0.196)	Data 0.000 (0.000)	Loss 1.3414 (1.4499)	Prec@1 55.469 (46.678)
Test: [0/79]	Time 0.241 (0.241)	Loss 1.5899 (1.5899)	Prec@1 50.000 (50.000)
Test: [60/79]	Time 0.155 (0.180)	Loss 1.6320 (1.5981)	Prec@1 56.250 (49.014)
 * Prec@1 48.620
Best Accuracy:48.62
current lr 1.00000e-01
Epoch: [2][0/391]	Time 0.309 (0.309)	Data 0.127 (0.127)	Loss 1.1550 (1.1550)	Prec@1 52.344 (52.344)
Epoch: [2][60/391]	Time 0.166 (0.189)	Data 0.000 (0.002)	Loss 1.0801 (1.2980)	Prec@1 58.594 (53.381)
Epoch: [2][120/391]	Time 0.240 (0.193)	Data 0.000 (0.001)	Loss 1.0364 (1.2697)	Prec@1 62.500 (54.229)
Epoch: [2][180/391]	Time 0.248 (0.194)	Data 0.000 (0.001)	Loss 1.3095 (1.2608)	Prec@1 51.562 (54.424)
Epoch: [2][240/391]	Time 0.243 (0.194)	Data 0.000 (0.001)	Loss 1.1455 (1.2455)	Prec@1 56.250 (54.863)
Epoch: [2][300/391]	Time 0.244 (0.194)	Data 0.000 (0.001)	Loss 1.0748 (1.2361)	Prec@1 59.375 (55.313)
Epoch: [2][360/391]	Time 0.165 (0.194)	Data 0.000 (0.000)	Loss 0.9498 (1.2265)	Prec@1 64.844 (55.783)
Test: [0/79]	Time 0.269 (0.269)	Loss 0.9845 (0.9845)	Prec@1 63.281 (63.281)
Test: [60/79]	Time 0.203 (0.177)	Loss 1.0548 (1.1204)	Prec@1 60.156 (61.565)
 * Prec@1 61.410
Best Accuracy:61.41
current lr 1.00000e-01
Epoch: [3][0/391]	Time 0.282 (0.282)	Data 0.105 (0.105)	Loss 1.1675 (1.1675)	Prec@1 58.594 (58.594)
Epoch: [3][60/391]	Time 0.168 (0.185)	Data 0.000 (0.002)	Loss 1.2389 (1.1501)	Prec@1 55.469 (58.863)
Epoch: [3][120/391]	Time 0.167 (0.188)	Data 0.000 (0.001)	Loss 1.1581 (1.1469)	Prec@1 50.781 (58.839)
Epoch: [3][180/391]	Time 0.169 (0.188)	Data 0.000 (0.001)	Loss 1.0232 (1.1312)	Prec@1 58.594 (59.220)
Epoch: [3][240/391]	Time 0.166 (0.187)	Data 0.000 (0.001)	Loss 1.1917 (1.1246)	Prec@1 57.812 (59.537)
Epoch: [3][300/391]	Time 0.242 (0.188)	Data 0.000 (0.001)	Loss 1.4713 (1.1175)	Prec@1 46.094 (59.790)
Epoch: [3][360/391]	Time 0.240 (0.189)	Data 0.000 (0.000)	Loss 1.2438 (1.1113)	Prec@1 57.031 (59.966)
Test: [0/79]	Time 0.261 (0.261)	Loss 0.9269 (0.9269)	Prec@1 65.625 (65.625)
Test: [60/79]	Time 0.155 (0.184)	Loss 0.9569 (1.0464)	Prec@1 67.188 (63.550)
 * Prec@1 63.680
Best Accuracy:63.68
current lr 1.00000e-01
Epoch: [4][0/391]	Time 0.369 (0.369)	Data 0.118 (0.118)	Loss 1.0822 (1.0822)	Prec@1 61.719 (61.719)
Epoch: [4][60/391]	Time 0.243 (0.199)	Data 0.000 (0.002)	Loss 0.9619 (1.0376)	Prec@1 64.844 (62.999)
Epoch: [4][120/391]	Time 0.169 (0.195)	Data 0.000 (0.001)	Loss 1.0096 (1.0447)	Prec@1 64.062 (62.803)
Epoch: [4][180/391]	Time 0.167 (0.194)	Data 0.000 (0.001)	Loss 0.9561 (1.0350)	Prec@1 66.406 (63.147)
Epoch: [4][240/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.8144 (1.0260)	Prec@1 70.312 (63.469)
Epoch: [4][300/391]	Time 0.167 (0.189)	Data 0.000 (0.001)	Loss 0.9222 (1.0204)	Prec@1 67.969 (63.632)
Epoch: [4][360/391]	Time 0.239 (0.189)	Data 0.000 (0.000)	Loss 1.0676 (1.0090)	Prec@1 61.719 (64.006)
Test: [0/79]	Time 0.271 (0.271)	Loss 1.1632 (1.1632)	Prec@1 67.188 (67.188)
Test: [60/79]	Time 0.155 (0.180)	Loss 1.4974 (1.3218)	Prec@1 58.594 (61.501)
 * Prec@1 61.620
Best Accuracy:63.68
current lr 1.00000e-01
Epoch: [5][0/391]	Time 0.364 (0.364)	Data 0.117 (0.117)	Loss 0.9785 (0.9785)	Prec@1 65.625 (65.625)
Epoch: [5][60/391]	Time 0.239 (0.198)	Data 0.000 (0.002)	Loss 0.9757 (0.9607)	Prec@1 64.062 (66.662)
Epoch: [5][120/391]	Time 0.169 (0.197)	Data 0.000 (0.001)	Loss 0.8825 (0.9578)	Prec@1 69.531 (66.548)
Epoch: [5][180/391]	Time 0.169 (0.196)	Data 0.000 (0.001)	Loss 0.9961 (0.9477)	Prec@1 64.844 (66.726)
Epoch: [5][240/391]	Time 0.169 (0.195)	Data 0.000 (0.001)	Loss 0.8224 (0.9426)	Prec@1 72.656 (66.773)
Epoch: [5][300/391]	Time 0.171 (0.192)	Data 0.000 (0.001)	Loss 0.8885 (0.9358)	Prec@1 70.312 (66.928)
Epoch: [5][360/391]	Time 0.170 (0.194)	Data 0.000 (0.000)	Loss 0.9296 (0.9287)	Prec@1 67.969 (67.188)
Test: [0/79]	Time 0.339 (0.339)	Loss 1.2307 (1.2307)	Prec@1 62.500 (62.500)
Test: [60/79]	Time 0.224 (0.182)	Loss 1.2312 (1.3344)	Prec@1 57.812 (60.464)
 * Prec@1 59.950
Best Accuracy:63.68
current lr 1.00000e-01
Epoch: [6][0/391]	Time 0.310 (0.310)	Data 0.133 (0.133)	Loss 0.8246 (0.8246)	Prec@1 70.312 (70.312)
Epoch: [6][60/391]	Time 0.166 (0.190)	Data 0.000 (0.002)	Loss 0.9816 (0.9050)	Prec@1 61.719 (68.379)
Epoch: [6][120/391]	Time 0.168 (0.185)	Data 0.000 (0.001)	Loss 0.7640 (0.8919)	Prec@1 71.094 (68.518)
Epoch: [6][180/391]	Time 0.222 (0.186)	Data 0.000 (0.001)	Loss 0.9786 (0.8865)	Prec@1 64.844 (68.910)
Epoch: [6][240/391]	Time 0.242 (0.189)	Data 0.000 (0.001)	Loss 1.0349 (0.8831)	Prec@1 66.406 (69.026)
Epoch: [6][300/391]	Time 0.240 (0.191)	Data 0.000 (0.001)	Loss 0.8496 (0.8778)	Prec@1 68.750 (69.186)
Epoch: [6][360/391]	Time 0.242 (0.192)	Data 0.000 (0.001)	Loss 0.7966 (0.8714)	Prec@1 72.656 (69.321)
Test: [0/79]	Time 0.268 (0.268)	Loss 0.7173 (0.7173)	Prec@1 75.781 (75.781)
Test: [60/79]	Time 0.156 (0.193)	Loss 0.7636 (0.7881)	Prec@1 74.219 (73.105)
 * Prec@1 73.040
Best Accuracy:73.04
current lr 1.00000e-01
Epoch: [7][0/391]	Time 0.329 (0.329)	Data 0.143 (0.143)	Loss 0.7638 (0.7638)	Prec@1 72.656 (72.656)
Epoch: [7][60/391]	Time 0.172 (0.195)	Data 0.000 (0.003)	Loss 0.8669 (0.8396)	Prec@1 67.188 (70.261)
Epoch: [7][120/391]	Time 0.166 (0.196)	Data 0.000 (0.001)	Loss 0.6488 (0.8318)	Prec@1 78.906 (70.661)
Epoch: [7][180/391]	Time 0.167 (0.195)	Data 0.000 (0.001)	Loss 0.8214 (0.8340)	Prec@1 72.656 (70.537)
Epoch: [7][240/391]	Time 0.236 (0.193)	Data 0.000 (0.001)	Loss 0.7293 (0.8293)	Prec@1 73.438 (70.702)
Epoch: [7][300/391]	Time 0.238 (0.192)	Data 0.000 (0.001)	Loss 0.8508 (0.8267)	Prec@1 72.656 (70.894)
Epoch: [7][360/391]	Time 0.166 (0.191)	Data 0.000 (0.001)	Loss 0.6832 (0.8249)	Prec@1 75.781 (71.044)
Test: [0/79]	Time 0.332 (0.332)	Loss 0.6640 (0.6640)	Prec@1 76.562 (76.562)
Test: [60/79]	Time 0.156 (0.181)	Loss 0.7534 (0.7158)	Prec@1 72.656 (75.999)
 * Prec@1 75.780
Best Accuracy:75.78
current lr 1.00000e-01
Epoch: [8][0/391]	Time 0.390 (0.390)	Data 0.138 (0.138)	Loss 0.9418 (0.9418)	Prec@1 66.406 (66.406)
Epoch: [8][60/391]	Time 0.238 (0.197)	Data 0.000 (0.002)	Loss 0.7689 (0.8221)	Prec@1 76.562 (70.786)
Epoch: [8][120/391]	Time 0.240 (0.194)	Data 0.000 (0.001)	Loss 0.6158 (0.8170)	Prec@1 79.688 (71.513)
Epoch: [8][180/391]	Time 0.245 (0.194)	Data 0.000 (0.001)	Loss 0.8405 (0.8086)	Prec@1 71.094 (71.815)
Epoch: [8][240/391]	Time 0.238 (0.194)	Data 0.000 (0.001)	Loss 0.9400 (0.8015)	Prec@1 66.406 (72.066)
Epoch: [8][300/391]	Time 0.242 (0.195)	Data 0.000 (0.001)	Loss 0.7317 (0.8004)	Prec@1 73.438 (72.137)
Epoch: [8][360/391]	Time 0.241 (0.195)	Data 0.000 (0.000)	Loss 0.8860 (0.7942)	Prec@1 67.969 (72.262)
Test: [0/79]	Time 0.269 (0.269)	Loss 0.6604 (0.6604)	Prec@1 75.781 (75.781)
Test: [60/79]	Time 0.155 (0.189)	Loss 0.8803 (0.8531)	Prec@1 76.562 (72.900)
 * Prec@1 72.590
Best Accuracy:75.78
current lr 1.00000e-01
Epoch: [9][0/391]	Time 0.298 (0.298)	Data 0.119 (0.119)	Loss 0.7521 (0.7521)	Prec@1 67.969 (67.969)
Epoch: [9][60/391]	Time 0.168 (0.192)	Data 0.000 (0.002)	Loss 0.8479 (0.7831)	Prec@1 67.969 (72.208)
Epoch: [9][120/391]	Time 0.172 (0.193)	Data 0.000 (0.001)	Loss 0.8406 (0.7726)	Prec@1 69.531 (72.618)
Epoch: [9][180/391]	Time 0.167 (0.196)	Data 0.000 (0.001)	Loss 0.7422 (0.7644)	Prec@1 70.312 (73.062)
Epoch: [9][240/391]	Time 0.168 (0.196)	Data 0.000 (0.001)	Loss 0.6115 (0.7664)	Prec@1 82.031 (73.032)
Epoch: [9][300/391]	Time 0.239 (0.193)	Data 0.000 (0.001)	Loss 0.8421 (0.7623)	Prec@1 71.875 (73.199)
Epoch: [9][360/391]	Time 0.168 (0.198)	Data 0.000 (0.001)	Loss 0.8720 (0.7609)	Prec@1 69.531 (73.258)
Test: [0/79]	Time 0.338 (0.338)	Loss 0.7232 (0.7232)	Prec@1 74.219 (74.219)
Test: [60/79]	Time 0.155 (0.175)	Loss 0.8036 (0.6872)	Prec@1 73.438 (76.332)
 * Prec@1 76.510
Best Accuracy:76.51
current lr 1.00000e-01
Epoch: [10][0/391]	Time 0.285 (0.285)	Data 0.107 (0.107)	Loss 0.6597 (0.6597)	Prec@1 77.344 (77.344)
Epoch: [10][60/391]	Time 0.168 (0.202)	Data 0.000 (0.002)	Loss 0.7738 (0.7455)	Prec@1 75.000 (73.514)
Epoch: [10][120/391]	Time 0.168 (0.197)	Data 0.000 (0.001)	Loss 0.7438 (0.7394)	Prec@1 75.781 (74.148)
Epoch: [10][180/391]	Time 0.166 (0.193)	Data 0.000 (0.001)	Loss 0.7415 (0.7407)	Prec@1 71.094 (73.977)
Epoch: [10][240/391]	Time 0.169 (0.193)	Data 0.000 (0.001)	Loss 0.8327 (0.7435)	Prec@1 72.656 (73.966)
Epoch: [10][300/391]	Time 0.168 (0.193)	Data 0.000 (0.001)	Loss 0.6640 (0.7395)	Prec@1 79.688 (74.143)
Epoch: [10][360/391]	Time 0.241 (0.193)	Data 0.000 (0.000)	Loss 0.6722 (0.7390)	Prec@1 77.344 (74.199)
Test: [0/79]	Time 0.257 (0.257)	Loss 0.6413 (0.6413)	Prec@1 81.250 (81.250)
Test: [60/79]	Time 0.156 (0.190)	Loss 0.7315 (0.6541)	Prec@1 78.125 (78.061)
 * Prec@1 78.090
Best Accuracy:78.09
current lr 1.00000e-01
Epoch: [11][0/391]	Time 0.315 (0.315)	Data 0.138 (0.138)	Loss 0.7580 (0.7580)	Prec@1 73.438 (73.438)
Epoch: [11][60/391]	Time 0.166 (0.198)	Data 0.000 (0.002)	Loss 0.6610 (0.7180)	Prec@1 74.219 (75.371)
Epoch: [11][120/391]	Time 0.241 (0.196)	Data 0.000 (0.001)	Loss 0.7157 (0.7290)	Prec@1 75.000 (74.748)
Epoch: [11][180/391]	Time 0.242 (0.195)	Data 0.000 (0.001)	Loss 0.6524 (0.7296)	Prec@1 71.875 (74.650)
Epoch: [11][240/391]	Time 0.240 (0.194)	Data 0.000 (0.001)	Loss 0.8539 (0.7248)	Prec@1 70.312 (74.702)
Epoch: [11][300/391]	Time 0.235 (0.194)	Data 0.000 (0.001)	Loss 0.6867 (0.7211)	Prec@1 76.562 (74.720)
Epoch: [11][360/391]	Time 0.170 (0.192)	Data 0.000 (0.001)	Loss 0.7029 (0.7194)	Prec@1 70.312 (74.779)
Test: [0/79]	Time 0.349 (0.349)	Loss 0.6033 (0.6033)	Prec@1 82.031 (82.031)
Test: [60/79]	Time 0.230 (0.182)	Loss 0.6293 (0.6525)	Prec@1 78.906 (78.087)
 * Prec@1 77.850
Best Accuracy:78.09
current lr 1.00000e-01
Epoch: [12][0/391]	Time 0.338 (0.338)	Data 0.157 (0.157)	Loss 0.7646 (0.7646)	Prec@1 73.438 (73.438)
Epoch: [12][60/391]	Time 0.169 (0.189)	Data 0.000 (0.003)	Loss 0.6547 (0.6819)	Prec@1 75.781 (75.615)
Epoch: [12][120/391]	Time 0.169 (0.196)	Data 0.000 (0.001)	Loss 0.7172 (0.6906)	Prec@1 72.656 (75.730)
Epoch: [12][180/391]	Time 0.165 (0.196)	Data 0.000 (0.001)	Loss 0.5771 (0.6855)	Prec@1 81.250 (75.906)
Epoch: [12][240/391]	Time 0.167 (0.192)	Data 0.000 (0.001)	Loss 0.6680 (0.6908)	Prec@1 72.656 (75.687)
Epoch: [12][300/391]	Time 0.168 (0.190)	Data 0.000 (0.001)	Loss 0.6281 (0.6918)	Prec@1 78.906 (75.737)
Epoch: [12][360/391]	Time 0.240 (0.190)	Data 0.000 (0.001)	Loss 0.7273 (0.6962)	Prec@1 72.656 (75.630)
Test: [0/79]	Time 0.244 (0.244)	Loss 0.6834 (0.6834)	Prec@1 78.906 (78.906)
Test: [60/79]	Time 0.156 (0.170)	Loss 0.6901 (0.6881)	Prec@1 78.906 (77.088)
 * Prec@1 76.830
Best Accuracy:78.09
current lr 1.00000e-01
Epoch: [13][0/391]	Time 0.307 (0.307)	Data 0.132 (0.132)	Loss 0.6020 (0.6020)	Prec@1 80.469 (80.469)
Epoch: [13][60/391]	Time 0.241 (0.195)	Data 0.000 (0.002)	Loss 0.5917 (0.6761)	Prec@1 82.031 (76.345)
Epoch: [13][120/391]	Time 0.166 (0.197)	Data 0.000 (0.001)	Loss 0.7123 (0.6892)	Prec@1 76.562 (75.878)
Epoch: [13][180/391]	Time 0.168 (0.197)	Data 0.000 (0.001)	Loss 0.7309 (0.6858)	Prec@1 76.562 (75.988)
Epoch: [13][240/391]	Time 0.166 (0.199)	Data 0.000 (0.001)	Loss 0.6423 (0.6841)	Prec@1 78.125 (76.057)
Epoch: [13][300/391]	Time 0.168 (0.199)	Data 0.000 (0.001)	Loss 0.6768 (0.6840)	Prec@1 78.125 (76.176)
Epoch: [13][360/391]	Time 0.167 (0.197)	Data 0.000 (0.000)	Loss 0.6931 (0.6818)	Prec@1 77.344 (76.227)
Test: [0/79]	Time 0.332 (0.332)	Loss 0.6530 (0.6530)	Prec@1 78.906 (78.906)
Test: [60/79]	Time 0.228 (0.183)	Loss 0.6338 (0.6954)	Prec@1 81.250 (77.382)
 * Prec@1 77.270
Best Accuracy:78.09
current lr 1.00000e-01
Epoch: [14][0/391]	Time 0.407 (0.407)	Data 0.157 (0.157)	Loss 0.7470 (0.7470)	Prec@1 71.875 (71.875)
Epoch: [14][60/391]	Time 0.245 (0.198)	Data 0.000 (0.003)	Loss 0.5881 (0.6675)	Prec@1 80.469 (76.498)
Epoch: [14][120/391]	Time 0.240 (0.198)	Data 0.000 (0.001)	Loss 0.6829 (0.6626)	Prec@1 74.219 (76.672)
Epoch: [14][180/391]	Time 0.241 (0.196)	Data 0.000 (0.001)	Loss 0.7002 (0.6700)	Prec@1 75.781 (76.632)
Epoch: [14][240/391]	Time 0.242 (0.196)	Data 0.000 (0.001)	Loss 0.7172 (0.6702)	Prec@1 76.562 (76.507)
Epoch: [14][300/391]	Time 0.166 (0.196)	Data 0.000 (0.001)	Loss 0.5575 (0.6718)	Prec@1 78.125 (76.550)
Epoch: [14][360/391]	Time 0.166 (0.195)	Data 0.000 (0.001)	Loss 0.7308 (0.6713)	Prec@1 75.000 (76.567)
Test: [0/79]	Time 0.249 (0.249)	Loss 0.6920 (0.6920)	Prec@1 78.906 (78.906)
Test: [60/79]	Time 0.156 (0.183)	Loss 0.7798 (0.7351)	Prec@1 78.125 (76.588)
 * Prec@1 76.510
Best Accuracy:78.09
current lr 1.00000e-01
Epoch: [15][0/391]	Time 0.297 (0.297)	Data 0.121 (0.121)	Loss 0.7710 (0.7710)	Prec@1 75.000 (75.000)
Epoch: [15][60/391]	Time 0.166 (0.193)	Data 0.000 (0.002)	Loss 0.7676 (0.6708)	Prec@1 72.656 (76.665)
Epoch: [15][120/391]	Time 0.232 (0.192)	Data 0.000 (0.001)	Loss 0.5673 (0.6564)	Prec@1 81.250 (76.995)
Epoch: [15][180/391]	Time 0.166 (0.204)	Data 0.000 (0.001)	Loss 0.6160 (0.6528)	Prec@1 82.031 (77.326)
Epoch: [15][240/391]	Time 0.168 (0.199)	Data 0.000 (0.001)	Loss 0.6750 (0.6531)	Prec@1 77.344 (77.237)
Epoch: [15][300/391]	Time 0.171 (0.197)	Data 0.000 (0.001)	Loss 0.6981 (0.6562)	Prec@1 75.781 (77.134)
Epoch: [15][360/391]	Time 0.171 (0.197)	Data 0.000 (0.001)	Loss 0.5527 (0.6544)	Prec@1 79.688 (77.158)
Test: [0/79]	Time 0.333 (0.333)	Loss 0.4068 (0.4068)	Prec@1 85.156 (85.156)
Test: [60/79]	Time 0.227 (0.180)	Loss 0.6360 (0.5373)	Prec@1 82.812 (82.198)
 * Prec@1 82.090
Best Accuracy:82.09
current lr 1.00000e-01
Epoch: [16][0/391]	Time 0.312 (0.312)	Data 0.130 (0.130)	Loss 0.8963 (0.8963)	Prec@1 67.188 (67.188)
Epoch: [16][60/391]	Time 0.167 (0.195)	Data 0.000 (0.002)	Loss 0.5099 (0.6384)	Prec@1 85.156 (77.600)
Epoch: [16][120/391]	Time 0.252 (0.203)	Data 0.000 (0.001)	Loss 0.5746 (0.6446)	Prec@1 78.125 (77.725)
Epoch: [16][180/391]	Time 0.243 (0.200)	Data 0.000 (0.001)	Loss 0.6066 (0.6444)	Prec@1 77.344 (77.525)
Epoch: [16][240/391]	Time 0.240 (0.199)	Data 0.000 (0.001)	Loss 0.7454 (0.6455)	Prec@1 70.312 (77.483)
Epoch: [16][300/391]	Time 0.244 (0.198)	Data 0.000 (0.001)	Loss 0.4916 (0.6450)	Prec@1 85.938 (77.471)
Epoch: [16][360/391]	Time 0.242 (0.198)	Data 0.000 (0.001)	Loss 0.5504 (0.6421)	Prec@1 82.812 (77.603)
Test: [0/79]	Time 0.280 (0.280)	Loss 0.6549 (0.6549)	Prec@1 78.125 (78.125)
Test: [60/79]	Time 0.230 (0.198)	Loss 0.6747 (0.6862)	Prec@1 75.000 (76.870)
 * Prec@1 77.000
Best Accuracy:82.09
current lr 1.00000e-01
Epoch: [17][0/391]	Time 0.280 (0.280)	Data 0.107 (0.107)	Loss 0.5569 (0.5569)	Prec@1 81.250 (81.250)
Epoch: [17][60/391]	Time 0.243 (0.213)	Data 0.000 (0.002)	Loss 0.5531 (0.6202)	Prec@1 84.375 (78.048)
Epoch: [17][120/391]	Time 0.241 (0.204)	Data 0.000 (0.001)	Loss 0.6183 (0.6191)	Prec@1 78.906 (78.080)
Epoch: [17][180/391]	Time 0.242 (0.200)	Data 0.000 (0.001)	Loss 0.5891 (0.6256)	Prec@1 78.906 (77.991)
Epoch: [17][240/391]	Time 0.240 (0.198)	Data 0.000 (0.001)	Loss 0.6973 (0.6258)	Prec@1 78.125 (77.843)
Epoch: [17][300/391]	Time 0.170 (0.196)	Data 0.000 (0.000)	Loss 0.7577 (0.6277)	Prec@1 72.656 (77.889)
Epoch: [17][360/391]	Time 0.166 (0.195)	Data 0.000 (0.000)	Loss 0.6910 (0.6282)	Prec@1 76.562 (77.913)
Test: [0/79]	Time 0.347 (0.347)	Loss 0.5304 (0.5304)	Prec@1 77.344 (77.344)
Test: [60/79]	Time 0.159 (0.191)	Loss 0.6187 (0.6186)	Prec@1 75.781 (79.316)
 * Prec@1 79.330
Best Accuracy:82.09
current lr 1.00000e-01
Epoch: [18][0/391]	Time 0.331 (0.331)	Data 0.154 (0.154)	Loss 0.6475 (0.6475)	Prec@1 75.000 (75.000)
Epoch: [18][60/391]	Time 0.166 (0.190)	Data 0.000 (0.003)	Loss 0.6923 (0.6133)	Prec@1 78.125 (78.855)
Epoch: [18][120/391]	Time 0.241 (0.196)	Data 0.000 (0.001)	Loss 0.6453 (0.6149)	Prec@1 78.125 (78.758)
Epoch: [18][180/391]	Time 0.241 (0.195)	Data 0.000 (0.001)	Loss 0.4850 (0.6159)	Prec@1 82.031 (78.621)
Epoch: [18][240/391]	Time 0.240 (0.194)	Data 0.000 (0.001)	Loss 0.5017 (0.6128)	Prec@1 83.594 (78.715)
Epoch: [18][300/391]	Time 0.241 (0.194)	Data 0.000 (0.001)	Loss 0.6300 (0.6123)	Prec@1 74.219 (78.751)
Epoch: [18][360/391]	Time 0.245 (0.194)	Data 0.000 (0.001)	Loss 0.6762 (0.6135)	Prec@1 80.469 (78.703)
Test: [0/79]	Time 0.272 (0.272)	Loss 0.6901 (0.6901)	Prec@1 75.000 (75.000)
Test: [60/79]	Time 0.156 (0.182)	Loss 0.6601 (0.7138)	Prec@1 80.469 (77.818)
 * Prec@1 77.630
Best Accuracy:82.09
current lr 1.00000e-01
Epoch: [19][0/391]	Time 0.279 (0.279)	Data 0.106 (0.106)	Loss 0.6115 (0.6115)	Prec@1 78.906 (78.906)
Epoch: [19][60/391]	Time 0.166 (0.198)	Data 0.000 (0.002)	Loss 0.5073 (0.6045)	Prec@1 83.594 (79.086)
Epoch: [19][120/391]	Time 0.167 (0.200)	Data 0.000 (0.001)	Loss 0.6265 (0.6137)	Prec@1 79.688 (78.951)
Epoch: [19][180/391]	Time 0.168 (0.197)	Data 0.000 (0.001)	Loss 0.6485 (0.6113)	Prec@1 78.125 (79.057)
Epoch: [19][240/391]	Time 0.168 (0.201)	Data 0.000 (0.001)	Loss 0.4474 (0.6072)	Prec@1 85.938 (79.211)
Epoch: [19][300/391]	Time 0.166 (0.199)	Data 0.000 (0.001)	Loss 0.5663 (0.6067)	Prec@1 78.906 (79.207)
Epoch: [19][360/391]	Time 0.166 (0.201)	Data 0.000 (0.000)	Loss 0.5980 (0.6071)	Prec@1 77.344 (79.082)
Test: [0/79]	Time 0.241 (0.241)	Loss 0.4509 (0.4509)	Prec@1 84.375 (84.375)
Test: [60/79]	Time 0.157 (0.186)	Loss 0.8098 (0.6090)	Prec@1 77.344 (80.149)
 * Prec@1 80.180
Best Accuracy:82.09
current lr 1.00000e-01
Epoch: [20][0/391]	Time 0.368 (0.368)	Data 0.122 (0.122)	Loss 0.6641 (0.6641)	Prec@1 79.688 (79.688)
Epoch: [20][60/391]	Time 0.243 (0.198)	Data 0.000 (0.002)	Loss 0.6541 (0.6038)	Prec@1 74.219 (79.265)
Epoch: [20][120/391]	Time 0.246 (0.197)	Data 0.000 (0.001)	Loss 0.5996 (0.6047)	Prec@1 79.688 (79.055)
Epoch: [20][180/391]	Time 0.168 (0.194)	Data 0.000 (0.001)	Loss 0.6450 (0.5995)	Prec@1 77.344 (79.200)
Epoch: [20][240/391]	Time 0.168 (0.193)	Data 0.000 (0.001)	Loss 0.4808 (0.6010)	Prec@1 85.938 (79.140)
Epoch: [20][300/391]	Time 0.168 (0.192)	Data 0.000 (0.001)	Loss 0.5598 (0.5993)	Prec@1 81.250 (79.104)
Epoch: [20][360/391]	Time 0.166 (0.191)	Data 0.000 (0.001)	Loss 0.6360 (0.5998)	Prec@1 84.375 (79.079)
Test: [0/79]	Time 0.340 (0.340)	Loss 0.4951 (0.4951)	Prec@1 82.812 (82.812)
Test: [60/79]	Time 0.230 (0.184)	Loss 0.6275 (0.5779)	Prec@1 76.562 (81.404)
 * Prec@1 81.520
Best Accuracy:82.09
current lr 1.00000e-01
Epoch: [21][0/391]	Time 0.309 (0.309)	Data 0.127 (0.127)	Loss 0.5397 (0.5397)	Prec@1 82.031 (82.031)
Epoch: [21][60/391]	Time 0.168 (0.188)	Data 0.000 (0.002)	Loss 0.5210 (0.6023)	Prec@1 82.031 (78.855)
Epoch: [21][120/391]	Time 0.167 (0.190)	Data 0.000 (0.001)	Loss 0.5594 (0.5985)	Prec@1 80.469 (78.932)
Epoch: [21][180/391]	Time 0.240 (0.200)	Data 0.000 (0.001)	Loss 0.6065 (0.5929)	Prec@1 78.125 (79.131)
Epoch: [21][240/391]	Time 0.231 (0.198)	Data 0.000 (0.001)	Loss 0.8123 (0.5894)	Prec@1 72.656 (79.286)
Epoch: [21][300/391]	Time 0.165 (0.193)	Data 0.000 (0.001)	Loss 0.4725 (0.5931)	Prec@1 80.469 (79.197)
Epoch: [21][360/391]	Time 0.165 (0.191)	Data 0.000 (0.000)	Loss 0.6489 (0.5931)	Prec@1 75.000 (79.244)
Test: [0/79]	Time 0.256 (0.256)	Loss 0.5747 (0.5747)	Prec@1 78.125 (78.125)
Test: [60/79]	Time 0.228 (0.182)	Loss 0.5629 (0.6338)	Prec@1 78.906 (79.034)
 * Prec@1 79.030
Best Accuracy:82.09
current lr 1.00000e-01
Epoch: [22][0/391]	Time 0.397 (0.397)	Data 0.146 (0.146)	Loss 0.6029 (0.6029)	Prec@1 79.688 (79.688)
Epoch: [22][60/391]	Time 0.242 (0.199)	Data 0.000 (0.003)	Loss 0.5415 (0.5857)	Prec@1 82.812 (79.316)
Epoch: [22][120/391]	Time 0.246 (0.197)	Data 0.000 (0.001)	Loss 0.5340 (0.5893)	Prec@1 83.594 (79.319)
Epoch: [22][180/391]	Time 0.247 (0.197)	Data 0.000 (0.001)	Loss 0.6034 (0.5907)	Prec@1 79.688 (79.355)
Epoch: [22][240/391]	Time 0.244 (0.197)	Data 0.000 (0.001)	Loss 0.5769 (0.5883)	Prec@1 79.688 (79.480)
Epoch: [22][300/391]	Time 0.242 (0.196)	Data 0.000 (0.001)	Loss 0.5867 (0.5865)	Prec@1 79.688 (79.540)
Epoch: [22][360/391]	Time 0.167 (0.196)	Data 0.000 (0.001)	Loss 0.4343 (0.5877)	Prec@1 89.062 (79.482)
Test: [0/79]	Time 0.275 (0.275)	Loss 0.6673 (0.6673)	Prec@1 79.688 (79.688)
Test: [60/79]	Time 0.156 (0.197)	Loss 0.8859 (0.7680)	Prec@1 72.656 (76.140)
 * Prec@1 76.130
Best Accuracy:82.09
current lr 1.00000e-01
Epoch: [23][0/391]	Time 0.321 (0.321)	Data 0.144 (0.144)	Loss 0.4848 (0.4848)	Prec@1 82.812 (82.812)
Epoch: [23][60/391]	Time 0.243 (0.194)	Data 0.000 (0.003)	Loss 0.6740 (0.5494)	Prec@1 76.562 (80.930)
Epoch: [23][120/391]	Time 0.166 (0.202)	Data 0.000 (0.001)	Loss 0.5930 (0.5592)	Prec@1 80.469 (80.585)
Epoch: [23][180/391]	Time 0.167 (0.194)	Data 0.000 (0.001)	Loss 0.4141 (0.5672)	Prec@1 87.500 (80.275)
Epoch: [23][240/391]	Time 0.165 (0.192)	Data 0.000 (0.001)	Loss 0.6056 (0.5717)	Prec@1 78.125 (80.067)
Epoch: [23][300/391]	Time 0.240 (0.192)	Data 0.000 (0.001)	Loss 0.4624 (0.5708)	Prec@1 80.469 (80.038)
Epoch: [23][360/391]	Time 0.242 (0.192)	Data 0.000 (0.001)	Loss 0.5480 (0.5736)	Prec@1 82.812 (79.934)
Test: [0/79]	Time 0.255 (0.255)	Loss 0.5598 (0.5598)	Prec@1 78.125 (78.125)
Test: [60/79]	Time 0.155 (0.180)	Loss 0.6818 (0.6584)	Prec@1 75.781 (78.535)
 * Prec@1 78.560
Best Accuracy:82.09
current lr 1.00000e-01
Epoch: [24][0/391]	Time 0.386 (0.386)	Data 0.140 (0.140)	Loss 0.4704 (0.4704)	Prec@1 83.594 (83.594)
Epoch: [24][60/391]	Time 0.241 (0.196)	Data 0.000 (0.002)	Loss 0.5755 (0.5611)	Prec@1 79.688 (79.918)
Epoch: [24][120/391]	Time 0.240 (0.195)	Data 0.000 (0.001)	Loss 0.5971 (0.5471)	Prec@1 78.125 (80.863)
Epoch: [24][180/391]	Time 0.168 (0.208)	Data 0.000 (0.001)	Loss 0.8278 (0.5627)	Prec@1 68.750 (80.197)
Epoch: [24][240/391]	Time 0.170 (0.202)	Data 0.000 (0.001)	Loss 0.5938 (0.5636)	Prec@1 79.688 (80.158)
Epoch: [24][300/391]	Time 0.169 (0.197)	Data 0.000 (0.001)	Loss 0.5519 (0.5664)	Prec@1 81.250 (80.116)
Epoch: [24][360/391]	Time 0.167 (0.195)	Data 0.000 (0.001)	Loss 0.5022 (0.5661)	Prec@1 82.031 (80.131)
Test: [0/79]	Time 0.246 (0.246)	Loss 0.6255 (0.6255)	Prec@1 78.125 (78.125)
Test: [60/79]	Time 0.156 (0.180)	Loss 0.6978 (0.6548)	Prec@1 78.125 (78.855)
 * Prec@1 78.930
Best Accuracy:82.09
current lr 1.00000e-01
Epoch: [25][0/391]	Time 0.274 (0.274)	Data 0.097 (0.097)	Loss 0.6088 (0.6088)	Prec@1 78.906 (78.906)
Epoch: [25][60/391]	Time 0.167 (0.186)	Data 0.000 (0.002)	Loss 0.5930 (0.5583)	Prec@1 78.906 (80.405)
Epoch: [25][120/391]	Time 0.244 (0.185)	Data 0.000 (0.001)	Loss 0.4956 (0.5615)	Prec@1 87.500 (80.378)
Epoch: [25][180/391]	Time 0.244 (0.187)	Data 0.000 (0.001)	Loss 0.5099 (0.5657)	Prec@1 81.250 (80.184)
Epoch: [25][240/391]	Time 0.244 (0.189)	Data 0.000 (0.001)	Loss 0.4813 (0.5643)	Prec@1 85.156 (80.339)
Epoch: [25][300/391]	Time 0.245 (0.190)	Data 0.000 (0.000)	Loss 0.5886 (0.5679)	Prec@1 79.688 (80.199)
Epoch: [25][360/391]	Time 0.181 (0.190)	Data 0.000 (0.000)	Loss 0.5953 (0.5670)	Prec@1 73.438 (80.293)
Test: [0/79]	Time 0.259 (0.259)	Loss 0.3787 (0.3787)	Prec@1 88.281 (88.281)
Test: [60/79]	Time 0.156 (0.195)	Loss 0.5230 (0.5255)	Prec@1 80.469 (82.428)
 * Prec@1 82.450
Best Accuracy:82.45
current lr 1.00000e-01
Epoch: [26][0/391]	Time 0.407 (0.407)	Data 0.154 (0.154)	Loss 0.6238 (0.6238)	Prec@1 74.219 (74.219)
Epoch: [26][60/391]	Time 0.245 (0.196)	Data 0.000 (0.003)	Loss 0.5000 (0.5294)	Prec@1 85.156 (81.250)
Epoch: [26][120/391]	Time 0.243 (0.195)	Data 0.000 (0.001)	Loss 0.5179 (0.5490)	Prec@1 80.469 (80.869)
Epoch: [26][180/391]	Time 0.170 (0.194)	Data 0.000 (0.001)	Loss 0.4069 (0.5482)	Prec@1 86.719 (80.913)
Epoch: [26][240/391]	Time 0.167 (0.194)	Data 0.000 (0.001)	Loss 0.5328 (0.5565)	Prec@1 78.125 (80.644)
Epoch: [26][300/391]	Time 0.166 (0.194)	Data 0.000 (0.001)	Loss 0.6825 (0.5597)	Prec@1 75.781 (80.580)
Epoch: [26][360/391]	Time 0.171 (0.194)	Data 0.000 (0.001)	Loss 0.6352 (0.5589)	Prec@1 75.781 (80.657)
Test: [0/79]	Time 0.267 (0.267)	Loss 0.5538 (0.5538)	Prec@1 78.906 (78.906)
Test: [60/79]	Time 0.156 (0.194)	Loss 0.7420 (0.6410)	Prec@1 75.000 (79.880)
 * Prec@1 79.960
Best Accuracy:82.45
current lr 1.00000e-01
Epoch: [27][0/391]	Time 0.371 (0.371)	Data 0.117 (0.117)	Loss 0.6471 (0.6471)	Prec@1 78.125 (78.125)
Epoch: [27][60/391]	Time 0.247 (0.200)	Data 0.000 (0.002)	Loss 0.5224 (0.5352)	Prec@1 80.469 (81.378)
Epoch: [27][120/391]	Time 0.244 (0.198)	Data 0.000 (0.001)	Loss 0.5212 (0.5566)	Prec@1 81.250 (80.591)
Epoch: [27][180/391]	Time 0.244 (0.197)	Data 0.000 (0.001)	Loss 0.6518 (0.5536)	Prec@1 77.344 (80.590)
Epoch: [27][240/391]	Time 0.242 (0.196)	Data 0.000 (0.001)	Loss 0.5047 (0.5542)	Prec@1 84.375 (80.517)
Epoch: [27][300/391]	Time 0.243 (0.195)	Data 0.000 (0.001)	Loss 0.7262 (0.5564)	Prec@1 78.906 (80.451)
Epoch: [27][360/391]	Time 0.240 (0.195)	Data 0.000 (0.000)	Loss 0.6883 (0.5553)	Prec@1 77.344 (80.516)
Test: [0/79]	Time 0.252 (0.252)	Loss 0.6632 (0.6632)	Prec@1 80.469 (80.469)
Test: [60/79]	Time 0.158 (0.187)	Loss 0.8279 (0.7033)	Prec@1 76.562 (79.073)
 * Prec@1 79.150
Best Accuracy:82.45
current lr 1.00000e-01
Epoch: [28][0/391]	Time 0.410 (0.410)	Data 0.138 (0.138)	Loss 0.5481 (0.5481)	Prec@1 82.031 (82.031)
Epoch: [28][60/391]	Time 0.241 (0.199)	Data 0.000 (0.002)	Loss 0.4904 (0.5485)	Prec@1 78.906 (80.802)
Epoch: [28][120/391]	Time 0.166 (0.206)	Data 0.000 (0.001)	Loss 0.5295 (0.5435)	Prec@1 80.469 (80.830)
Epoch: [28][180/391]	Time 0.166 (0.198)	Data 0.000 (0.001)	Loss 0.5631 (0.5432)	Prec@1 78.125 (80.879)
Epoch: [28][240/391]	Time 0.166 (0.195)	Data 0.000 (0.001)	Loss 0.5966 (0.5458)	Prec@1 75.000 (80.718)
Epoch: [28][300/391]	Time 0.168 (0.194)	Data 0.000 (0.001)	Loss 0.5431 (0.5505)	Prec@1 82.031 (80.534)
Epoch: [28][360/391]	Time 0.168 (0.194)	Data 0.000 (0.000)	Loss 0.6859 (0.5519)	Prec@1 74.219 (80.532)
Test: [0/79]	Time 0.272 (0.272)	Loss 0.4654 (0.4654)	Prec@1 84.375 (84.375)
Test: [60/79]	Time 0.156 (0.190)	Loss 0.6134 (0.5971)	Prec@1 79.688 (81.301)
 * Prec@1 81.230
Best Accuracy:82.45
current lr 1.00000e-01
Epoch: [29][0/391]	Time 0.297 (0.297)	Data 0.112 (0.112)	Loss 0.4387 (0.4387)	Prec@1 84.375 (84.375)
Epoch: [29][60/391]	Time 0.167 (0.186)	Data 0.000 (0.002)	Loss 0.5563 (0.5346)	Prec@1 78.906 (81.506)
Epoch: [29][120/391]	Time 0.166 (0.190)	Data 0.001 (0.001)	Loss 0.6339 (0.5373)	Prec@1 78.906 (81.366)
Epoch: [29][180/391]	Time 0.167 (0.190)	Data 0.000 (0.001)	Loss 0.4382 (0.5409)	Prec@1 81.250 (81.073)
Epoch: [29][240/391]	Time 0.166 (0.193)	Data 0.000 (0.001)	Loss 0.5876 (0.5419)	Prec@1 81.250 (81.043)
Epoch: [29][300/391]	Time 0.169 (0.192)	Data 0.000 (0.001)	Loss 0.4000 (0.5419)	Prec@1 85.156 (80.998)
Epoch: [29][360/391]	Time 0.170 (0.191)	Data 0.000 (0.000)	Loss 0.4866 (0.5382)	Prec@1 82.031 (81.083)
Test: [0/79]	Time 0.270 (0.270)	Loss 0.5548 (0.5548)	Prec@1 85.156 (85.156)
Test: [60/79]	Time 0.156 (0.178)	Loss 0.6743 (0.5971)	Prec@1 78.125 (81.698)
 * Prec@1 81.940
Best Accuracy:82.45
current lr 1.00000e-01
Epoch: [30][0/391]	Time 0.277 (0.277)	Data 0.105 (0.105)	Loss 0.5164 (0.5164)	Prec@1 83.594 (83.594)
Epoch: [30][60/391]	Time 0.167 (0.192)	Data 0.000 (0.002)	Loss 0.5571 (0.5409)	Prec@1 80.469 (81.352)
Epoch: [30][120/391]	Time 0.166 (0.194)	Data 0.000 (0.001)	Loss 0.4612 (0.5415)	Prec@1 86.719 (81.198)
Epoch: [30][180/391]	Time 0.167 (0.196)	Data 0.000 (0.001)	Loss 0.4027 (0.5437)	Prec@1 85.938 (81.086)
Epoch: [30][240/391]	Time 0.166 (0.195)	Data 0.000 (0.001)	Loss 0.5731 (0.5446)	Prec@1 78.125 (81.120)
Epoch: [30][300/391]	Time 0.167 (0.196)	Data 0.000 (0.001)	Loss 0.4312 (0.5422)	Prec@1 84.375 (81.232)
Epoch: [30][360/391]	Time 0.174 (0.197)	Data 0.000 (0.000)	Loss 0.5806 (0.5402)	Prec@1 78.906 (81.293)
Test: [0/79]	Time 0.231 (0.231)	Loss 0.4754 (0.4754)	Prec@1 86.719 (86.719)
Test: [60/79]	Time 0.156 (0.178)	Loss 0.5887 (0.5557)	Prec@1 81.250 (82.326)
 * Prec@1 82.280
Best Accuracy:82.45
current lr 1.00000e-01
Epoch: [31][0/391]	Time 0.348 (0.348)	Data 0.098 (0.098)	Loss 0.5528 (0.5528)	Prec@1 80.469 (80.469)
Epoch: [31][60/391]	Time 0.167 (0.183)	Data 0.000 (0.002)	Loss 0.5554 (0.5079)	Prec@1 80.469 (82.326)
Epoch: [31][120/391]	Time 0.169 (0.191)	Data 0.000 (0.001)	Loss 0.6751 (0.5262)	Prec@1 76.562 (81.670)
Epoch: [31][180/391]	Time 0.240 (0.193)	Data 0.000 (0.001)	Loss 0.4886 (0.5374)	Prec@1 85.156 (81.297)
Epoch: [31][240/391]	Time 0.241 (0.192)	Data 0.000 (0.001)	Loss 0.4606 (0.5293)	Prec@1 81.250 (81.613)
Epoch: [31][300/391]	Time 0.165 (0.191)	Data 0.000 (0.000)	Loss 0.4502 (0.5334)	Prec@1 85.156 (81.510)
Epoch: [31][360/391]	Time 0.166 (0.191)	Data 0.000 (0.000)	Loss 0.5047 (0.5337)	Prec@1 82.031 (81.432)
Test: [0/79]	Time 0.259 (0.259)	Loss 0.4727 (0.4727)	Prec@1 84.375 (84.375)
Test: [60/79]	Time 0.156 (0.184)	Loss 0.5882 (0.5067)	Prec@1 76.562 (83.235)
 * Prec@1 83.490
Best Accuracy:83.49
current lr 1.00000e-01
Epoch: [32][0/391]	Time 0.402 (0.402)	Data 0.161 (0.161)	Loss 0.4492 (0.4492)	Prec@1 85.156 (85.156)
Epoch: [32][60/391]	Time 0.245 (0.196)	Data 0.000 (0.003)	Loss 0.5024 (0.5277)	Prec@1 82.031 (81.647)
Epoch: [32][120/391]	Time 0.166 (0.193)	Data 0.000 (0.001)	Loss 0.5444 (0.5332)	Prec@1 76.562 (81.470)
Epoch: [32][180/391]	Time 0.239 (0.193)	Data 0.000 (0.001)	Loss 0.5485 (0.5265)	Prec@1 80.469 (81.643)
Epoch: [32][240/391]	Time 0.166 (0.192)	Data 0.000 (0.001)	Loss 0.6260 (0.5248)	Prec@1 75.781 (81.603)
Epoch: [32][300/391]	Time 0.169 (0.192)	Data 0.000 (0.001)	Loss 0.4217 (0.5284)	Prec@1 85.938 (81.432)
Epoch: [32][360/391]	Time 0.166 (0.192)	Data 0.000 (0.001)	Loss 0.6341 (0.5261)	Prec@1 78.125 (81.546)
Test: [0/79]	Time 0.255 (0.255)	Loss 0.5235 (0.5235)	Prec@1 84.375 (84.375)
Test: [60/79]	Time 0.228 (0.176)	Loss 0.5577 (0.5559)	Prec@1 80.469 (82.403)
 * Prec@1 82.250
Best Accuracy:83.49
current lr 1.00000e-01
Epoch: [33][0/391]	Time 0.292 (0.292)	Data 0.117 (0.117)	Loss 0.5867 (0.5867)	Prec@1 78.125 (78.125)
Epoch: [33][60/391]	Time 0.169 (0.185)	Data 0.000 (0.002)	Loss 0.3884 (0.5319)	Prec@1 86.719 (81.378)
Epoch: [33][120/391]	Time 0.177 (0.185)	Data 0.000 (0.001)	Loss 0.5227 (0.5300)	Prec@1 82.031 (81.179)
Epoch: [33][180/391]	Time 0.172 (0.184)	Data 0.000 (0.001)	Loss 0.5879 (0.5369)	Prec@1 80.469 (80.956)
Epoch: [33][240/391]	Time 0.167 (0.186)	Data 0.000 (0.001)	Loss 0.4776 (0.5299)	Prec@1 78.906 (81.221)
Epoch: [33][300/391]	Time 0.166 (0.184)	Data 0.000 (0.001)	Loss 0.5902 (0.5295)	Prec@1 78.906 (81.234)
Epoch: [33][360/391]	Time 0.166 (0.185)	Data 0.000 (0.000)	Loss 0.6044 (0.5311)	Prec@1 82.031 (81.224)
Test: [0/79]	Time 0.330 (0.330)	Loss 0.7033 (0.7033)	Prec@1 77.344 (77.344)
Test: [60/79]	Time 0.156 (0.182)	Loss 1.1145 (0.8960)	Prec@1 67.969 (72.810)
 * Prec@1 72.820
Best Accuracy:83.49
current lr 1.00000e-01
Epoch: [34][0/391]	Time 0.295 (0.295)	Data 0.112 (0.112)	Loss 0.6296 (0.6296)	Prec@1 77.344 (77.344)
Epoch: [34][60/391]	Time 0.167 (0.190)	Data 0.000 (0.002)	Loss 0.5831 (0.5184)	Prec@1 81.250 (81.493)
Epoch: [34][120/391]	Time 0.169 (0.186)	Data 0.000 (0.001)	Loss 0.5872 (0.5228)	Prec@1 79.688 (81.489)
Epoch: [34][180/391]	Time 0.167 (0.187)	Data 0.000 (0.001)	Loss 0.4597 (0.5180)	Prec@1 85.156 (81.833)
Epoch: [34][240/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.6575 (0.5213)	Prec@1 79.688 (81.821)
Epoch: [34][300/391]	Time 0.241 (0.186)	Data 0.000 (0.001)	Loss 0.4821 (0.5254)	Prec@1 84.375 (81.600)
Epoch: [34][360/391]	Time 0.240 (0.186)	Data 0.000 (0.000)	Loss 0.5584 (0.5247)	Prec@1 85.156 (81.733)
Test: [0/79]	Time 0.226 (0.226)	Loss 0.6841 (0.6841)	Prec@1 82.812 (82.812)
Test: [60/79]	Time 0.156 (0.173)	Loss 0.6569 (0.6695)	Prec@1 79.688 (79.034)
 * Prec@1 79.130
Best Accuracy:83.49
current lr 1.00000e-01
Epoch: [35][0/391]	Time 0.269 (0.269)	Data 0.097 (0.097)	Loss 0.6007 (0.6007)	Prec@1 77.344 (77.344)
Epoch: [35][60/391]	Time 0.166 (0.182)	Data 0.000 (0.002)	Loss 0.5194 (0.5278)	Prec@1 81.250 (81.557)
Epoch: [35][120/391]	Time 0.165 (0.186)	Data 0.000 (0.001)	Loss 0.5826 (0.5173)	Prec@1 78.906 (81.812)
Epoch: [35][180/391]	Time 0.240 (0.186)	Data 0.000 (0.001)	Loss 0.5869 (0.5153)	Prec@1 77.344 (81.867)
Epoch: [35][240/391]	Time 0.240 (0.187)	Data 0.000 (0.001)	Loss 0.4637 (0.5149)	Prec@1 81.250 (81.970)
Epoch: [35][300/391]	Time 0.239 (0.187)	Data 0.000 (0.000)	Loss 0.7597 (0.5187)	Prec@1 73.438 (81.779)
Epoch: [35][360/391]	Time 0.240 (0.188)	Data 0.000 (0.000)	Loss 0.5695 (0.5195)	Prec@1 77.344 (81.722)
Test: [0/79]	Time 0.262 (0.262)	Loss 0.4608 (0.4608)	Prec@1 83.594 (83.594)
Test: [60/79]	Time 0.156 (0.183)	Loss 0.4686 (0.4914)	Prec@1 83.594 (83.786)
 * Prec@1 83.510
Best Accuracy:83.51
current lr 1.00000e-01
Epoch: [36][0/391]	Time 0.373 (0.373)	Data 0.119 (0.119)	Loss 0.6118 (0.6118)	Prec@1 78.906 (78.906)
Epoch: [36][60/391]	Time 0.242 (0.195)	Data 0.000 (0.002)	Loss 0.4205 (0.5214)	Prec@1 84.375 (82.006)
Epoch: [36][120/391]	Time 0.167 (0.192)	Data 0.000 (0.001)	Loss 0.5446 (0.5062)	Prec@1 81.250 (82.412)
Epoch: [36][180/391]	Time 0.167 (0.188)	Data 0.000 (0.001)	Loss 0.5661 (0.5176)	Prec@1 79.688 (82.074)
Epoch: [36][240/391]	Time 0.168 (0.188)	Data 0.000 (0.001)	Loss 0.5810 (0.5131)	Prec@1 81.250 (82.174)
Epoch: [36][300/391]	Time 0.172 (0.186)	Data 0.000 (0.001)	Loss 0.6404 (0.5132)	Prec@1 79.688 (82.122)
Epoch: [36][360/391]	Time 0.171 (0.188)	Data 0.000 (0.000)	Loss 0.6888 (0.5201)	Prec@1 71.875 (81.904)
Test: [0/79]	Time 0.254 (0.254)	Loss 0.5774 (0.5774)	Prec@1 78.906 (78.906)
Test: [60/79]	Time 0.156 (0.182)	Loss 0.5655 (0.5956)	Prec@1 83.594 (80.584)
 * Prec@1 80.600
Best Accuracy:83.51
current lr 1.00000e-01
Epoch: [37][0/391]	Time 0.304 (0.304)	Data 0.126 (0.126)	Loss 0.5881 (0.5881)	Prec@1 76.562 (76.562)
Epoch: [37][60/391]	Time 0.169 (0.218)	Data 0.000 (0.002)	Loss 0.4828 (0.5399)	Prec@1 87.500 (81.634)
Epoch: [37][120/391]	Time 0.171 (0.198)	Data 0.000 (0.001)	Loss 0.4326 (0.5234)	Prec@1 85.156 (81.863)
Epoch: [37][180/391]	Time 0.166 (0.198)	Data 0.000 (0.001)	Loss 0.5101 (0.5185)	Prec@1 84.375 (81.992)
Epoch: [37][240/391]	Time 0.171 (0.196)	Data 0.000 (0.001)	Loss 0.4923 (0.5136)	Prec@1 82.812 (82.119)
Epoch: [37][300/391]	Time 0.167 (0.194)	Data 0.000 (0.001)	Loss 0.4754 (0.5170)	Prec@1 81.250 (81.985)
Epoch: [37][360/391]	Time 0.169 (0.192)	Data 0.000 (0.001)	Loss 0.6668 (0.5147)	Prec@1 77.344 (81.977)
Test: [0/79]	Time 0.256 (0.256)	Loss 0.3029 (0.3029)	Prec@1 89.844 (89.844)
Test: [60/79]	Time 0.157 (0.169)	Loss 0.4310 (0.4461)	Prec@1 83.594 (85.348)
 * Prec@1 85.310
Best Accuracy:85.31
current lr 1.00000e-01
Epoch: [38][0/391]	Time 0.289 (0.289)	Data 0.114 (0.114)	Loss 0.5547 (0.5547)	Prec@1 82.812 (82.812)
Epoch: [38][60/391]	Time 0.168 (0.188)	Data 0.000 (0.002)	Loss 0.3598 (0.5004)	Prec@1 85.938 (82.351)
Epoch: [38][120/391]	Time 0.241 (0.186)	Data 0.000 (0.001)	Loss 0.5278 (0.5024)	Prec@1 81.250 (82.322)
Epoch: [38][180/391]	Time 0.167 (0.190)	Data 0.000 (0.001)	Loss 0.5845 (0.5055)	Prec@1 78.125 (82.143)
Epoch: [38][240/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.4738 (0.5097)	Prec@1 85.156 (82.028)
Epoch: [38][300/391]	Time 0.168 (0.191)	Data 0.000 (0.001)	Loss 0.6584 (0.5112)	Prec@1 77.344 (81.943)
Epoch: [38][360/391]	Time 0.169 (0.192)	Data 0.000 (0.000)	Loss 0.4752 (0.5130)	Prec@1 81.250 (81.930)
Test: [0/79]	Time 0.250 (0.250)	Loss 0.3804 (0.3804)	Prec@1 89.062 (89.062)
Test: [60/79]	Time 0.229 (0.180)	Loss 0.6079 (0.4981)	Prec@1 79.688 (84.004)
 * Prec@1 83.800
Best Accuracy:85.31
current lr 1.00000e-01
Epoch: [39][0/391]	Time 0.322 (0.322)	Data 0.139 (0.139)	Loss 0.4703 (0.4703)	Prec@1 82.812 (82.812)
Epoch: [39][60/391]	Time 0.242 (0.200)	Data 0.000 (0.002)	Loss 0.4871 (0.5131)	Prec@1 80.469 (81.762)
Epoch: [39][120/391]	Time 0.241 (0.195)	Data 0.000 (0.001)	Loss 0.6159 (0.5090)	Prec@1 82.812 (82.147)
Epoch: [39][180/391]	Time 0.242 (0.193)	Data 0.000 (0.001)	Loss 0.6092 (0.5138)	Prec@1 78.125 (81.967)
Epoch: [39][240/391]	Time 0.166 (0.193)	Data 0.000 (0.001)	Loss 0.5689 (0.5156)	Prec@1 76.562 (81.934)
Epoch: [39][300/391]	Time 0.169 (0.194)	Data 0.000 (0.001)	Loss 0.4553 (0.5105)	Prec@1 85.938 (82.164)
Epoch: [39][360/391]	Time 0.168 (0.196)	Data 0.000 (0.001)	Loss 0.4626 (0.5090)	Prec@1 84.375 (82.178)
Test: [0/79]	Time 0.251 (0.251)	Loss 0.5088 (0.5088)	Prec@1 82.031 (82.031)
Test: [60/79]	Time 0.231 (0.184)	Loss 0.5145 (0.5618)	Prec@1 83.594 (82.121)
 * Prec@1 82.280
Best Accuracy:85.31
current lr 1.00000e-01
Epoch: [40][0/391]	Time 0.323 (0.323)	Data 0.142 (0.142)	Loss 0.4790 (0.4790)	Prec@1 85.156 (85.156)
Epoch: [40][60/391]	Time 0.167 (0.183)	Data 0.000 (0.002)	Loss 0.4642 (0.4837)	Prec@1 82.031 (82.915)
Epoch: [40][120/391]	Time 0.166 (0.192)	Data 0.000 (0.001)	Loss 0.4591 (0.4932)	Prec@1 82.812 (82.496)
Epoch: [40][180/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.4164 (0.4978)	Prec@1 83.594 (82.480)
Epoch: [40][240/391]	Time 0.167 (0.187)	Data 0.000 (0.001)	Loss 0.4833 (0.5011)	Prec@1 82.031 (82.446)
Epoch: [40][300/391]	Time 0.168 (0.191)	Data 0.000 (0.001)	Loss 0.6170 (0.5041)	Prec@1 79.688 (82.397)
Epoch: [40][360/391]	Time 0.169 (0.189)	Data 0.000 (0.001)	Loss 0.6501 (0.5093)	Prec@1 77.344 (82.174)
Test: [0/79]	Time 0.340 (0.340)	Loss 0.4933 (0.4933)	Prec@1 84.375 (84.375)
Test: [60/79]	Time 0.230 (0.180)	Loss 0.5191 (0.5111)	Prec@1 83.594 (83.466)
 * Prec@1 83.600
Best Accuracy:85.31
current lr 1.00000e-01
Epoch: [41][0/391]	Time 0.302 (0.302)	Data 0.121 (0.121)	Loss 0.4769 (0.4769)	Prec@1 81.250 (81.250)
Epoch: [41][60/391]	Time 0.168 (0.196)	Data 0.000 (0.002)	Loss 0.5627 (0.4903)	Prec@1 84.375 (82.902)
Epoch: [41][120/391]	Time 0.167 (0.188)	Data 0.000 (0.001)	Loss 0.6357 (0.4948)	Prec@1 79.688 (83.006)
Epoch: [41][180/391]	Time 0.166 (0.196)	Data 0.000 (0.001)	Loss 0.5390 (0.5009)	Prec@1 82.031 (82.856)
Epoch: [41][240/391]	Time 0.170 (0.195)	Data 0.000 (0.001)	Loss 0.5910 (0.5029)	Prec@1 82.031 (82.712)
Epoch: [41][300/391]	Time 0.166 (0.194)	Data 0.000 (0.001)	Loss 0.4981 (0.5010)	Prec@1 82.031 (82.774)
Epoch: [41][360/391]	Time 0.167 (0.193)	Data 0.000 (0.000)	Loss 0.5758 (0.5018)	Prec@1 81.250 (82.726)
Test: [0/79]	Time 0.246 (0.246)	Loss 0.4403 (0.4403)	Prec@1 85.156 (85.156)
Test: [60/79]	Time 0.156 (0.200)	Loss 0.5620 (0.5155)	Prec@1 79.688 (82.633)
 * Prec@1 82.870
Best Accuracy:85.31
current lr 1.00000e-01
Epoch: [42][0/391]	Time 0.280 (0.280)	Data 0.106 (0.106)	Loss 0.4051 (0.4051)	Prec@1 86.719 (86.719)
Epoch: [42][60/391]	Time 0.166 (0.198)	Data 0.000 (0.002)	Loss 0.4702 (0.5014)	Prec@1 83.594 (82.070)
Epoch: [42][120/391]	Time 0.166 (0.194)	Data 0.000 (0.001)	Loss 0.4749 (0.5004)	Prec@1 84.375 (82.541)
Epoch: [42][180/391]	Time 0.166 (0.192)	Data 0.000 (0.001)	Loss 0.4522 (0.4969)	Prec@1 82.812 (82.592)
Epoch: [42][240/391]	Time 0.239 (0.189)	Data 0.000 (0.001)	Loss 0.4346 (0.4964)	Prec@1 82.031 (82.553)
Epoch: [42][300/391]	Time 0.166 (0.191)	Data 0.000 (0.000)	Loss 0.4901 (0.4980)	Prec@1 82.031 (82.545)
Epoch: [42][360/391]	Time 0.168 (0.194)	Data 0.000 (0.000)	Loss 0.5178 (0.4986)	Prec@1 79.688 (82.512)
Test: [0/79]	Time 0.306 (0.306)	Loss 0.6032 (0.6032)	Prec@1 79.688 (79.688)
Test: [60/79]	Time 0.236 (0.177)	Loss 0.7828 (0.6935)	Prec@1 73.438 (78.471)
 * Prec@1 78.830
Best Accuracy:85.31
current lr 1.00000e-01
Epoch: [43][0/391]	Time 0.396 (0.396)	Data 0.145 (0.145)	Loss 0.4756 (0.4756)	Prec@1 83.594 (83.594)
Epoch: [43][60/391]	Time 0.242 (0.192)	Data 0.000 (0.003)	Loss 0.4485 (0.5042)	Prec@1 81.250 (82.249)
Epoch: [43][120/391]	Time 0.241 (0.192)	Data 0.000 (0.001)	Loss 0.5386 (0.4938)	Prec@1 82.031 (82.561)
Epoch: [43][180/391]	Time 0.244 (0.192)	Data 0.000 (0.001)	Loss 0.5800 (0.4995)	Prec@1 83.594 (82.420)
Epoch: [43][240/391]	Time 0.243 (0.192)	Data 0.000 (0.001)	Loss 0.5661 (0.5048)	Prec@1 84.375 (82.265)
Epoch: [43][300/391]	Time 0.169 (0.192)	Data 0.000 (0.001)	Loss 0.5241 (0.5047)	Prec@1 81.250 (82.345)
Epoch: [43][360/391]	Time 0.167 (0.194)	Data 0.000 (0.001)	Loss 0.5407 (0.5040)	Prec@1 82.031 (82.373)
Test: [0/79]	Time 0.331 (0.331)	Loss 0.3759 (0.3759)	Prec@1 85.938 (85.938)
Test: [60/79]	Time 0.155 (0.176)	Loss 0.5808 (0.4893)	Prec@1 85.156 (84.465)
 * Prec@1 84.540
Best Accuracy:85.31
current lr 1.00000e-01
Epoch: [44][0/391]	Time 0.312 (0.312)	Data 0.135 (0.135)	Loss 0.5332 (0.5332)	Prec@1 79.688 (79.688)
Epoch: [44][60/391]	Time 0.171 (0.191)	Data 0.000 (0.002)	Loss 0.3869 (0.4853)	Prec@1 88.281 (82.979)
Epoch: [44][120/391]	Time 0.243 (0.193)	Data 0.000 (0.001)	Loss 0.3882 (0.4933)	Prec@1 87.500 (82.716)
Epoch: [44][180/391]	Time 0.245 (0.193)	Data 0.000 (0.001)	Loss 0.5762 (0.4961)	Prec@1 78.906 (82.653)
Epoch: [44][240/391]	Time 0.244 (0.193)	Data 0.000 (0.001)	Loss 0.5866 (0.4983)	Prec@1 80.469 (82.660)
Epoch: [44][300/391]	Time 0.245 (0.192)	Data 0.000 (0.001)	Loss 0.5592 (0.4992)	Prec@1 79.688 (82.644)
Epoch: [44][360/391]	Time 0.246 (0.192)	Data 0.000 (0.001)	Loss 0.5075 (0.5000)	Prec@1 82.812 (82.577)
Test: [0/79]	Time 0.255 (0.255)	Loss 0.6495 (0.6495)	Prec@1 78.125 (78.125)
Test: [60/79]	Time 0.228 (0.193)	Loss 0.5306 (0.6442)	Prec@1 84.375 (79.521)
 * Prec@1 79.660
Best Accuracy:85.31
current lr 1.00000e-01
Epoch: [45][0/391]	Time 0.282 (0.282)	Data 0.109 (0.109)	Loss 0.7122 (0.7122)	Prec@1 75.000 (75.000)
Epoch: [45][60/391]	Time 0.239 (0.196)	Data 0.000 (0.002)	Loss 0.6385 (0.5049)	Prec@1 75.000 (81.890)
Epoch: [45][120/391]	Time 0.240 (0.195)	Data 0.000 (0.001)	Loss 0.5031 (0.4902)	Prec@1 80.469 (82.664)
Epoch: [45][180/391]	Time 0.167 (0.191)	Data 0.000 (0.001)	Loss 0.6209 (0.4960)	Prec@1 78.125 (82.532)
Epoch: [45][240/391]	Time 0.167 (0.190)	Data 0.000 (0.001)	Loss 0.4366 (0.4920)	Prec@1 84.375 (82.767)
Epoch: [45][300/391]	Time 0.167 (0.189)	Data 0.000 (0.001)	Loss 0.5467 (0.4918)	Prec@1 80.469 (82.872)
Epoch: [45][360/391]	Time 0.168 (0.189)	Data 0.000 (0.000)	Loss 0.4401 (0.4894)	Prec@1 84.375 (82.990)
Test: [0/79]	Time 0.331 (0.331)	Loss 0.3698 (0.3698)	Prec@1 86.719 (86.719)
Test: [60/79]	Time 0.219 (0.176)	Loss 0.5592 (0.5768)	Prec@1 82.031 (81.391)
 * Prec@1 81.400
Best Accuracy:85.31
current lr 1.00000e-01
Epoch: [46][0/391]	Time 0.282 (0.282)	Data 0.102 (0.102)	Loss 0.5777 (0.5777)	Prec@1 84.375 (84.375)
Epoch: [46][60/391]	Time 0.166 (0.194)	Data 0.000 (0.002)	Loss 0.3980 (0.4870)	Prec@1 85.156 (83.030)
Epoch: [46][120/391]	Time 0.166 (0.191)	Data 0.000 (0.001)	Loss 0.4381 (0.4829)	Prec@1 85.938 (83.110)
Epoch: [46][180/391]	Time 0.166 (0.191)	Data 0.000 (0.001)	Loss 0.4957 (0.4870)	Prec@1 83.594 (82.791)
Epoch: [46][240/391]	Time 0.166 (0.187)	Data 0.000 (0.001)	Loss 0.4816 (0.4900)	Prec@1 79.688 (82.644)
Epoch: [46][300/391]	Time 0.166 (0.187)	Data 0.000 (0.000)	Loss 0.3554 (0.4904)	Prec@1 89.062 (82.711)
Epoch: [46][360/391]	Time 0.166 (0.187)	Data 0.000 (0.000)	Loss 0.4778 (0.4919)	Prec@1 79.688 (82.683)
Test: [0/79]	Time 0.336 (0.336)	Loss 0.4664 (0.4664)	Prec@1 83.594 (83.594)
Test: [60/79]	Time 0.155 (0.174)	Loss 0.6197 (0.5895)	Prec@1 82.812 (82.505)
 * Prec@1 82.480
Best Accuracy:85.31
current lr 1.00000e-01
Epoch: [47][0/391]	Time 0.295 (0.295)	Data 0.113 (0.113)	Loss 0.4226 (0.4226)	Prec@1 86.719 (86.719)
Epoch: [47][60/391]	Time 0.169 (0.191)	Data 0.000 (0.002)	Loss 0.6371 (0.4891)	Prec@1 77.344 (83.069)
Epoch: [47][120/391]	Time 0.167 (0.194)	Data 0.000 (0.001)	Loss 0.4280 (0.4781)	Prec@1 85.156 (83.439)
Epoch: [47][180/391]	Time 0.166 (0.195)	Data 0.000 (0.001)	Loss 0.6012 (0.4834)	Prec@1 81.250 (83.197)
Epoch: [47][240/391]	Time 0.166 (0.192)	Data 0.000 (0.001)	Loss 0.4829 (0.4878)	Prec@1 83.594 (82.981)
Epoch: [47][300/391]	Time 0.168 (0.191)	Data 0.000 (0.001)	Loss 0.6067 (0.4891)	Prec@1 81.250 (82.919)
Epoch: [47][360/391]	Time 0.168 (0.191)	Data 0.000 (0.000)	Loss 0.5624 (0.4895)	Prec@1 81.250 (82.906)
Test: [0/79]	Time 0.261 (0.261)	Loss 0.4626 (0.4626)	Prec@1 84.375 (84.375)
Test: [60/79]	Time 0.225 (0.181)	Loss 0.7361 (0.5925)	Prec@1 79.688 (81.801)
 * Prec@1 81.590
Best Accuracy:85.31
current lr 1.00000e-01
Epoch: [48][0/391]	Time 0.284 (0.284)	Data 0.110 (0.110)	Loss 0.4359 (0.4359)	Prec@1 85.938 (85.938)
Epoch: [48][60/391]	Time 0.168 (0.188)	Data 0.000 (0.002)	Loss 0.4730 (0.5099)	Prec@1 81.250 (81.519)
Epoch: [48][120/391]	Time 0.168 (0.184)	Data 0.000 (0.001)	Loss 0.5322 (0.5000)	Prec@1 77.344 (82.199)
Epoch: [48][180/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.4277 (0.4949)	Prec@1 86.719 (82.618)
Epoch: [48][240/391]	Time 0.167 (0.188)	Data 0.000 (0.001)	Loss 0.4690 (0.4939)	Prec@1 82.812 (82.647)
Epoch: [48][300/391]	Time 0.167 (0.190)	Data 0.000 (0.001)	Loss 0.4915 (0.4907)	Prec@1 86.719 (82.896)
Epoch: [48][360/391]	Time 0.166 (0.190)	Data 0.000 (0.000)	Loss 0.4451 (0.4922)	Prec@1 83.594 (82.832)
Test: [0/79]	Time 0.244 (0.244)	Loss 0.4003 (0.4003)	Prec@1 86.719 (86.719)
Test: [60/79]	Time 0.229 (0.181)	Loss 0.5427 (0.5841)	Prec@1 83.594 (81.532)
 * Prec@1 81.420
Best Accuracy:85.31
current lr 1.00000e-01
Epoch: [49][0/391]	Time 0.285 (0.285)	Data 0.105 (0.105)	Loss 0.4829 (0.4829)	Prec@1 80.469 (80.469)
Epoch: [49][60/391]	Time 0.169 (0.183)	Data 0.000 (0.002)	Loss 0.5970 (0.4756)	Prec@1 78.125 (83.312)
Epoch: [49][120/391]	Time 0.168 (0.191)	Data 0.000 (0.001)	Loss 0.5154 (0.4819)	Prec@1 82.031 (83.090)
Epoch: [49][180/391]	Time 0.169 (0.192)	Data 0.000 (0.001)	Loss 0.4356 (0.4839)	Prec@1 85.938 (82.994)
Epoch: [49][240/391]	Time 0.170 (0.194)	Data 0.000 (0.001)	Loss 0.5642 (0.4874)	Prec@1 83.594 (82.890)
Epoch: [49][300/391]	Time 0.169 (0.196)	Data 0.000 (0.001)	Loss 0.6607 (0.4916)	Prec@1 78.125 (82.815)
Epoch: [49][360/391]	Time 0.171 (0.194)	Data 0.000 (0.000)	Loss 0.4348 (0.4913)	Prec@1 84.375 (82.836)
Test: [0/79]	Time 0.259 (0.259)	Loss 0.4985 (0.4985)	Prec@1 84.375 (84.375)
Test: [60/79]	Time 0.156 (0.178)	Loss 0.5840 (0.5748)	Prec@1 81.250 (82.108)
 * Prec@1 82.110
Best Accuracy:85.31
current lr 1.00000e-01
Epoch: [50][0/391]	Time 0.317 (0.317)	Data 0.143 (0.143)	Loss 0.3875 (0.3875)	Prec@1 85.156 (85.156)
Epoch: [50][60/391]	Time 0.167 (0.191)	Data 0.000 (0.002)	Loss 0.5011 (0.4617)	Prec@1 78.125 (83.863)
Epoch: [50][120/391]	Time 0.243 (0.198)	Data 0.000 (0.001)	Loss 0.6261 (0.4726)	Prec@1 77.344 (83.665)
Epoch: [50][180/391]	Time 0.245 (0.196)	Data 0.000 (0.001)	Loss 0.5078 (0.4717)	Prec@1 80.469 (83.646)
Epoch: [50][240/391]	Time 0.245 (0.194)	Data 0.000 (0.001)	Loss 0.4658 (0.4825)	Prec@1 82.031 (83.289)
Epoch: [50][300/391]	Time 0.242 (0.194)	Data 0.000 (0.001)	Loss 0.4360 (0.4825)	Prec@1 85.156 (83.269)
Epoch: [50][360/391]	Time 0.221 (0.193)	Data 0.000 (0.001)	Loss 0.3644 (0.4824)	Prec@1 85.938 (83.289)
Test: [0/79]	Time 0.248 (0.248)	Loss 0.3408 (0.3408)	Prec@1 91.406 (91.406)
Test: [60/79]	Time 0.156 (0.177)	Loss 0.5111 (0.4618)	Prec@1 84.375 (85.425)
 * Prec@1 85.410
Best Accuracy:85.41
current lr 1.00000e-01
Epoch: [51][0/391]	Time 0.288 (0.288)	Data 0.115 (0.115)	Loss 0.4393 (0.4393)	Prec@1 85.156 (85.156)
Epoch: [51][60/391]	Time 0.166 (0.193)	Data 0.000 (0.002)	Loss 0.6357 (0.4763)	Prec@1 77.344 (83.491)
Epoch: [51][120/391]	Time 0.166 (0.187)	Data 0.000 (0.001)	Loss 0.3640 (0.4705)	Prec@1 88.281 (83.587)
Epoch: [51][180/391]	Time 0.169 (0.186)	Data 0.000 (0.001)	Loss 0.5929 (0.4797)	Prec@1 83.594 (83.326)
Epoch: [51][240/391]	Time 0.168 (0.187)	Data 0.000 (0.001)	Loss 0.4416 (0.4795)	Prec@1 84.375 (83.302)
Epoch: [51][300/391]	Time 0.168 (0.186)	Data 0.000 (0.000)	Loss 0.3832 (0.4842)	Prec@1 84.375 (83.106)
Epoch: [51][360/391]	Time 0.166 (0.186)	Data 0.000 (0.000)	Loss 0.5684 (0.4860)	Prec@1 80.469 (83.020)
Test: [0/79]	Time 0.250 (0.250)	Loss 0.4302 (0.4302)	Prec@1 87.500 (87.500)
Test: [60/79]	Time 0.156 (0.174)	Loss 0.4187 (0.5053)	Prec@1 85.156 (83.376)
 * Prec@1 83.550
Best Accuracy:85.41
current lr 1.00000e-01
Epoch: [52][0/391]	Time 0.343 (0.343)	Data 0.159 (0.159)	Loss 0.4796 (0.4796)	Prec@1 84.375 (84.375)
Epoch: [52][60/391]	Time 0.170 (0.186)	Data 0.000 (0.003)	Loss 0.6191 (0.4734)	Prec@1 76.562 (83.414)
Epoch: [52][120/391]	Time 0.170 (0.187)	Data 0.000 (0.001)	Loss 0.4859 (0.4798)	Prec@1 86.719 (83.122)
Epoch: [52][180/391]	Time 0.167 (0.189)	Data 0.000 (0.001)	Loss 0.5187 (0.4849)	Prec@1 80.469 (82.972)
Epoch: [52][240/391]	Time 0.242 (0.201)	Data 0.000 (0.001)	Loss 0.6341 (0.4862)	Prec@1 79.688 (83.013)
Epoch: [52][300/391]	Time 0.251 (0.199)	Data 0.000 (0.001)	Loss 0.3556 (0.4903)	Prec@1 88.281 (82.833)
Epoch: [52][360/391]	Time 0.167 (0.197)	Data 0.000 (0.001)	Loss 0.4312 (0.4919)	Prec@1 85.938 (82.771)
Test: [0/79]	Time 0.275 (0.275)	Loss 0.4398 (0.4398)	Prec@1 86.719 (86.719)
Test: [60/79]	Time 0.156 (0.181)	Loss 0.6514 (0.6183)	Prec@1 83.594 (79.457)
 * Prec@1 79.500
Best Accuracy:85.41
current lr 1.00000e-01
Epoch: [53][0/391]	Time 0.330 (0.330)	Data 0.149 (0.149)	Loss 0.4517 (0.4517)	Prec@1 82.031 (82.031)
Epoch: [53][60/391]	Time 0.167 (0.187)	Data 0.000 (0.003)	Loss 0.4235 (0.4812)	Prec@1 85.938 (83.453)
Epoch: [53][120/391]	Time 0.166 (0.184)	Data 0.000 (0.001)	Loss 0.3158 (0.4787)	Prec@1 90.625 (83.529)
Epoch: [53][180/391]	Time 0.165 (0.185)	Data 0.000 (0.001)	Loss 0.6110 (0.4836)	Prec@1 78.125 (83.231)
Epoch: [53][240/391]	Time 0.170 (0.188)	Data 0.000 (0.001)	Loss 0.5148 (0.4796)	Prec@1 81.250 (83.318)
Epoch: [53][300/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.5182 (0.4794)	Prec@1 82.031 (83.409)
Epoch: [53][360/391]	Time 0.168 (0.188)	Data 0.000 (0.001)	Loss 0.5469 (0.4785)	Prec@1 83.594 (83.418)
Test: [0/79]	Time 0.337 (0.337)	Loss 0.4953 (0.4953)	Prec@1 82.812 (82.812)
Test: [60/79]	Time 0.229 (0.176)	Loss 0.4312 (0.5213)	Prec@1 86.719 (83.517)
 * Prec@1 83.590
Best Accuracy:85.41
current lr 1.00000e-01
Epoch: [54][0/391]	Time 0.394 (0.394)	Data 0.141 (0.141)	Loss 0.4803 (0.4803)	Prec@1 83.594 (83.594)
Epoch: [54][60/391]	Time 0.242 (0.192)	Data 0.000 (0.002)	Loss 0.5816 (0.4745)	Prec@1 82.812 (83.658)
Epoch: [54][120/391]	Time 0.242 (0.192)	Data 0.000 (0.001)	Loss 0.3983 (0.4788)	Prec@1 87.500 (83.523)
Epoch: [54][180/391]	Time 0.167 (0.195)	Data 0.000 (0.001)	Loss 0.3976 (0.4766)	Prec@1 89.062 (83.667)
Epoch: [54][240/391]	Time 0.170 (0.194)	Data 0.000 (0.001)	Loss 0.5032 (0.4786)	Prec@1 81.250 (83.464)
Epoch: [54][300/391]	Time 0.166 (0.195)	Data 0.000 (0.001)	Loss 0.4730 (0.4773)	Prec@1 82.812 (83.422)
Epoch: [54][360/391]	Time 0.170 (0.192)	Data 0.000 (0.001)	Loss 0.4647 (0.4805)	Prec@1 85.156 (83.304)
Test: [0/79]	Time 0.252 (0.252)	Loss 0.4325 (0.4325)	Prec@1 84.375 (84.375)
Test: [60/79]	Time 0.228 (0.175)	Loss 0.4911 (0.5125)	Prec@1 82.812 (83.786)
 * Prec@1 83.370
Best Accuracy:85.41
current lr 1.00000e-01
Epoch: [55][0/391]	Time 0.295 (0.295)	Data 0.122 (0.122)	Loss 0.3532 (0.3532)	Prec@1 89.062 (89.062)
Epoch: [55][60/391]	Time 0.166 (0.183)	Data 0.000 (0.002)	Loss 0.3886 (0.4684)	Prec@1 86.719 (83.786)
Epoch: [55][120/391]	Time 0.166 (0.184)	Data 0.000 (0.001)	Loss 0.5208 (0.4802)	Prec@1 82.812 (83.329)
Epoch: [55][180/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.3738 (0.4811)	Prec@1 85.156 (83.296)
Epoch: [55][240/391]	Time 0.170 (0.188)	Data 0.000 (0.001)	Loss 0.5705 (0.4786)	Prec@1 80.469 (83.351)
Epoch: [55][300/391]	Time 0.166 (0.187)	Data 0.000 (0.001)	Loss 0.4425 (0.4785)	Prec@1 84.375 (83.409)
Epoch: [55][360/391]	Time 0.166 (0.189)	Data 0.000 (0.000)	Loss 0.5348 (0.4781)	Prec@1 79.688 (83.464)
Test: [0/79]	Time 0.340 (0.340)	Loss 0.2724 (0.2724)	Prec@1 89.844 (89.844)
Test: [60/79]	Time 0.228 (0.178)	Loss 0.3372 (0.4402)	Prec@1 88.281 (85.733)
 * Prec@1 85.750
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [56][0/391]	Time 0.378 (0.378)	Data 0.125 (0.125)	Loss 0.4633 (0.4633)	Prec@1 85.938 (85.938)
Epoch: [56][60/391]	Time 0.167 (0.207)	Data 0.000 (0.002)	Loss 0.4414 (0.4616)	Prec@1 85.938 (83.965)
Epoch: [56][120/391]	Time 0.167 (0.211)	Data 0.000 (0.001)	Loss 0.5452 (0.4662)	Prec@1 79.688 (83.768)
Epoch: [56][180/391]	Time 0.166 (0.203)	Data 0.000 (0.001)	Loss 0.4904 (0.4646)	Prec@1 85.156 (83.788)
Epoch: [56][240/391]	Time 0.167 (0.201)	Data 0.001 (0.001)	Loss 0.4573 (0.4685)	Prec@1 81.250 (83.565)
Epoch: [56][300/391]	Time 0.168 (0.201)	Data 0.000 (0.001)	Loss 0.3086 (0.4717)	Prec@1 89.062 (83.461)
Epoch: [56][360/391]	Time 0.236 (0.200)	Data 0.000 (0.000)	Loss 0.3797 (0.4706)	Prec@1 85.156 (83.477)
Test: [0/79]	Time 0.267 (0.267)	Loss 0.3695 (0.3695)	Prec@1 88.281 (88.281)
Test: [60/79]	Time 0.155 (0.192)	Loss 0.5177 (0.5603)	Prec@1 82.031 (81.852)
 * Prec@1 81.910
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [57][0/391]	Time 0.316 (0.316)	Data 0.141 (0.141)	Loss 0.3923 (0.3923)	Prec@1 85.938 (85.938)
Epoch: [57][60/391]	Time 0.170 (0.191)	Data 0.000 (0.002)	Loss 0.6260 (0.4786)	Prec@1 77.344 (83.478)
Epoch: [57][120/391]	Time 0.239 (0.188)	Data 0.000 (0.001)	Loss 0.5440 (0.4705)	Prec@1 82.031 (83.607)
Epoch: [57][180/391]	Time 0.243 (0.189)	Data 0.000 (0.001)	Loss 0.5089 (0.4707)	Prec@1 81.250 (83.572)
Epoch: [57][240/391]	Time 0.243 (0.189)	Data 0.000 (0.001)	Loss 0.6815 (0.4667)	Prec@1 75.000 (83.649)
Epoch: [57][300/391]	Time 0.241 (0.189)	Data 0.000 (0.001)	Loss 0.5379 (0.4690)	Prec@1 82.031 (83.555)
Epoch: [57][360/391]	Time 0.166 (0.191)	Data 0.000 (0.000)	Loss 0.5626 (0.4709)	Prec@1 82.812 (83.514)
Test: [0/79]	Time 0.249 (0.249)	Loss 0.6859 (0.6859)	Prec@1 80.469 (80.469)
Test: [60/79]	Time 0.226 (0.184)	Loss 0.7976 (0.8420)	Prec@1 73.438 (75.871)
 * Prec@1 76.040
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [58][0/391]	Time 0.293 (0.293)	Data 0.117 (0.117)	Loss 0.3594 (0.3594)	Prec@1 86.719 (86.719)
Epoch: [58][60/391]	Time 0.166 (0.182)	Data 0.000 (0.002)	Loss 0.5942 (0.4757)	Prec@1 81.250 (83.504)
Epoch: [58][120/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.4472 (0.4628)	Prec@1 87.500 (84.091)
Epoch: [58][180/391]	Time 0.168 (0.185)	Data 0.000 (0.001)	Loss 0.4108 (0.4627)	Prec@1 84.375 (83.943)
Epoch: [58][240/391]	Time 0.168 (0.184)	Data 0.000 (0.001)	Loss 0.4733 (0.4699)	Prec@1 78.125 (83.714)
Epoch: [58][300/391]	Time 0.170 (0.184)	Data 0.000 (0.001)	Loss 0.4583 (0.4704)	Prec@1 83.594 (83.615)
Epoch: [58][360/391]	Time 0.166 (0.188)	Data 0.000 (0.000)	Loss 0.5184 (0.4718)	Prec@1 80.469 (83.522)
Test: [0/79]	Time 0.329 (0.329)	Loss 0.4420 (0.4420)	Prec@1 85.156 (85.156)
Test: [60/79]	Time 0.228 (0.177)	Loss 0.4375 (0.5115)	Prec@1 83.594 (83.619)
 * Prec@1 83.540
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [59][0/391]	Time 0.319 (0.319)	Data 0.137 (0.137)	Loss 0.4101 (0.4101)	Prec@1 85.938 (85.938)
Epoch: [59][60/391]	Time 0.168 (0.206)	Data 0.000 (0.002)	Loss 0.4936 (0.4686)	Prec@1 83.594 (83.504)
Epoch: [59][120/391]	Time 0.169 (0.199)	Data 0.000 (0.001)	Loss 0.4278 (0.4691)	Prec@1 85.156 (83.620)
Epoch: [59][180/391]	Time 0.172 (0.196)	Data 0.000 (0.001)	Loss 0.4980 (0.4711)	Prec@1 81.250 (83.520)
Epoch: [59][240/391]	Time 0.167 (0.193)	Data 0.000 (0.001)	Loss 0.6188 (0.4736)	Prec@1 77.344 (83.406)
Epoch: [59][300/391]	Time 0.166 (0.191)	Data 0.000 (0.001)	Loss 0.4943 (0.4737)	Prec@1 85.156 (83.342)
Epoch: [59][360/391]	Time 0.166 (0.192)	Data 0.000 (0.001)	Loss 0.5028 (0.4696)	Prec@1 84.375 (83.462)
Test: [0/79]	Time 0.259 (0.259)	Loss 0.4221 (0.4221)	Prec@1 82.812 (82.812)
Test: [60/79]	Time 0.156 (0.173)	Loss 0.6265 (0.5710)	Prec@1 83.594 (82.403)
 * Prec@1 82.210
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [60][0/391]	Time 0.396 (0.396)	Data 0.146 (0.146)	Loss 0.4455 (0.4455)	Prec@1 84.375 (84.375)
Epoch: [60][60/391]	Time 0.238 (0.195)	Data 0.000 (0.003)	Loss 0.4216 (0.4645)	Prec@1 82.812 (83.671)
Epoch: [60][120/391]	Time 0.171 (0.195)	Data 0.000 (0.001)	Loss 0.5407 (0.4668)	Prec@1 83.594 (83.523)
Epoch: [60][180/391]	Time 0.168 (0.191)	Data 0.000 (0.001)	Loss 0.4758 (0.4651)	Prec@1 83.594 (83.693)
Epoch: [60][240/391]	Time 0.168 (0.194)	Data 0.000 (0.001)	Loss 0.3772 (0.4675)	Prec@1 84.375 (83.620)
Epoch: [60][300/391]	Time 0.166 (0.193)	Data 0.000 (0.001)	Loss 0.5671 (0.4698)	Prec@1 82.812 (83.573)
Epoch: [60][360/391]	Time 0.169 (0.191)	Data 0.000 (0.001)	Loss 0.4456 (0.4697)	Prec@1 83.594 (83.563)
Test: [0/79]	Time 0.245 (0.245)	Loss 0.3606 (0.3606)	Prec@1 86.719 (86.719)
Test: [60/79]	Time 0.155 (0.182)	Loss 0.6123 (0.4916)	Prec@1 82.031 (84.606)
 * Prec@1 84.580
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [61][0/391]	Time 0.315 (0.315)	Data 0.137 (0.137)	Loss 0.5118 (0.5118)	Prec@1 78.906 (78.906)
Epoch: [61][60/391]	Time 0.168 (0.184)	Data 0.000 (0.002)	Loss 0.4545 (0.4470)	Prec@1 87.500 (83.914)
Epoch: [61][120/391]	Time 0.168 (0.186)	Data 0.000 (0.001)	Loss 0.5609 (0.4542)	Prec@1 81.250 (83.768)
Epoch: [61][180/391]	Time 0.166 (0.188)	Data 0.000 (0.001)	Loss 0.4692 (0.4605)	Prec@1 84.375 (83.844)
Epoch: [61][240/391]	Time 0.167 (0.190)	Data 0.000 (0.001)	Loss 0.5275 (0.4664)	Prec@1 81.250 (83.600)
Epoch: [61][300/391]	Time 0.167 (0.192)	Data 0.000 (0.001)	Loss 0.6285 (0.4700)	Prec@1 78.906 (83.508)
Epoch: [61][360/391]	Time 0.169 (0.191)	Data 0.000 (0.001)	Loss 0.4462 (0.4690)	Prec@1 87.500 (83.596)
Test: [0/79]	Time 0.317 (0.317)	Loss 0.4082 (0.4082)	Prec@1 86.719 (86.719)
Test: [60/79]	Time 0.214 (0.176)	Loss 0.5489 (0.4953)	Prec@1 85.938 (84.055)
 * Prec@1 84.140
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [62][0/391]	Time 0.361 (0.361)	Data 0.118 (0.118)	Loss 0.3956 (0.3956)	Prec@1 86.719 (86.719)
Epoch: [62][60/391]	Time 0.187 (0.194)	Data 0.000 (0.002)	Loss 0.4728 (0.4651)	Prec@1 85.156 (83.671)
Epoch: [62][120/391]	Time 0.243 (0.192)	Data 0.000 (0.001)	Loss 0.4649 (0.4638)	Prec@1 83.594 (83.833)
Epoch: [62][180/391]	Time 0.243 (0.192)	Data 0.000 (0.001)	Loss 0.5683 (0.4681)	Prec@1 78.906 (83.658)
Epoch: [62][240/391]	Time 0.229 (0.192)	Data 0.000 (0.001)	Loss 0.5897 (0.4672)	Prec@1 78.125 (83.717)
Epoch: [62][300/391]	Time 0.173 (0.191)	Data 0.000 (0.001)	Loss 0.4461 (0.4645)	Prec@1 85.156 (83.856)
Epoch: [62][360/391]	Time 0.168 (0.191)	Data 0.000 (0.001)	Loss 0.6023 (0.4671)	Prec@1 80.469 (83.737)
Test: [0/79]	Time 0.262 (0.262)	Loss 0.4615 (0.4615)	Prec@1 86.719 (86.719)
Test: [60/79]	Time 0.156 (0.172)	Loss 0.3727 (0.4598)	Prec@1 88.281 (84.900)
 * Prec@1 84.780
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [63][0/391]	Time 0.318 (0.318)	Data 0.138 (0.138)	Loss 0.4375 (0.4375)	Prec@1 85.156 (85.156)
Epoch: [63][60/391]	Time 0.168 (0.198)	Data 0.000 (0.002)	Loss 0.5347 (0.4615)	Prec@1 84.375 (84.132)
Epoch: [63][120/391]	Time 0.215 (0.196)	Data 0.000 (0.001)	Loss 0.5184 (0.4617)	Prec@1 85.156 (84.065)
Epoch: [63][180/391]	Time 0.240 (0.193)	Data 0.000 (0.001)	Loss 0.5316 (0.4611)	Prec@1 83.594 (84.224)
Epoch: [63][240/391]	Time 0.244 (0.192)	Data 0.000 (0.001)	Loss 0.4388 (0.4588)	Prec@1 82.031 (84.193)
Epoch: [63][300/391]	Time 0.250 (0.192)	Data 0.000 (0.001)	Loss 0.4978 (0.4601)	Prec@1 82.812 (84.144)
Epoch: [63][360/391]	Time 0.241 (0.192)	Data 0.000 (0.001)	Loss 0.3633 (0.4620)	Prec@1 84.375 (84.094)
Test: [0/79]	Time 0.271 (0.271)	Loss 0.3715 (0.3715)	Prec@1 88.281 (88.281)
Test: [60/79]	Time 0.156 (0.181)	Loss 0.4911 (0.5006)	Prec@1 85.156 (84.170)
 * Prec@1 84.000
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [64][0/391]	Time 0.278 (0.278)	Data 0.099 (0.099)	Loss 0.4746 (0.4746)	Prec@1 86.719 (86.719)
Epoch: [64][60/391]	Time 0.167 (0.196)	Data 0.000 (0.002)	Loss 0.2989 (0.4694)	Prec@1 89.844 (83.274)
Epoch: [64][120/391]	Time 0.168 (0.190)	Data 0.000 (0.001)	Loss 0.6161 (0.4548)	Prec@1 77.344 (83.839)
Epoch: [64][180/391]	Time 0.169 (0.193)	Data 0.000 (0.001)	Loss 0.5451 (0.4637)	Prec@1 80.469 (83.667)
Epoch: [64][240/391]	Time 0.169 (0.193)	Data 0.000 (0.001)	Loss 0.4508 (0.4625)	Prec@1 83.594 (83.756)
Epoch: [64][300/391]	Time 0.169 (0.193)	Data 0.000 (0.001)	Loss 0.3912 (0.4643)	Prec@1 85.938 (83.838)
Epoch: [64][360/391]	Time 0.173 (0.193)	Data 0.000 (0.000)	Loss 0.4961 (0.4660)	Prec@1 82.812 (83.812)
Test: [0/79]	Time 0.328 (0.328)	Loss 0.4474 (0.4474)	Prec@1 85.156 (85.156)
Test: [60/79]	Time 0.229 (0.180)	Loss 0.8115 (0.6360)	Prec@1 74.219 (81.199)
 * Prec@1 81.240
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [65][0/391]	Time 0.374 (0.374)	Data 0.115 (0.115)	Loss 0.4144 (0.4144)	Prec@1 85.156 (85.156)
Epoch: [65][60/391]	Time 0.246 (0.196)	Data 0.000 (0.002)	Loss 0.4886 (0.4469)	Prec@1 83.594 (84.093)
Epoch: [65][120/391]	Time 0.246 (0.194)	Data 0.000 (0.001)	Loss 0.5009 (0.4462)	Prec@1 82.812 (84.220)
Epoch: [65][180/391]	Time 0.243 (0.192)	Data 0.000 (0.001)	Loss 0.4082 (0.4532)	Prec@1 82.031 (83.905)
Epoch: [65][240/391]	Time 0.244 (0.193)	Data 0.000 (0.001)	Loss 0.3438 (0.4573)	Prec@1 88.281 (83.821)
Epoch: [65][300/391]	Time 0.243 (0.193)	Data 0.000 (0.001)	Loss 0.4965 (0.4577)	Prec@1 83.594 (83.879)
Epoch: [65][360/391]	Time 0.245 (0.192)	Data 0.000 (0.000)	Loss 0.4655 (0.4607)	Prec@1 82.812 (83.784)
Test: [0/79]	Time 0.258 (0.258)	Loss 0.4032 (0.4032)	Prec@1 88.281 (88.281)
Test: [60/79]	Time 0.156 (0.193)	Loss 0.5459 (0.5580)	Prec@1 84.375 (82.761)
 * Prec@1 82.780
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [66][0/391]	Time 0.328 (0.328)	Data 0.146 (0.146)	Loss 0.5330 (0.5330)	Prec@1 82.031 (82.031)
Epoch: [66][60/391]	Time 0.166 (0.195)	Data 0.000 (0.003)	Loss 0.5577 (0.4615)	Prec@1 82.812 (83.952)
Epoch: [66][120/391]	Time 0.166 (0.186)	Data 0.000 (0.001)	Loss 0.5596 (0.4623)	Prec@1 80.469 (83.917)
Epoch: [66][180/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.5316 (0.4622)	Prec@1 83.594 (83.930)
Epoch: [66][240/391]	Time 0.166 (0.188)	Data 0.000 (0.001)	Loss 0.3682 (0.4598)	Prec@1 88.281 (84.048)
Epoch: [66][300/391]	Time 0.167 (0.192)	Data 0.000 (0.001)	Loss 0.4146 (0.4624)	Prec@1 83.594 (83.960)
Epoch: [66][360/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.4330 (0.4646)	Prec@1 84.375 (83.827)
Test: [0/79]	Time 0.322 (0.322)	Loss 0.2796 (0.2796)	Prec@1 89.062 (89.062)
Test: [60/79]	Time 0.228 (0.177)	Loss 0.5155 (0.4960)	Prec@1 82.812 (84.247)
 * Prec@1 84.110
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [67][0/391]	Time 0.335 (0.335)	Data 0.162 (0.162)	Loss 0.4751 (0.4751)	Prec@1 84.375 (84.375)
Epoch: [67][60/391]	Time 0.241 (0.192)	Data 0.000 (0.003)	Loss 0.4833 (0.4338)	Prec@1 82.812 (84.862)
Epoch: [67][120/391]	Time 0.241 (0.191)	Data 0.000 (0.001)	Loss 0.5350 (0.4439)	Prec@1 82.031 (84.440)
Epoch: [67][180/391]	Time 0.244 (0.190)	Data 0.000 (0.001)	Loss 0.3388 (0.4513)	Prec@1 86.719 (84.043)
Epoch: [67][240/391]	Time 0.242 (0.190)	Data 0.000 (0.001)	Loss 0.3082 (0.4555)	Prec@1 89.844 (83.989)
Epoch: [67][300/391]	Time 0.242 (0.189)	Data 0.000 (0.001)	Loss 0.5322 (0.4583)	Prec@1 83.594 (83.934)
Epoch: [67][360/391]	Time 0.225 (0.189)	Data 0.000 (0.001)	Loss 0.5075 (0.4594)	Prec@1 82.812 (83.910)
Test: [0/79]	Time 0.231 (0.231)	Loss 0.6225 (0.6225)	Prec@1 79.688 (79.688)
Test: [60/79]	Time 0.156 (0.177)	Loss 0.6903 (0.6609)	Prec@1 83.594 (80.341)
 * Prec@1 80.040
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [68][0/391]	Time 0.309 (0.309)	Data 0.126 (0.126)	Loss 0.3231 (0.3231)	Prec@1 88.281 (88.281)
Epoch: [68][60/391]	Time 0.169 (0.192)	Data 0.000 (0.002)	Loss 0.3897 (0.4548)	Prec@1 85.938 (84.068)
Epoch: [68][120/391]	Time 0.167 (0.200)	Data 0.000 (0.001)	Loss 0.5440 (0.4594)	Prec@1 80.469 (84.084)
Epoch: [68][180/391]	Time 0.174 (0.196)	Data 0.000 (0.001)	Loss 0.5178 (0.4640)	Prec@1 80.469 (83.948)
Epoch: [68][240/391]	Time 0.174 (0.198)	Data 0.000 (0.001)	Loss 0.4527 (0.4639)	Prec@1 85.938 (83.860)
Epoch: [68][300/391]	Time 0.246 (0.201)	Data 0.000 (0.001)	Loss 0.5957 (0.4596)	Prec@1 79.688 (84.045)
Epoch: [68][360/391]	Time 0.246 (0.199)	Data 0.000 (0.001)	Loss 0.4695 (0.4611)	Prec@1 82.812 (83.892)
Test: [0/79]	Time 0.253 (0.253)	Loss 0.4361 (0.4361)	Prec@1 87.500 (87.500)
Test: [60/79]	Time 0.157 (0.192)	Loss 0.5732 (0.5286)	Prec@1 82.031 (83.171)
 * Prec@1 83.080
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [69][0/391]	Time 0.329 (0.329)	Data 0.154 (0.154)	Loss 0.4571 (0.4571)	Prec@1 86.719 (86.719)
Epoch: [69][60/391]	Time 0.169 (0.207)	Data 0.000 (0.003)	Loss 0.4962 (0.4357)	Prec@1 83.594 (85.259)
Epoch: [69][120/391]	Time 0.242 (0.208)	Data 0.000 (0.001)	Loss 0.5868 (0.4615)	Prec@1 76.562 (84.136)
Epoch: [69][180/391]	Time 0.242 (0.203)	Data 0.000 (0.001)	Loss 0.4850 (0.4627)	Prec@1 86.719 (84.012)
Epoch: [69][240/391]	Time 0.244 (0.199)	Data 0.000 (0.001)	Loss 0.3198 (0.4589)	Prec@1 85.156 (84.112)
Epoch: [69][300/391]	Time 0.172 (0.198)	Data 0.000 (0.001)	Loss 0.4843 (0.4582)	Prec@1 85.156 (84.217)
Epoch: [69][360/391]	Time 0.242 (0.197)	Data 0.000 (0.001)	Loss 0.4808 (0.4572)	Prec@1 82.031 (84.213)
Test: [0/79]	Time 0.255 (0.255)	Loss 0.5793 (0.5793)	Prec@1 81.250 (81.250)
Test: [60/79]	Time 0.157 (0.172)	Loss 0.7083 (0.7141)	Prec@1 80.469 (79.111)
 * Prec@1 78.960
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [70][0/391]	Time 0.338 (0.338)	Data 0.153 (0.153)	Loss 0.4004 (0.4004)	Prec@1 83.594 (83.594)
Epoch: [70][60/391]	Time 0.169 (0.212)	Data 0.000 (0.003)	Loss 0.3417 (0.4601)	Prec@1 84.375 (83.952)
Epoch: [70][120/391]	Time 0.166 (0.198)	Data 0.000 (0.001)	Loss 0.4546 (0.4527)	Prec@1 81.250 (83.936)
Epoch: [70][180/391]	Time 0.166 (0.198)	Data 0.000 (0.001)	Loss 0.5696 (0.4514)	Prec@1 76.562 (84.012)
Epoch: [70][240/391]	Time 0.166 (0.197)	Data 0.000 (0.001)	Loss 0.5327 (0.4557)	Prec@1 79.688 (83.850)
Epoch: [70][300/391]	Time 0.249 (0.198)	Data 0.000 (0.001)	Loss 0.5582 (0.4542)	Prec@1 80.469 (83.905)
Epoch: [70][360/391]	Time 0.243 (0.197)	Data 0.000 (0.001)	Loss 0.4033 (0.4565)	Prec@1 84.375 (83.892)
Test: [0/79]	Time 0.267 (0.267)	Loss 0.4217 (0.4217)	Prec@1 84.375 (84.375)
Test: [60/79]	Time 0.156 (0.191)	Loss 0.5943 (0.6276)	Prec@1 82.812 (80.661)
 * Prec@1 80.730
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [71][0/391]	Time 0.289 (0.289)	Data 0.113 (0.113)	Loss 0.3624 (0.3624)	Prec@1 88.281 (88.281)
Epoch: [71][60/391]	Time 0.169 (0.190)	Data 0.000 (0.002)	Loss 0.5593 (0.4541)	Prec@1 81.250 (83.850)
Epoch: [71][120/391]	Time 0.168 (0.188)	Data 0.000 (0.001)	Loss 0.4541 (0.4584)	Prec@1 82.812 (83.742)
Epoch: [71][180/391]	Time 0.166 (0.195)	Data 0.000 (0.001)	Loss 0.6569 (0.4581)	Prec@1 78.125 (83.835)
Epoch: [71][240/391]	Time 0.165 (0.193)	Data 0.000 (0.001)	Loss 0.5280 (0.4564)	Prec@1 85.938 (83.944)
Epoch: [71][300/391]	Time 0.168 (0.193)	Data 0.000 (0.001)	Loss 0.5182 (0.4554)	Prec@1 79.688 (84.043)
Epoch: [71][360/391]	Time 0.170 (0.192)	Data 0.000 (0.000)	Loss 0.6251 (0.4598)	Prec@1 80.469 (83.858)
Test: [0/79]	Time 0.326 (0.326)	Loss 0.5224 (0.5224)	Prec@1 82.031 (82.031)
Test: [60/79]	Time 0.156 (0.184)	Loss 0.4387 (0.5697)	Prec@1 85.156 (81.583)
 * Prec@1 81.800
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [72][0/391]	Time 0.323 (0.323)	Data 0.144 (0.144)	Loss 0.4940 (0.4940)	Prec@1 83.594 (83.594)
Epoch: [72][60/391]	Time 0.243 (0.196)	Data 0.000 (0.003)	Loss 0.3583 (0.4618)	Prec@1 88.281 (83.850)
Epoch: [72][120/391]	Time 0.243 (0.193)	Data 0.000 (0.001)	Loss 0.4623 (0.4570)	Prec@1 80.469 (84.162)
Epoch: [72][180/391]	Time 0.235 (0.192)	Data 0.000 (0.001)	Loss 0.3823 (0.4607)	Prec@1 85.156 (83.909)
Epoch: [72][240/391]	Time 0.245 (0.191)	Data 0.000 (0.001)	Loss 0.4609 (0.4595)	Prec@1 86.719 (83.931)
Epoch: [72][300/391]	Time 0.167 (0.189)	Data 0.000 (0.001)	Loss 0.4684 (0.4561)	Prec@1 87.500 (84.110)
Epoch: [72][360/391]	Time 0.168 (0.189)	Data 0.000 (0.001)	Loss 0.4545 (0.4566)	Prec@1 86.719 (84.089)
Test: [0/79]	Time 0.258 (0.258)	Loss 0.5455 (0.5455)	Prec@1 85.156 (85.156)
Test: [60/79]	Time 0.156 (0.178)	Loss 0.5566 (0.5535)	Prec@1 82.812 (83.120)
 * Prec@1 83.200
Best Accuracy:85.75
current lr 1.00000e-01
Epoch: [73][0/391]	Time 0.387 (0.387)	Data 0.140 (0.140)	Loss 0.3583 (0.3583)	Prec@1 87.500 (87.500)
Epoch: [73][60/391]	Time 0.246 (0.195)	Data 0.000 (0.002)	Loss 0.5182 (0.4494)	Prec@1 81.250 (84.285)
Epoch: [73][120/391]	Time 0.172 (0.195)	Data 0.000 (0.001)	Loss 0.4065 (0.4465)	Prec@1 87.500 (84.569)
Epoch: [73][180/391]	Time 0.172 (0.195)	Data 0.000 (0.001)	Loss 0.3607 (0.4507)	Prec@1 89.062 (84.220)
Epoch: [73][240/391]	Time 0.172 (0.196)	Data 0.000 (0.001)	Loss 0.5201 (0.4508)	Prec@1 82.031 (84.226)
Epoch: [73][300/391]	Time 0.174 (0.196)	Data 0.000 (0.001)	Loss 0.3624 (0.4534)	Prec@1 87.500 (84.110)
Epoch: [73][360/391]	Time 0.166 (0.195)	Data 0.000 (0.001)	Loss 0.5704 (0.4579)	Prec@1 82.031 (83.951)
Test: [0/79]	Time 0.285 (0.285)	Loss 0.4120 (0.4120)	Prec@1 87.500 (87.500)
Test: [60/79]	Time 0.163 (0.180)	Loss 0.4019 (0.4384)	Prec@1 86.719 (86.040)
 * Prec@1 85.990
Best Accuracy:85.99
current lr 1.00000e-01
Epoch: [74][0/391]	Time 0.320 (0.320)	Data 0.140 (0.140)	Loss 0.4093 (0.4093)	Prec@1 84.375 (84.375)
Epoch: [74][60/391]	Time 0.168 (0.193)	Data 0.000 (0.002)	Loss 0.3851 (0.4533)	Prec@1 86.719 (84.503)
Epoch: [74][120/391]	Time 0.166 (0.191)	Data 0.000 (0.001)	Loss 0.4669 (0.4441)	Prec@1 82.812 (84.485)
Epoch: [74][180/391]	Time 0.168 (0.194)	Data 0.000 (0.001)	Loss 0.4363 (0.4491)	Prec@1 84.375 (84.375)
Epoch: [74][240/391]	Time 0.242 (0.195)	Data 0.000 (0.001)	Loss 0.4767 (0.4504)	Prec@1 83.594 (84.171)
Epoch: [74][300/391]	Time 0.167 (0.199)	Data 0.000 (0.001)	Loss 0.4849 (0.4534)	Prec@1 85.938 (84.053)
Epoch: [74][360/391]	Time 0.167 (0.199)	Data 0.000 (0.001)	Loss 0.4345 (0.4555)	Prec@1 80.469 (84.011)
Test: [0/79]	Time 0.349 (0.349)	Loss 0.3642 (0.3642)	Prec@1 87.500 (87.500)
Test: [60/79]	Time 0.230 (0.176)	Loss 0.4565 (0.4735)	Prec@1 84.375 (85.195)
 * Prec@1 85.200
Best Accuracy:85.99
current lr 1.00000e-01
Epoch: [75][0/391]	Time 0.315 (0.315)	Data 0.138 (0.138)	Loss 0.3748 (0.3748)	Prec@1 85.938 (85.938)
Epoch: [75][60/391]	Time 0.167 (0.187)	Data 0.000 (0.002)	Loss 0.3062 (0.4356)	Prec@1 87.500 (84.874)
Epoch: [75][120/391]	Time 0.167 (0.187)	Data 0.000 (0.001)	Loss 0.3827 (0.4454)	Prec@1 88.281 (84.601)
Epoch: [75][180/391]	Time 0.167 (0.186)	Data 0.000 (0.001)	Loss 0.4596 (0.4535)	Prec@1 81.250 (84.185)
Epoch: [75][240/391]	Time 0.166 (0.187)	Data 0.000 (0.001)	Loss 0.4777 (0.4572)	Prec@1 81.250 (84.051)
Epoch: [75][300/391]	Time 0.167 (0.187)	Data 0.000 (0.001)	Loss 0.3292 (0.4598)	Prec@1 88.281 (83.949)
Epoch: [75][360/391]	Time 0.169 (0.187)	Data 0.000 (0.001)	Loss 0.4446 (0.4593)	Prec@1 83.594 (83.953)
Test: [0/79]	Time 0.330 (0.330)	Loss 0.4586 (0.4586)	Prec@1 82.812 (82.812)
Test: [60/79]	Time 0.156 (0.177)	Loss 0.4385 (0.5236)	Prec@1 88.281 (83.466)
 * Prec@1 83.360
Best Accuracy:85.99
current lr 1.00000e-01
Epoch: [76][0/391]	Time 0.305 (0.305)	Data 0.117 (0.117)	Loss 0.4895 (0.4895)	Prec@1 83.594 (83.594)
Epoch: [76][60/391]	Time 0.245 (0.199)	Data 0.000 (0.002)	Loss 0.5453 (0.4455)	Prec@1 79.688 (84.721)
Epoch: [76][120/391]	Time 0.245 (0.194)	Data 0.000 (0.001)	Loss 0.5289 (0.4480)	Prec@1 81.250 (84.246)
Epoch: [76][180/391]	Time 0.245 (0.192)	Data 0.000 (0.001)	Loss 0.5149 (0.4487)	Prec@1 79.688 (84.328)
Epoch: [76][240/391]	Time 0.244 (0.192)	Data 0.000 (0.001)	Loss 0.5045 (0.4484)	Prec@1 80.469 (84.427)
Epoch: [76][300/391]	Time 0.244 (0.191)	Data 0.000 (0.001)	Loss 0.4132 (0.4497)	Prec@1 86.719 (84.305)
Epoch: [76][360/391]	Time 0.170 (0.192)	Data 0.000 (0.000)	Loss 0.6191 (0.4517)	Prec@1 79.688 (84.254)
Test: [0/79]	Time 0.272 (0.272)	Loss 0.6996 (0.6996)	Prec@1 77.344 (77.344)
Test: [60/79]	Time 0.155 (0.176)	Loss 0.4730 (0.6251)	Prec@1 80.469 (80.277)
 * Prec@1 80.250
Best Accuracy:85.99
current lr 1.00000e-01
Epoch: [77][0/391]	Time 0.274 (0.274)	Data 0.097 (0.097)	Loss 0.3756 (0.3756)	Prec@1 87.500 (87.500)
Epoch: [77][60/391]	Time 0.167 (0.188)	Data 0.000 (0.002)	Loss 0.4930 (0.4370)	Prec@1 84.375 (84.234)
Epoch: [77][120/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.4147 (0.4441)	Prec@1 86.719 (84.362)
Epoch: [77][180/391]	Time 0.169 (0.186)	Data 0.000 (0.001)	Loss 0.4544 (0.4464)	Prec@1 84.375 (84.271)
Epoch: [77][240/391]	Time 0.169 (0.192)	Data 0.000 (0.001)	Loss 0.5506 (0.4500)	Prec@1 84.375 (84.333)
Epoch: [77][300/391]	Time 0.168 (0.192)	Data 0.000 (0.000)	Loss 0.3661 (0.4498)	Prec@1 84.375 (84.308)
Epoch: [77][360/391]	Time 0.177 (0.193)	Data 0.000 (0.000)	Loss 0.3632 (0.4497)	Prec@1 83.594 (84.336)
Test: [0/79]	Time 0.311 (0.311)	Loss 0.4275 (0.4275)	Prec@1 87.500 (87.500)
Test: [60/79]	Time 0.156 (0.181)	Loss 0.4470 (0.4442)	Prec@1 84.375 (85.438)
 * Prec@1 85.360
Best Accuracy:85.99
current lr 1.00000e-01
Epoch: [78][0/391]	Time 0.409 (0.409)	Data 0.156 (0.156)	Loss 0.4714 (0.4714)	Prec@1 85.156 (85.156)
Epoch: [78][60/391]	Time 0.245 (0.191)	Data 0.000 (0.003)	Loss 0.4365 (0.4617)	Prec@1 86.719 (83.927)
Epoch: [78][120/391]	Time 0.244 (0.192)	Data 0.000 (0.001)	Loss 0.4066 (0.4523)	Prec@1 84.375 (84.168)
Epoch: [78][180/391]	Time 0.169 (0.192)	Data 0.000 (0.001)	Loss 0.3330 (0.4542)	Prec@1 89.062 (84.030)
Epoch: [78][240/391]	Time 0.167 (0.195)	Data 0.000 (0.001)	Loss 0.4984 (0.4553)	Prec@1 81.250 (84.064)
Epoch: [78][300/391]	Time 0.168 (0.196)	Data 0.000 (0.001)	Loss 0.3899 (0.4522)	Prec@1 85.156 (84.217)
Epoch: [78][360/391]	Time 0.167 (0.197)	Data 0.000 (0.001)	Loss 0.4301 (0.4520)	Prec@1 87.500 (84.249)
Test: [0/79]	Time 0.261 (0.261)	Loss 0.3789 (0.3789)	Prec@1 88.281 (88.281)
Test: [60/79]	Time 0.156 (0.185)	Loss 0.3538 (0.4541)	Prec@1 87.500 (85.323)
 * Prec@1 84.890
Best Accuracy:85.99
current lr 1.00000e-01
Epoch: [79][0/391]	Time 0.399 (0.399)	Data 0.145 (0.145)	Loss 0.5197 (0.5197)	Prec@1 81.250 (81.250)
Epoch: [79][60/391]	Time 0.169 (0.200)	Data 0.000 (0.003)	Loss 0.4074 (0.4439)	Prec@1 82.031 (84.759)
Epoch: [79][120/391]	Time 0.168 (0.199)	Data 0.000 (0.001)	Loss 0.3052 (0.4457)	Prec@1 89.844 (84.549)
Epoch: [79][180/391]	Time 0.170 (0.197)	Data 0.000 (0.001)	Loss 0.4388 (0.4433)	Prec@1 85.938 (84.785)
Epoch: [79][240/391]	Time 0.168 (0.195)	Data 0.000 (0.001)	Loss 0.4344 (0.4440)	Prec@1 89.844 (84.670)
Epoch: [79][300/391]	Time 0.168 (0.195)	Data 0.000 (0.001)	Loss 0.4274 (0.4433)	Prec@1 83.594 (84.692)
Epoch: [79][360/391]	Time 0.168 (0.196)	Data 0.000 (0.001)	Loss 0.3888 (0.4448)	Prec@1 87.500 (84.695)
Test: [0/79]	Time 0.291 (0.291)	Loss 0.4476 (0.4476)	Prec@1 87.500 (87.500)
Test: [60/79]	Time 0.156 (0.198)	Loss 0.7104 (0.6190)	Prec@1 80.469 (81.621)
 * Prec@1 81.350
Best Accuracy:85.99
current lr 1.00000e-01
Epoch: [80][0/391]	Time 0.283 (0.283)	Data 0.108 (0.108)	Loss 0.3276 (0.3276)	Prec@1 87.500 (87.500)
Epoch: [80][60/391]	Time 0.167 (0.192)	Data 0.000 (0.002)	Loss 0.4121 (0.4159)	Prec@1 83.594 (85.220)
Epoch: [80][120/391]	Time 0.169 (0.194)	Data 0.000 (0.001)	Loss 0.4072 (0.4349)	Prec@1 85.156 (84.704)
Epoch: [80][180/391]	Time 0.167 (0.193)	Data 0.000 (0.001)	Loss 0.5190 (0.4419)	Prec@1 79.688 (84.500)
Epoch: [80][240/391]	Time 0.169 (0.194)	Data 0.000 (0.001)	Loss 0.4325 (0.4461)	Prec@1 82.812 (84.378)
Epoch: [80][300/391]	Time 0.169 (0.194)	Data 0.000 (0.001)	Loss 0.5883 (0.4487)	Prec@1 78.906 (84.336)
Epoch: [80][360/391]	Time 0.166 (0.193)	Data 0.000 (0.000)	Loss 0.4674 (0.4473)	Prec@1 84.375 (84.392)
Test: [0/79]	Time 0.339 (0.339)	Loss 0.6779 (0.6779)	Prec@1 78.906 (78.906)
Test: [60/79]	Time 0.156 (0.179)	Loss 0.7676 (0.6692)	Prec@1 76.562 (79.444)
 * Prec@1 79.180
Best Accuracy:85.99
current lr 1.00000e-01
Epoch: [81][0/391]	Time 0.373 (0.373)	Data 0.121 (0.121)	Loss 0.5674 (0.5674)	Prec@1 79.688 (79.688)
Epoch: [81][60/391]	Time 0.167 (0.188)	Data 0.000 (0.002)	Loss 0.4514 (0.4365)	Prec@1 82.812 (85.131)
Epoch: [81][120/391]	Time 0.237 (0.190)	Data 0.000 (0.001)	Loss 0.3695 (0.4468)	Prec@1 87.500 (84.666)
Epoch: [81][180/391]	Time 0.242 (0.190)	Data 0.000 (0.001)	Loss 0.5171 (0.4438)	Prec@1 83.594 (84.561)
Epoch: [81][240/391]	Time 0.242 (0.190)	Data 0.000 (0.001)	Loss 0.5061 (0.4504)	Prec@1 77.344 (84.307)
Epoch: [81][300/391]	Time 0.242 (0.190)	Data 0.000 (0.001)	Loss 0.3819 (0.4514)	Prec@1 87.500 (84.258)
Epoch: [81][360/391]	Time 0.224 (0.189)	Data 0.000 (0.000)	Loss 0.5385 (0.4519)	Prec@1 79.688 (84.200)
Test: [0/79]	Time 0.262 (0.262)	Loss 0.5750 (0.5750)	Prec@1 82.031 (82.031)
Test: [60/79]	Time 0.156 (0.180)	Loss 0.6230 (0.6217)	Prec@1 82.031 (81.327)
 * Prec@1 81.130
Best Accuracy:85.99
current lr 1.00000e-01
Epoch: [82][0/391]	Time 0.361 (0.361)	Data 0.105 (0.105)	Loss 0.4733 (0.4733)	Prec@1 84.375 (84.375)
Epoch: [82][60/391]	Time 0.242 (0.193)	Data 0.000 (0.002)	Loss 0.3943 (0.4673)	Prec@1 88.281 (83.683)
Epoch: [82][120/391]	Time 0.246 (0.191)	Data 0.000 (0.001)	Loss 0.5084 (0.4534)	Prec@1 87.500 (84.155)
Epoch: [82][180/391]	Time 0.246 (0.191)	Data 0.000 (0.001)	Loss 0.3893 (0.4495)	Prec@1 87.500 (84.241)
Epoch: [82][240/391]	Time 0.245 (0.190)	Data 0.000 (0.001)	Loss 0.4826 (0.4528)	Prec@1 83.594 (84.164)
Epoch: [82][300/391]	Time 0.167 (0.191)	Data 0.000 (0.001)	Loss 0.5530 (0.4521)	Prec@1 80.469 (84.209)
Epoch: [82][360/391]	Time 0.246 (0.190)	Data 0.000 (0.000)	Loss 0.4354 (0.4532)	Prec@1 82.812 (84.146)
Test: [0/79]	Time 0.256 (0.256)	Loss 0.4251 (0.4251)	Prec@1 86.719 (86.719)
Test: [60/79]	Time 0.156 (0.191)	Loss 0.4795 (0.4551)	Prec@1 83.594 (85.003)
 * Prec@1 85.160
Best Accuracy:85.99
current lr 1.00000e-01
Epoch: [83][0/391]	Time 0.284 (0.284)	Data 0.102 (0.102)	Loss 0.4252 (0.4252)	Prec@1 87.500 (87.500)
Epoch: [83][60/391]	Time 0.167 (0.198)	Data 0.000 (0.002)	Loss 0.3526 (0.4398)	Prec@1 86.719 (84.618)
Epoch: [83][120/391]	Time 0.167 (0.196)	Data 0.000 (0.001)	Loss 0.4625 (0.4439)	Prec@1 80.469 (84.369)
Epoch: [83][180/391]	Time 0.168 (0.195)	Data 0.000 (0.001)	Loss 0.5548 (0.4396)	Prec@1 82.031 (84.621)
Epoch: [83][240/391]	Time 0.169 (0.196)	Data 0.000 (0.001)	Loss 0.5209 (0.4390)	Prec@1 82.031 (84.563)
Epoch: [83][300/391]	Time 0.171 (0.195)	Data 0.000 (0.000)	Loss 0.3954 (0.4445)	Prec@1 86.719 (84.336)
Epoch: [83][360/391]	Time 0.167 (0.193)	Data 0.000 (0.000)	Loss 0.4475 (0.4451)	Prec@1 86.719 (84.288)
Test: [0/79]	Time 0.257 (0.257)	Loss 0.5346 (0.5346)	Prec@1 84.375 (84.375)
Test: [60/79]	Time 0.155 (0.179)	Loss 0.4274 (0.4787)	Prec@1 83.594 (85.079)
 * Prec@1 85.090
Best Accuracy:85.99
current lr 1.00000e-01
Epoch: [84][0/391]	Time 0.414 (0.414)	Data 0.157 (0.157)	Loss 0.5197 (0.5197)	Prec@1 77.344 (77.344)
Epoch: [84][60/391]	Time 0.247 (0.193)	Data 0.000 (0.003)	Loss 0.5161 (0.4402)	Prec@1 82.031 (84.772)
Epoch: [84][120/391]	Time 0.246 (0.192)	Data 0.000 (0.001)	Loss 0.3957 (0.4447)	Prec@1 84.375 (84.640)
Epoch: [84][180/391]	Time 0.206 (0.192)	Data 0.000 (0.001)	Loss 0.3672 (0.4464)	Prec@1 87.500 (84.556)
Epoch: [84][240/391]	Time 0.166 (0.195)	Data 0.000 (0.001)	Loss 0.5140 (0.4495)	Prec@1 79.688 (84.401)
Epoch: [84][300/391]	Time 0.168 (0.194)	Data 0.000 (0.001)	Loss 0.4008 (0.4478)	Prec@1 86.719 (84.453)
Epoch: [84][360/391]	Time 0.166 (0.195)	Data 0.000 (0.001)	Loss 0.5344 (0.4496)	Prec@1 78.125 (84.397)
Test: [0/79]	Time 0.353 (0.353)	Loss 0.2841 (0.2841)	Prec@1 89.062 (89.062)
Test: [60/79]	Time 0.231 (0.175)	Loss 0.4495 (0.4310)	Prec@1 85.938 (85.400)
 * Prec@1 85.520
Best Accuracy:85.99
current lr 1.00000e-01
Epoch: [85][0/391]	Time 0.292 (0.292)	Data 0.110 (0.110)	Loss 0.4101 (0.4101)	Prec@1 85.938 (85.938)
Epoch: [85][60/391]	Time 0.166 (0.199)	Data 0.000 (0.002)	Loss 0.5203 (0.4501)	Prec@1 82.812 (84.465)
Epoch: [85][120/391]	Time 0.243 (0.197)	Data 0.000 (0.001)	Loss 0.3375 (0.4528)	Prec@1 87.500 (84.323)
Epoch: [85][180/391]	Time 0.166 (0.200)	Data 0.000 (0.001)	Loss 0.3887 (0.4462)	Prec@1 84.375 (84.595)
Epoch: [85][240/391]	Time 0.166 (0.199)	Data 0.000 (0.001)	Loss 0.3873 (0.4513)	Prec@1 84.375 (84.320)
Epoch: [85][300/391]	Time 0.166 (0.196)	Data 0.000 (0.000)	Loss 0.5202 (0.4519)	Prec@1 82.812 (84.214)
Epoch: [85][360/391]	Time 0.166 (0.194)	Data 0.000 (0.000)	Loss 0.4730 (0.4533)	Prec@1 82.812 (84.137)
Test: [0/79]	Time 0.338 (0.338)	Loss 0.2718 (0.2718)	Prec@1 91.406 (91.406)
Test: [60/79]	Time 0.230 (0.176)	Loss 0.3996 (0.4043)	Prec@1 87.500 (86.924)
 * Prec@1 86.610
Best Accuracy:86.61
current lr 1.00000e-01
Epoch: [86][0/391]	Time 0.276 (0.276)	Data 0.104 (0.104)	Loss 0.3949 (0.3949)	Prec@1 85.938 (85.938)
Epoch: [86][60/391]	Time 0.166 (0.180)	Data 0.000 (0.002)	Loss 0.4627 (0.4241)	Prec@1 81.250 (84.874)
Epoch: [86][120/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.4289 (0.4282)	Prec@1 86.719 (84.788)
Epoch: [86][180/391]	Time 0.166 (0.186)	Data 0.000 (0.001)	Loss 0.3677 (0.4336)	Prec@1 89.062 (84.656)
Epoch: [86][240/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.3161 (0.4335)	Prec@1 86.719 (84.745)
Epoch: [86][300/391]	Time 0.243 (0.190)	Data 0.000 (0.000)	Loss 0.4143 (0.4359)	Prec@1 83.594 (84.712)
Epoch: [86][360/391]	Time 0.243 (0.189)	Data 0.000 (0.000)	Loss 0.4083 (0.4368)	Prec@1 87.500 (84.756)
Test: [0/79]	Time 0.263 (0.263)	Loss 0.4631 (0.4631)	Prec@1 85.156 (85.156)
Test: [60/79]	Time 0.156 (0.187)	Loss 0.4109 (0.5412)	Prec@1 85.938 (83.786)
 * Prec@1 83.460
Best Accuracy:86.61
current lr 1.00000e-01
Epoch: [87][0/391]	Time 0.287 (0.287)	Data 0.106 (0.106)	Loss 0.7024 (0.7024)	Prec@1 78.125 (78.125)
Epoch: [87][60/391]	Time 0.166 (0.187)	Data 0.000 (0.002)	Loss 0.4081 (0.4428)	Prec@1 85.156 (84.375)
Epoch: [87][120/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.3344 (0.4390)	Prec@1 89.062 (84.601)
Epoch: [87][180/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.4730 (0.4416)	Prec@1 82.812 (84.591)
Epoch: [87][240/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.5363 (0.4414)	Prec@1 83.594 (84.566)
Epoch: [87][300/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.3729 (0.4429)	Prec@1 88.281 (84.515)
Epoch: [87][360/391]	Time 0.168 (0.188)	Data 0.000 (0.000)	Loss 0.3979 (0.4462)	Prec@1 84.375 (84.384)
Test: [0/79]	Time 0.328 (0.328)	Loss 0.4537 (0.4537)	Prec@1 85.156 (85.156)
Test: [60/79]	Time 0.226 (0.173)	Loss 0.8283 (0.6519)	Prec@1 80.469 (81.173)
 * Prec@1 80.860
Best Accuracy:86.61
current lr 1.00000e-01
Epoch: [88][0/391]	Time 0.375 (0.375)	Data 0.116 (0.116)	Loss 0.5792 (0.5792)	Prec@1 80.469 (80.469)
Epoch: [88][60/391]	Time 0.243 (0.191)	Data 0.000 (0.002)	Loss 0.5263 (0.4246)	Prec@1 82.031 (85.451)
Epoch: [88][120/391]	Time 0.242 (0.189)	Data 0.000 (0.001)	Loss 0.6806 (0.4475)	Prec@1 78.125 (84.607)
Epoch: [88][180/391]	Time 0.242 (0.189)	Data 0.000 (0.001)	Loss 0.3053 (0.4465)	Prec@1 88.281 (84.664)
Epoch: [88][240/391]	Time 0.243 (0.188)	Data 0.000 (0.001)	Loss 0.3785 (0.4455)	Prec@1 85.156 (84.518)
Epoch: [88][300/391]	Time 0.244 (0.188)	Data 0.000 (0.001)	Loss 0.5041 (0.4466)	Prec@1 84.375 (84.554)
Epoch: [88][360/391]	Time 0.170 (0.189)	Data 0.000 (0.000)	Loss 0.4199 (0.4493)	Prec@1 85.938 (84.522)
Test: [0/79]	Time 0.252 (0.252)	Loss 0.3539 (0.3539)	Prec@1 86.719 (86.719)
Test: [60/79]	Time 0.194 (0.180)	Loss 0.5269 (0.4633)	Prec@1 84.375 (85.451)
 * Prec@1 85.320
Best Accuracy:86.61
current lr 1.00000e-01
Epoch: [89][0/391]	Time 0.307 (0.307)	Data 0.132 (0.132)	Loss 0.4099 (0.4099)	Prec@1 85.938 (85.938)
Epoch: [89][60/391]	Time 0.172 (0.185)	Data 0.000 (0.002)	Loss 0.2925 (0.4318)	Prec@1 88.281 (84.990)
Epoch: [89][120/391]	Time 0.171 (0.187)	Data 0.000 (0.001)	Loss 0.4154 (0.4405)	Prec@1 85.938 (84.898)
Epoch: [89][180/391]	Time 0.171 (0.190)	Data 0.000 (0.001)	Loss 0.5141 (0.4414)	Prec@1 82.031 (84.781)
Epoch: [89][240/391]	Time 0.168 (0.193)	Data 0.000 (0.001)	Loss 0.4460 (0.4447)	Prec@1 82.812 (84.686)
Epoch: [89][300/391]	Time 0.170 (0.193)	Data 0.000 (0.001)	Loss 0.4235 (0.4478)	Prec@1 85.156 (84.507)
Epoch: [89][360/391]	Time 0.171 (0.193)	Data 0.000 (0.000)	Loss 0.4219 (0.4483)	Prec@1 85.156 (84.444)
Test: [0/79]	Time 0.255 (0.255)	Loss 0.3687 (0.3687)	Prec@1 87.500 (87.500)
Test: [60/79]	Time 0.156 (0.178)	Loss 0.4314 (0.4412)	Prec@1 82.031 (86.104)
 * Prec@1 86.150
Best Accuracy:86.61
current lr 1.00000e-01
Epoch: [90][0/391]	Time 0.392 (0.392)	Data 0.134 (0.134)	Loss 0.4532 (0.4532)	Prec@1 85.156 (85.156)
Epoch: [90][60/391]	Time 0.246 (0.194)	Data 0.000 (0.002)	Loss 0.5302 (0.4284)	Prec@1 84.375 (85.143)
Epoch: [90][120/391]	Time 0.245 (0.191)	Data 0.000 (0.001)	Loss 0.3777 (0.4347)	Prec@1 84.375 (84.898)
Epoch: [90][180/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.3830 (0.4333)	Prec@1 84.375 (84.923)
Epoch: [90][240/391]	Time 0.241 (0.189)	Data 0.000 (0.001)	Loss 0.4916 (0.4439)	Prec@1 80.469 (84.592)
Epoch: [90][300/391]	Time 0.243 (0.189)	Data 0.000 (0.001)	Loss 0.3400 (0.4381)	Prec@1 88.281 (84.676)
Epoch: [90][360/391]	Time 0.242 (0.188)	Data 0.000 (0.001)	Loss 0.4150 (0.4380)	Prec@1 86.719 (84.635)
Test: [0/79]	Time 0.267 (0.267)	Loss 0.3770 (0.3770)	Prec@1 89.062 (89.062)
Test: [60/79]	Time 0.156 (0.181)	Loss 0.4920 (0.4908)	Prec@1 87.500 (84.477)
 * Prec@1 84.400
Best Accuracy:86.61
current lr 1.00000e-01
Epoch: [91][0/391]	Time 0.287 (0.287)	Data 0.112 (0.112)	Loss 0.4099 (0.4099)	Prec@1 88.281 (88.281)
Epoch: [91][60/391]	Time 0.166 (0.184)	Data 0.000 (0.002)	Loss 0.4892 (0.4529)	Prec@1 81.250 (84.042)
Epoch: [91][120/391]	Time 0.167 (0.186)	Data 0.000 (0.001)	Loss 0.3705 (0.4420)	Prec@1 86.719 (84.485)
Epoch: [91][180/391]	Time 0.170 (0.187)	Data 0.000 (0.001)	Loss 0.4891 (0.4393)	Prec@1 79.688 (84.621)
Epoch: [91][240/391]	Time 0.169 (0.190)	Data 0.000 (0.001)	Loss 0.4886 (0.4394)	Prec@1 78.906 (84.654)
Epoch: [91][300/391]	Time 0.170 (0.192)	Data 0.000 (0.001)	Loss 0.5109 (0.4406)	Prec@1 81.250 (84.645)
Epoch: [91][360/391]	Time 0.170 (0.192)	Data 0.000 (0.000)	Loss 0.3987 (0.4432)	Prec@1 85.938 (84.518)
Test: [0/79]	Time 0.348 (0.348)	Loss 0.6598 (0.6598)	Prec@1 76.562 (76.562)
Test: [60/79]	Time 0.174 (0.175)	Loss 0.7961 (0.8299)	Prec@1 75.000 (77.113)
 * Prec@1 77.210
Best Accuracy:86.61
current lr 1.00000e-01
Epoch: [92][0/391]	Time 0.353 (0.353)	Data 0.101 (0.101)	Loss 0.2741 (0.2741)	Prec@1 91.406 (91.406)
Epoch: [92][60/391]	Time 0.246 (0.193)	Data 0.000 (0.002)	Loss 0.3568 (0.4371)	Prec@1 86.719 (84.862)
Epoch: [92][120/391]	Time 0.243 (0.194)	Data 0.000 (0.001)	Loss 0.3379 (0.4379)	Prec@1 89.062 (84.730)
Epoch: [92][180/391]	Time 0.248 (0.193)	Data 0.000 (0.001)	Loss 0.3703 (0.4343)	Prec@1 86.719 (84.673)
Epoch: [92][240/391]	Time 0.245 (0.194)	Data 0.000 (0.001)	Loss 0.4044 (0.4337)	Prec@1 83.594 (84.712)
Epoch: [92][300/391]	Time 0.167 (0.193)	Data 0.000 (0.001)	Loss 0.3307 (0.4381)	Prec@1 89.844 (84.648)
Epoch: [92][360/391]	Time 0.258 (0.192)	Data 0.000 (0.000)	Loss 0.4265 (0.4429)	Prec@1 84.375 (84.509)
Test: [0/79]	Time 0.253 (0.253)	Loss 0.3168 (0.3168)	Prec@1 89.062 (89.062)
Test: [60/79]	Time 0.156 (0.176)	Loss 0.4607 (0.4562)	Prec@1 81.250 (85.336)
 * Prec@1 85.400
Best Accuracy:86.61
current lr 1.00000e-01
Epoch: [93][0/391]	Time 0.278 (0.278)	Data 0.098 (0.098)	Loss 0.4137 (0.4137)	Prec@1 83.594 (83.594)
Epoch: [93][60/391]	Time 0.167 (0.221)	Data 0.000 (0.002)	Loss 0.3213 (0.4354)	Prec@1 90.625 (84.964)
Epoch: [93][120/391]	Time 0.223 (0.211)	Data 0.000 (0.001)	Loss 0.3010 (0.4279)	Prec@1 91.406 (85.079)
Epoch: [93][180/391]	Time 0.243 (0.203)	Data 0.000 (0.001)	Loss 0.5085 (0.4314)	Prec@1 82.031 (85.009)
Epoch: [93][240/391]	Time 0.242 (0.199)	Data 0.000 (0.001)	Loss 0.4224 (0.4341)	Prec@1 84.375 (84.926)
Epoch: [93][300/391]	Time 0.242 (0.196)	Data 0.000 (0.000)	Loss 0.3515 (0.4356)	Prec@1 90.625 (84.871)
Epoch: [93][360/391]	Time 0.166 (0.196)	Data 0.000 (0.000)	Loss 0.3607 (0.4354)	Prec@1 88.281 (84.881)
Test: [0/79]	Time 0.264 (0.264)	Loss 0.3602 (0.3602)	Prec@1 84.375 (84.375)
Test: [60/79]	Time 0.229 (0.183)	Loss 0.5553 (0.4350)	Prec@1 82.812 (86.155)
 * Prec@1 86.230
Best Accuracy:86.61
current lr 1.00000e-01
Epoch: [94][0/391]	Time 0.335 (0.335)	Data 0.161 (0.161)	Loss 0.4177 (0.4177)	Prec@1 86.719 (86.719)
Epoch: [94][60/391]	Time 0.168 (0.187)	Data 0.000 (0.003)	Loss 0.3642 (0.4182)	Prec@1 88.281 (85.528)
Epoch: [94][120/391]	Time 0.243 (0.195)	Data 0.000 (0.001)	Loss 0.3794 (0.4247)	Prec@1 88.281 (85.266)
Epoch: [94][180/391]	Time 0.242 (0.191)	Data 0.000 (0.001)	Loss 0.4493 (0.4316)	Prec@1 83.594 (85.061)
Epoch: [94][240/391]	Time 0.243 (0.190)	Data 0.000 (0.001)	Loss 0.4862 (0.4379)	Prec@1 82.812 (84.780)
Epoch: [94][300/391]	Time 0.240 (0.189)	Data 0.000 (0.001)	Loss 0.4924 (0.4402)	Prec@1 82.812 (84.697)
Epoch: [94][360/391]	Time 0.239 (0.188)	Data 0.000 (0.001)	Loss 0.4801 (0.4378)	Prec@1 82.031 (84.816)
Test: [0/79]	Time 0.267 (0.267)	Loss 0.4872 (0.4872)	Prec@1 81.250 (81.250)
Test: [60/79]	Time 0.156 (0.182)	Loss 0.3905 (0.4810)	Prec@1 85.938 (84.785)
 * Prec@1 84.730
Best Accuracy:86.61
current lr 1.00000e-01
Epoch: [95][0/391]	Time 0.299 (0.299)	Data 0.116 (0.116)	Loss 0.3744 (0.3744)	Prec@1 87.500 (87.500)
Epoch: [95][60/391]	Time 0.170 (0.209)	Data 0.000 (0.002)	Loss 0.4900 (0.4260)	Prec@1 84.375 (84.759)
Epoch: [95][120/391]	Time 0.167 (0.203)	Data 0.000 (0.001)	Loss 0.4248 (0.4313)	Prec@1 82.812 (84.788)
Epoch: [95][180/391]	Time 0.168 (0.198)	Data 0.000 (0.001)	Loss 0.4847 (0.4368)	Prec@1 85.938 (84.880)
Epoch: [95][240/391]	Time 0.167 (0.199)	Data 0.000 (0.001)	Loss 0.2840 (0.4360)	Prec@1 90.625 (84.839)
Epoch: [95][300/391]	Time 0.229 (0.197)	Data 0.000 (0.001)	Loss 0.4233 (0.4407)	Prec@1 84.375 (84.720)
Epoch: [95][360/391]	Time 0.244 (0.195)	Data 0.000 (0.000)	Loss 0.5581 (0.4395)	Prec@1 80.469 (84.747)
Test: [0/79]	Time 0.262 (0.262)	Loss 0.3610 (0.3610)	Prec@1 85.938 (85.938)
Test: [60/79]	Time 0.156 (0.173)	Loss 0.4637 (0.4173)	Prec@1 84.375 (86.270)
 * Prec@1 86.340
Best Accuracy:86.61
current lr 1.00000e-01
Epoch: [96][0/391]	Time 0.328 (0.328)	Data 0.141 (0.141)	Loss 0.4739 (0.4739)	Prec@1 82.812 (82.812)
Epoch: [96][60/391]	Time 0.169 (0.186)	Data 0.000 (0.002)	Loss 0.5805 (0.4477)	Prec@1 80.469 (84.477)
Epoch: [96][120/391]	Time 0.167 (0.193)	Data 0.000 (0.001)	Loss 0.3804 (0.4330)	Prec@1 88.281 (84.885)
Epoch: [96][180/391]	Time 0.167 (0.194)	Data 0.000 (0.001)	Loss 0.5208 (0.4353)	Prec@1 83.594 (84.772)
Epoch: [96][240/391]	Time 0.169 (0.194)	Data 0.000 (0.001)	Loss 0.4325 (0.4380)	Prec@1 82.031 (84.696)
Epoch: [96][300/391]	Time 0.166 (0.193)	Data 0.000 (0.001)	Loss 0.4597 (0.4370)	Prec@1 83.594 (84.725)
Epoch: [96][360/391]	Time 0.167 (0.191)	Data 0.000 (0.001)	Loss 0.5713 (0.4378)	Prec@1 80.469 (84.620)
Test: [0/79]	Time 0.323 (0.323)	Loss 0.3062 (0.3062)	Prec@1 91.406 (91.406)
Test: [60/79]	Time 0.157 (0.187)	Loss 0.3456 (0.3763)	Prec@1 89.062 (87.769)
 * Prec@1 87.840
Best Accuracy:87.84
current lr 1.00000e-01
Epoch: [97][0/391]	Time 0.392 (0.392)	Data 0.135 (0.135)	Loss 0.3219 (0.3219)	Prec@1 88.281 (88.281)
Epoch: [97][60/391]	Time 0.240 (0.193)	Data 0.000 (0.002)	Loss 0.5133 (0.4248)	Prec@1 80.469 (85.297)
Epoch: [97][120/391]	Time 0.168 (0.197)	Data 0.000 (0.001)	Loss 0.4768 (0.4396)	Prec@1 83.594 (84.672)
Epoch: [97][180/391]	Time 0.168 (0.197)	Data 0.000 (0.001)	Loss 0.3875 (0.4448)	Prec@1 87.500 (84.669)
Epoch: [97][240/391]	Time 0.168 (0.196)	Data 0.000 (0.001)	Loss 0.3931 (0.4417)	Prec@1 87.500 (84.709)
Epoch: [97][300/391]	Time 0.166 (0.196)	Data 0.000 (0.001)	Loss 0.3998 (0.4407)	Prec@1 85.938 (84.757)
Epoch: [97][360/391]	Time 0.168 (0.194)	Data 0.000 (0.001)	Loss 0.4643 (0.4397)	Prec@1 84.375 (84.778)
Test: [0/79]	Time 0.245 (0.245)	Loss 0.4099 (0.4099)	Prec@1 87.500 (87.500)
Test: [60/79]	Time 0.156 (0.185)	Loss 0.5840 (0.5704)	Prec@1 79.688 (82.095)
 * Prec@1 81.910
Best Accuracy:87.84
current lr 1.00000e-01
Epoch: [98][0/391]	Time 0.378 (0.378)	Data 0.117 (0.117)	Loss 0.4243 (0.4243)	Prec@1 85.938 (85.938)
Epoch: [98][60/391]	Time 0.244 (0.192)	Data 0.000 (0.002)	Loss 0.4788 (0.4477)	Prec@1 84.375 (84.388)
Epoch: [98][120/391]	Time 0.241 (0.190)	Data 0.000 (0.001)	Loss 0.4717 (0.4387)	Prec@1 84.375 (84.691)
Epoch: [98][180/391]	Time 0.169 (0.191)	Data 0.000 (0.001)	Loss 0.3568 (0.4397)	Prec@1 88.281 (84.552)
Epoch: [98][240/391]	Time 0.243 (0.190)	Data 0.000 (0.001)	Loss 0.2628 (0.4376)	Prec@1 92.969 (84.524)
Epoch: [98][300/391]	Time 0.169 (0.190)	Data 0.000 (0.001)	Loss 0.5755 (0.4410)	Prec@1 82.031 (84.476)
Epoch: [98][360/391]	Time 0.169 (0.191)	Data 0.000 (0.001)	Loss 0.3913 (0.4444)	Prec@1 84.375 (84.397)
Test: [0/79]	Time 0.317 (0.317)	Loss 0.4335 (0.4335)	Prec@1 85.938 (85.938)
Test: [60/79]	Time 0.232 (0.175)	Loss 0.5932 (0.5462)	Prec@1 81.250 (83.735)
 * Prec@1 83.430
Best Accuracy:87.84
current lr 1.00000e-01
Epoch: [99][0/391]	Time 0.334 (0.334)	Data 0.148 (0.148)	Loss 0.3273 (0.3273)	Prec@1 86.719 (86.719)
Epoch: [99][60/391]	Time 0.230 (0.193)	Data 0.000 (0.003)	Loss 0.4580 (0.4267)	Prec@1 83.594 (84.964)
Epoch: [99][120/391]	Time 0.244 (0.190)	Data 0.000 (0.001)	Loss 0.4873 (0.4274)	Prec@1 81.250 (84.930)
Epoch: [99][180/391]	Time 0.244 (0.189)	Data 0.000 (0.001)	Loss 0.4007 (0.4270)	Prec@1 86.719 (85.061)
Epoch: [99][240/391]	Time 0.165 (0.191)	Data 0.000 (0.001)	Loss 0.3052 (0.4290)	Prec@1 88.281 (84.871)
Epoch: [99][300/391]	Time 0.166 (0.196)	Data 0.000 (0.001)	Loss 0.4092 (0.4276)	Prec@1 87.500 (84.871)
Epoch: [99][360/391]	Time 0.165 (0.195)	Data 0.000 (0.001)	Loss 0.5570 (0.4297)	Prec@1 82.031 (84.845)
Test: [0/79]	Time 0.248 (0.248)	Loss 0.4321 (0.4321)	Prec@1 83.594 (83.594)
Test: [60/79]	Time 0.156 (0.187)	Loss 0.4683 (0.4988)	Prec@1 86.719 (83.299)
 * Prec@1 83.280
Best Accuracy:87.84
current lr 1.00000e-02
Epoch: [100][0/391]	Time 0.326 (0.326)	Data 0.149 (0.149)	Loss 0.4715 (0.4715)	Prec@1 81.250 (81.250)
Epoch: [100][60/391]	Time 0.168 (0.205)	Data 0.000 (0.003)	Loss 0.5024 (0.3767)	Prec@1 83.594 (87.013)
Epoch: [100][120/391]	Time 0.167 (0.192)	Data 0.000 (0.001)	Loss 0.3038 (0.3630)	Prec@1 88.281 (87.339)
Epoch: [100][180/391]	Time 0.170 (0.198)	Data 0.000 (0.001)	Loss 0.3587 (0.3611)	Prec@1 83.594 (87.293)
Epoch: [100][240/391]	Time 0.170 (0.197)	Data 0.000 (0.001)	Loss 0.3229 (0.3547)	Prec@1 89.062 (87.562)
Epoch: [100][300/391]	Time 0.170 (0.197)	Data 0.000 (0.001)	Loss 0.4172 (0.3532)	Prec@1 85.938 (87.643)
Epoch: [100][360/391]	Time 0.167 (0.194)	Data 0.000 (0.001)	Loss 0.2853 (0.3473)	Prec@1 88.281 (87.894)
Test: [0/79]	Time 0.262 (0.262)	Loss 0.2081 (0.2081)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.156 (0.193)	Loss 0.2584 (0.2928)	Prec@1 90.625 (90.740)
 * Prec@1 90.710
Best Accuracy:90.71
current lr 1.00000e-02
Epoch: [101][0/391]	Time 0.323 (0.323)	Data 0.148 (0.148)	Loss 0.2885 (0.2885)	Prec@1 87.500 (87.500)
Epoch: [101][60/391]	Time 0.166 (0.208)	Data 0.000 (0.003)	Loss 0.3276 (0.3053)	Prec@1 86.719 (89.165)
Epoch: [101][120/391]	Time 0.168 (0.205)	Data 0.000 (0.001)	Loss 0.2992 (0.3121)	Prec@1 86.719 (88.966)
Epoch: [101][180/391]	Time 0.245 (0.205)	Data 0.000 (0.001)	Loss 0.2783 (0.3132)	Prec@1 85.156 (88.886)
Epoch: [101][240/391]	Time 0.245 (0.200)	Data 0.000 (0.001)	Loss 0.2591 (0.3130)	Prec@1 90.625 (88.956)
Epoch: [101][300/391]	Time 0.171 (0.200)	Data 0.000 (0.001)	Loss 0.3347 (0.3122)	Prec@1 86.719 (88.964)
Epoch: [101][360/391]	Time 0.170 (0.201)	Data 0.000 (0.001)	Loss 0.3287 (0.3117)	Prec@1 89.062 (89.047)
Test: [0/79]	Time 0.313 (0.313)	Loss 0.2162 (0.2162)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.156 (0.186)	Loss 0.2887 (0.2809)	Prec@1 90.625 (90.958)
 * Prec@1 90.990
Best Accuracy:90.99
current lr 1.00000e-02
Epoch: [102][0/391]	Time 0.405 (0.405)	Data 0.149 (0.149)	Loss 0.2972 (0.2972)	Prec@1 89.844 (89.844)
Epoch: [102][60/391]	Time 0.168 (0.197)	Data 0.000 (0.003)	Loss 0.3202 (0.2998)	Prec@1 89.844 (89.139)
Epoch: [102][120/391]	Time 0.168 (0.200)	Data 0.000 (0.001)	Loss 0.2604 (0.3046)	Prec@1 92.188 (89.146)
Epoch: [102][180/391]	Time 0.168 (0.199)	Data 0.000 (0.001)	Loss 0.3278 (0.3041)	Prec@1 88.281 (89.343)
Epoch: [102][240/391]	Time 0.170 (0.199)	Data 0.000 (0.001)	Loss 0.2295 (0.3048)	Prec@1 92.969 (89.263)
Epoch: [102][300/391]	Time 0.237 (0.197)	Data 0.000 (0.001)	Loss 0.2466 (0.3071)	Prec@1 92.188 (89.231)
Epoch: [102][360/391]	Time 0.238 (0.195)	Data 0.000 (0.001)	Loss 0.3035 (0.3052)	Prec@1 87.500 (89.290)
Test: [0/79]	Time 0.285 (0.285)	Loss 0.1895 (0.1895)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.229 (0.178)	Loss 0.2547 (0.2778)	Prec@1 90.625 (91.035)
 * Prec@1 91.060
Best Accuracy:91.06
current lr 1.00000e-02
Epoch: [103][0/391]	Time 0.285 (0.285)	Data 0.097 (0.097)	Loss 0.3523 (0.3523)	Prec@1 85.156 (85.156)
Epoch: [103][60/391]	Time 0.246 (0.205)	Data 0.000 (0.002)	Loss 0.3427 (0.3037)	Prec@1 87.500 (89.255)
Epoch: [103][120/391]	Time 0.245 (0.196)	Data 0.000 (0.001)	Loss 0.2193 (0.2981)	Prec@1 94.531 (89.353)
Epoch: [103][180/391]	Time 0.247 (0.194)	Data 0.000 (0.001)	Loss 0.2480 (0.2966)	Prec@1 91.406 (89.425)
Epoch: [103][240/391]	Time 0.170 (0.196)	Data 0.000 (0.001)	Loss 0.2835 (0.2966)	Prec@1 92.188 (89.464)
Epoch: [103][300/391]	Time 0.168 (0.198)	Data 0.000 (0.000)	Loss 0.1931 (0.2968)	Prec@1 95.312 (89.478)
Epoch: [103][360/391]	Time 0.169 (0.199)	Data 0.000 (0.000)	Loss 0.1516 (0.2953)	Prec@1 96.094 (89.578)
Test: [0/79]	Time 0.256 (0.256)	Loss 0.2043 (0.2043)	Prec@1 92.969 (92.969)
Test: [60/79]	Time 0.156 (0.210)	Loss 0.2936 (0.2807)	Prec@1 90.625 (90.779)
 * Prec@1 90.900
Best Accuracy:91.06
current lr 1.00000e-02
Epoch: [104][0/391]	Time 0.320 (0.320)	Data 0.136 (0.136)	Loss 0.3517 (0.3517)	Prec@1 87.500 (87.500)
Epoch: [104][60/391]	Time 0.166 (0.210)	Data 0.000 (0.002)	Loss 0.2300 (0.2903)	Prec@1 92.188 (90.036)
Epoch: [104][120/391]	Time 0.242 (0.203)	Data 0.000 (0.001)	Loss 0.1249 (0.2872)	Prec@1 94.531 (90.147)
Epoch: [104][180/391]	Time 0.241 (0.197)	Data 0.000 (0.001)	Loss 0.1832 (0.2886)	Prec@1 95.312 (89.943)
Epoch: [104][240/391]	Time 0.167 (0.198)	Data 0.000 (0.001)	Loss 0.2233 (0.2879)	Prec@1 92.969 (89.977)
Epoch: [104][300/391]	Time 0.166 (0.199)	Data 0.000 (0.001)	Loss 0.3242 (0.2884)	Prec@1 91.406 (89.942)
Epoch: [104][360/391]	Time 0.166 (0.197)	Data 0.000 (0.000)	Loss 0.3234 (0.2896)	Prec@1 90.625 (89.883)
Test: [0/79]	Time 0.275 (0.275)	Loss 0.2075 (0.2075)	Prec@1 92.188 (92.188)
Test: [60/79]	Time 0.156 (0.171)	Loss 0.2496 (0.2755)	Prec@1 89.844 (91.253)
 * Prec@1 91.280
Best Accuracy:91.28
current lr 1.00000e-02
Epoch: [105][0/391]	Time 0.375 (0.375)	Data 0.123 (0.123)	Loss 0.3053 (0.3053)	Prec@1 86.719 (86.719)
Epoch: [105][60/391]	Time 0.166 (0.191)	Data 0.000 (0.002)	Loss 0.3299 (0.2757)	Prec@1 88.281 (90.407)
Epoch: [105][120/391]	Time 0.166 (0.194)	Data 0.000 (0.001)	Loss 0.2948 (0.2810)	Prec@1 91.406 (90.283)
Epoch: [105][180/391]	Time 0.166 (0.198)	Data 0.000 (0.001)	Loss 0.2523 (0.2844)	Prec@1 92.969 (90.073)
Epoch: [105][240/391]	Time 0.242 (0.199)	Data 0.000 (0.001)	Loss 0.1806 (0.2858)	Prec@1 95.312 (90.019)
Epoch: [105][300/391]	Time 0.244 (0.196)	Data 0.000 (0.001)	Loss 0.3169 (0.2857)	Prec@1 91.406 (90.023)
Epoch: [105][360/391]	Time 0.241 (0.194)	Data 0.000 (0.000)	Loss 0.3056 (0.2851)	Prec@1 91.406 (90.036)
Test: [0/79]	Time 0.263 (0.263)	Loss 0.1932 (0.1932)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.157 (0.176)	Loss 0.2239 (0.2741)	Prec@1 93.750 (91.368)
 * Prec@1 91.480
Best Accuracy:91.48
current lr 1.00000e-02
Epoch: [106][0/391]	Time 0.349 (0.349)	Data 0.163 (0.163)	Loss 0.3137 (0.3137)	Prec@1 88.281 (88.281)
Epoch: [106][60/391]	Time 0.166 (0.213)	Data 0.000 (0.003)	Loss 0.4115 (0.2947)	Prec@1 85.156 (89.664)
Epoch: [106][120/391]	Time 0.169 (0.197)	Data 0.000 (0.002)	Loss 0.4162 (0.2840)	Prec@1 86.719 (89.986)
Epoch: [106][180/391]	Time 0.166 (0.193)	Data 0.000 (0.001)	Loss 0.2291 (0.2808)	Prec@1 93.750 (90.103)
Epoch: [106][240/391]	Time 0.167 (0.193)	Data 0.000 (0.001)	Loss 0.2454 (0.2815)	Prec@1 92.969 (90.090)
Epoch: [106][300/391]	Time 0.242 (0.193)	Data 0.000 (0.001)	Loss 0.2660 (0.2808)	Prec@1 90.625 (90.160)
Epoch: [106][360/391]	Time 0.245 (0.191)	Data 0.000 (0.001)	Loss 0.3327 (0.2813)	Prec@1 88.281 (90.082)
Test: [0/79]	Time 0.256 (0.256)	Loss 0.1895 (0.1895)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.156 (0.178)	Loss 0.2680 (0.2713)	Prec@1 91.406 (91.112)
 * Prec@1 91.230
Best Accuracy:91.48
current lr 1.00000e-02
Epoch: [107][0/391]	Time 0.321 (0.321)	Data 0.140 (0.140)	Loss 0.3204 (0.3204)	Prec@1 86.719 (86.719)
Epoch: [107][60/391]	Time 0.170 (0.186)	Data 0.000 (0.002)	Loss 0.2463 (0.2858)	Prec@1 92.969 (90.100)
Epoch: [107][120/391]	Time 0.167 (0.189)	Data 0.000 (0.001)	Loss 0.2937 (0.2816)	Prec@1 88.281 (90.173)
Epoch: [107][180/391]	Time 0.169 (0.191)	Data 0.000 (0.001)	Loss 0.2688 (0.2781)	Prec@1 89.844 (90.301)
Epoch: [107][240/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.2148 (0.2776)	Prec@1 95.312 (90.349)
Epoch: [107][300/391]	Time 0.246 (0.192)	Data 0.000 (0.001)	Loss 0.3127 (0.2807)	Prec@1 87.500 (90.142)
Epoch: [107][360/391]	Time 0.242 (0.191)	Data 0.000 (0.001)	Loss 0.2473 (0.2811)	Prec@1 94.531 (90.132)
Test: [0/79]	Time 0.247 (0.247)	Loss 0.1946 (0.1946)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.231 (0.195)	Loss 0.2400 (0.2681)	Prec@1 90.625 (91.176)
 * Prec@1 91.260
Best Accuracy:91.48
current lr 1.00000e-02
Epoch: [108][0/391]	Time 0.304 (0.304)	Data 0.124 (0.124)	Loss 0.3862 (0.3862)	Prec@1 87.500 (87.500)
Epoch: [108][60/391]	Time 0.169 (0.194)	Data 0.000 (0.002)	Loss 0.3005 (0.2753)	Prec@1 90.625 (90.433)
Epoch: [108][120/391]	Time 0.167 (0.190)	Data 0.000 (0.001)	Loss 0.2370 (0.2684)	Prec@1 91.406 (90.651)
Epoch: [108][180/391]	Time 0.244 (0.193)	Data 0.000 (0.001)	Loss 0.2988 (0.2648)	Prec@1 89.844 (90.746)
Epoch: [108][240/391]	Time 0.244 (0.192)	Data 0.000 (0.001)	Loss 0.2455 (0.2646)	Prec@1 91.406 (90.758)
Epoch: [108][300/391]	Time 0.247 (0.190)	Data 0.000 (0.001)	Loss 0.3914 (0.2677)	Prec@1 81.250 (90.638)
Epoch: [108][360/391]	Time 0.169 (0.191)	Data 0.000 (0.000)	Loss 0.3455 (0.2698)	Prec@1 87.500 (90.545)
Test: [0/79]	Time 0.256 (0.256)	Loss 0.1945 (0.1945)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.232 (0.177)	Loss 0.2165 (0.2689)	Prec@1 93.750 (91.253)
 * Prec@1 91.320
Best Accuracy:91.48
current lr 1.00000e-02
Epoch: [109][0/391]	Time 0.309 (0.309)	Data 0.128 (0.128)	Loss 0.3279 (0.3279)	Prec@1 87.500 (87.500)
Epoch: [109][60/391]	Time 0.171 (0.192)	Data 0.000 (0.002)	Loss 0.2863 (0.2823)	Prec@1 88.281 (90.151)
Epoch: [109][120/391]	Time 0.166 (0.192)	Data 0.000 (0.001)	Loss 0.2059 (0.2737)	Prec@1 91.406 (90.535)
Epoch: [109][180/391]	Time 0.197 (0.194)	Data 0.000 (0.001)	Loss 0.1796 (0.2746)	Prec@1 94.531 (90.288)
Epoch: [109][240/391]	Time 0.245 (0.193)	Data 0.000 (0.001)	Loss 0.2223 (0.2794)	Prec@1 91.406 (90.119)
Epoch: [109][300/391]	Time 0.242 (0.191)	Data 0.000 (0.001)	Loss 0.2578 (0.2794)	Prec@1 91.406 (90.140)
Epoch: [109][360/391]	Time 0.168 (0.191)	Data 0.000 (0.001)	Loss 0.2983 (0.2785)	Prec@1 92.188 (90.240)
Test: [0/79]	Time 0.263 (0.263)	Loss 0.1617 (0.1617)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.230 (0.175)	Loss 0.2467 (0.2671)	Prec@1 92.969 (91.432)
 * Prec@1 91.460
Best Accuracy:91.48
current lr 1.00000e-02
Epoch: [110][0/391]	Time 0.328 (0.328)	Data 0.151 (0.151)	Loss 0.2356 (0.2356)	Prec@1 92.188 (92.188)
Epoch: [110][60/391]	Time 0.242 (0.199)	Data 0.000 (0.003)	Loss 0.2295 (0.2475)	Prec@1 91.406 (91.265)
Epoch: [110][120/391]	Time 0.247 (0.192)	Data 0.000 (0.001)	Loss 0.2674 (0.2570)	Prec@1 92.188 (90.896)
Epoch: [110][180/391]	Time 0.248 (0.190)	Data 0.000 (0.001)	Loss 0.2703 (0.2636)	Prec@1 90.625 (90.698)
Epoch: [110][240/391]	Time 0.168 (0.192)	Data 0.000 (0.001)	Loss 0.2330 (0.2660)	Prec@1 93.750 (90.580)
Epoch: [110][300/391]	Time 0.168 (0.191)	Data 0.000 (0.001)	Loss 0.2733 (0.2685)	Prec@1 91.406 (90.542)
Epoch: [110][360/391]	Time 0.170 (0.193)	Data 0.000 (0.001)	Loss 0.3673 (0.2694)	Prec@1 87.500 (90.495)
Test: [0/79]	Time 0.333 (0.333)	Loss 0.2029 (0.2029)	Prec@1 92.188 (92.188)
Test: [60/79]	Time 0.156 (0.173)	Loss 0.2387 (0.2674)	Prec@1 90.625 (91.304)
 * Prec@1 91.420
Best Accuracy:91.48
current lr 1.00000e-02
Epoch: [111][0/391]	Time 0.350 (0.350)	Data 0.100 (0.100)	Loss 0.3277 (0.3277)	Prec@1 86.719 (86.719)
Epoch: [111][60/391]	Time 0.225 (0.186)	Data 0.000 (0.002)	Loss 0.2813 (0.2842)	Prec@1 88.281 (90.215)
Epoch: [111][120/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.3570 (0.2795)	Prec@1 86.719 (90.186)
Epoch: [111][180/391]	Time 0.166 (0.191)	Data 0.000 (0.001)	Loss 0.3092 (0.2775)	Prec@1 85.938 (90.185)
Epoch: [111][240/391]	Time 0.166 (0.195)	Data 0.000 (0.001)	Loss 0.2792 (0.2754)	Prec@1 89.844 (90.362)
Epoch: [111][300/391]	Time 0.166 (0.192)	Data 0.000 (0.000)	Loss 0.2692 (0.2743)	Prec@1 89.844 (90.381)
Epoch: [111][360/391]	Time 0.166 (0.190)	Data 0.000 (0.000)	Loss 0.2255 (0.2719)	Prec@1 90.625 (90.411)
Test: [0/79]	Time 0.326 (0.326)	Loss 0.1789 (0.1789)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.156 (0.185)	Loss 0.2103 (0.2678)	Prec@1 92.969 (91.470)
 * Prec@1 91.460
Best Accuracy:91.48
current lr 1.00000e-02
Epoch: [112][0/391]	Time 0.358 (0.358)	Data 0.106 (0.106)	Loss 0.2654 (0.2654)	Prec@1 88.281 (88.281)
Epoch: [112][60/391]	Time 0.260 (0.187)	Data 0.000 (0.002)	Loss 0.2766 (0.2763)	Prec@1 87.500 (90.074)
Epoch: [112][120/391]	Time 0.166 (0.188)	Data 0.000 (0.001)	Loss 0.2314 (0.2696)	Prec@1 90.625 (90.483)
Epoch: [112][180/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.2333 (0.2699)	Prec@1 89.062 (90.439)
Epoch: [112][240/391]	Time 0.166 (0.193)	Data 0.000 (0.001)	Loss 0.2202 (0.2672)	Prec@1 92.969 (90.528)
Epoch: [112][300/391]	Time 0.168 (0.191)	Data 0.000 (0.000)	Loss 0.2259 (0.2672)	Prec@1 92.969 (90.555)
Epoch: [112][360/391]	Time 0.166 (0.193)	Data 0.000 (0.000)	Loss 0.3020 (0.2677)	Prec@1 91.406 (90.562)
Test: [0/79]	Time 0.251 (0.251)	Loss 0.2002 (0.2002)	Prec@1 92.969 (92.969)
Test: [60/79]	Time 0.156 (0.181)	Loss 0.2605 (0.2738)	Prec@1 89.844 (91.342)
 * Prec@1 91.540
Best Accuracy:91.54
current lr 1.00000e-02
Epoch: [113][0/391]	Time 0.366 (0.366)	Data 0.112 (0.112)	Loss 0.2097 (0.2097)	Prec@1 92.969 (92.969)
Epoch: [113][60/391]	Time 0.168 (0.200)	Data 0.000 (0.002)	Loss 0.2582 (0.2713)	Prec@1 89.844 (90.599)
Epoch: [113][120/391]	Time 0.168 (0.200)	Data 0.000 (0.001)	Loss 0.2842 (0.2675)	Prec@1 91.406 (90.728)
Epoch: [113][180/391]	Time 0.170 (0.197)	Data 0.000 (0.001)	Loss 0.2737 (0.2635)	Prec@1 90.625 (90.854)
Epoch: [113][240/391]	Time 0.166 (0.196)	Data 0.000 (0.001)	Loss 0.1866 (0.2635)	Prec@1 91.406 (90.839)
Epoch: [113][300/391]	Time 0.166 (0.192)	Data 0.000 (0.000)	Loss 0.3799 (0.2641)	Prec@1 86.719 (90.820)
Epoch: [113][360/391]	Time 0.166 (0.190)	Data 0.000 (0.000)	Loss 0.1869 (0.2635)	Prec@1 92.188 (90.735)
Test: [0/79]	Time 0.342 (0.342)	Loss 0.1761 (0.1761)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.156 (0.198)	Loss 0.2379 (0.2698)	Prec@1 92.188 (91.432)
 * Prec@1 91.540
Best Accuracy:91.54
current lr 1.00000e-02
Epoch: [114][0/391]	Time 0.330 (0.330)	Data 0.155 (0.155)	Loss 0.3225 (0.3225)	Prec@1 89.062 (89.062)
Epoch: [114][60/391]	Time 0.167 (0.195)	Data 0.000 (0.003)	Loss 0.3081 (0.2792)	Prec@1 90.625 (90.177)
Epoch: [114][120/391]	Time 0.167 (0.199)	Data 0.000 (0.001)	Loss 0.1772 (0.2759)	Prec@1 92.188 (90.315)
Epoch: [114][180/391]	Time 0.167 (0.199)	Data 0.000 (0.001)	Loss 0.2986 (0.2714)	Prec@1 89.062 (90.470)
Epoch: [114][240/391]	Time 0.167 (0.195)	Data 0.000 (0.001)	Loss 0.1960 (0.2648)	Prec@1 94.531 (90.703)
Epoch: [114][300/391]	Time 0.168 (0.194)	Data 0.000 (0.001)	Loss 0.1801 (0.2645)	Prec@1 93.750 (90.672)
Epoch: [114][360/391]	Time 0.167 (0.192)	Data 0.000 (0.001)	Loss 0.2243 (0.2636)	Prec@1 92.969 (90.740)
Test: [0/79]	Time 0.262 (0.262)	Loss 0.1926 (0.1926)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.156 (0.188)	Loss 0.2321 (0.2603)	Prec@1 90.625 (91.739)
 * Prec@1 91.820
Best Accuracy:91.82
current lr 1.00000e-02
Epoch: [115][0/391]	Time 0.278 (0.278)	Data 0.098 (0.098)	Loss 0.2822 (0.2822)	Prec@1 92.188 (92.188)
Epoch: [115][60/391]	Time 0.167 (0.208)	Data 0.000 (0.002)	Loss 0.1908 (0.2525)	Prec@1 94.531 (91.099)
Epoch: [115][120/391]	Time 0.167 (0.204)	Data 0.000 (0.001)	Loss 0.2390 (0.2582)	Prec@1 89.844 (90.896)
Epoch: [115][180/391]	Time 0.167 (0.201)	Data 0.000 (0.001)	Loss 0.2815 (0.2575)	Prec@1 87.500 (90.988)
Epoch: [115][240/391]	Time 0.167 (0.196)	Data 0.000 (0.001)	Loss 0.2474 (0.2621)	Prec@1 91.406 (90.852)
Epoch: [115][300/391]	Time 0.243 (0.195)	Data 0.000 (0.001)	Loss 0.1796 (0.2622)	Prec@1 94.531 (90.833)
Epoch: [115][360/391]	Time 0.245 (0.193)	Data 0.000 (0.000)	Loss 0.2727 (0.2641)	Prec@1 90.625 (90.761)
Test: [0/79]	Time 0.233 (0.233)	Loss 0.1788 (0.1788)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.156 (0.187)	Loss 0.1969 (0.2597)	Prec@1 93.750 (91.637)
 * Prec@1 91.660
Best Accuracy:91.82
current lr 1.00000e-02
Epoch: [116][0/391]	Time 0.293 (0.293)	Data 0.114 (0.114)	Loss 0.3232 (0.3232)	Prec@1 89.062 (89.062)
Epoch: [116][60/391]	Time 0.167 (0.199)	Data 0.000 (0.002)	Loss 0.2869 (0.2598)	Prec@1 89.844 (90.996)
Epoch: [116][120/391]	Time 0.167 (0.192)	Data 0.000 (0.001)	Loss 0.2350 (0.2635)	Prec@1 92.969 (90.819)
Epoch: [116][180/391]	Time 0.174 (0.190)	Data 0.000 (0.001)	Loss 0.2516 (0.2612)	Prec@1 87.500 (90.914)
Epoch: [116][240/391]	Time 0.169 (0.187)	Data 0.000 (0.001)	Loss 0.2149 (0.2611)	Prec@1 91.406 (90.849)
Epoch: [116][300/391]	Time 0.169 (0.186)	Data 0.000 (0.001)	Loss 0.2722 (0.2614)	Prec@1 89.062 (90.812)
Epoch: [116][360/391]	Time 0.167 (0.189)	Data 0.000 (0.000)	Loss 0.2206 (0.2607)	Prec@1 90.625 (90.854)
Test: [0/79]	Time 0.247 (0.247)	Loss 0.1858 (0.1858)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.157 (0.204)	Loss 0.2382 (0.2626)	Prec@1 92.188 (91.611)
 * Prec@1 91.580
Best Accuracy:91.82
current lr 1.00000e-02
Epoch: [117][0/391]	Time 0.335 (0.335)	Data 0.160 (0.160)	Loss 0.1937 (0.1937)	Prec@1 95.312 (95.312)
Epoch: [117][60/391]	Time 0.167 (0.201)	Data 0.000 (0.003)	Loss 0.2164 (0.2565)	Prec@1 92.188 (90.779)
Epoch: [117][120/391]	Time 0.167 (0.200)	Data 0.000 (0.001)	Loss 0.2560 (0.2649)	Prec@1 92.188 (90.567)
Epoch: [117][180/391]	Time 0.167 (0.199)	Data 0.000 (0.001)	Loss 0.2261 (0.2618)	Prec@1 90.625 (90.767)
Epoch: [117][240/391]	Time 0.244 (0.197)	Data 0.000 (0.001)	Loss 0.1667 (0.2578)	Prec@1 95.312 (90.972)
Epoch: [117][300/391]	Time 0.243 (0.194)	Data 0.000 (0.001)	Loss 0.1624 (0.2584)	Prec@1 95.312 (90.936)
Epoch: [117][360/391]	Time 0.240 (0.193)	Data 0.000 (0.001)	Loss 0.2567 (0.2591)	Prec@1 89.844 (90.904)
Test: [0/79]	Time 0.236 (0.236)	Loss 0.2339 (0.2339)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.156 (0.182)	Loss 0.2007 (0.2665)	Prec@1 92.188 (91.598)
 * Prec@1 91.610
Best Accuracy:91.82
current lr 1.00000e-02
Epoch: [118][0/391]	Time 0.299 (0.299)	Data 0.121 (0.121)	Loss 0.2066 (0.2066)	Prec@1 94.531 (94.531)
Epoch: [118][60/391]	Time 0.168 (0.193)	Data 0.000 (0.002)	Loss 0.3337 (0.2592)	Prec@1 85.938 (90.984)
Epoch: [118][120/391]	Time 0.168 (0.198)	Data 0.000 (0.001)	Loss 0.2880 (0.2553)	Prec@1 87.500 (91.045)
Epoch: [118][180/391]	Time 0.241 (0.196)	Data 0.000 (0.001)	Loss 0.2837 (0.2544)	Prec@1 91.406 (91.078)
Epoch: [118][240/391]	Time 0.243 (0.193)	Data 0.000 (0.001)	Loss 0.2489 (0.2557)	Prec@1 89.062 (91.020)
Epoch: [118][300/391]	Time 0.240 (0.190)	Data 0.000 (0.001)	Loss 0.3648 (0.2547)	Prec@1 86.719 (91.069)
Epoch: [118][360/391]	Time 0.242 (0.189)	Data 0.000 (0.000)	Loss 0.2341 (0.2557)	Prec@1 92.188 (91.032)
Test: [0/79]	Time 0.255 (0.255)	Loss 0.1647 (0.1647)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.225 (0.187)	Loss 0.2255 (0.2648)	Prec@1 91.406 (91.522)
 * Prec@1 91.570
Best Accuracy:91.82
current lr 1.00000e-02
Epoch: [119][0/391]	Time 0.330 (0.330)	Data 0.155 (0.155)	Loss 0.2396 (0.2396)	Prec@1 92.188 (92.188)
Epoch: [119][60/391]	Time 0.167 (0.187)	Data 0.000 (0.003)	Loss 0.2550 (0.2525)	Prec@1 92.969 (91.112)
Epoch: [119][120/391]	Time 0.167 (0.191)	Data 0.000 (0.001)	Loss 0.2391 (0.2509)	Prec@1 92.188 (91.213)
Epoch: [119][180/391]	Time 0.170 (0.194)	Data 0.000 (0.001)	Loss 0.2533 (0.2530)	Prec@1 90.625 (91.117)
Epoch: [119][240/391]	Time 0.247 (0.193)	Data 0.000 (0.001)	Loss 0.2260 (0.2579)	Prec@1 93.750 (90.965)
Epoch: [119][300/391]	Time 0.247 (0.191)	Data 0.000 (0.001)	Loss 0.3416 (0.2579)	Prec@1 85.938 (90.957)
Epoch: [119][360/391]	Time 0.167 (0.190)	Data 0.000 (0.001)	Loss 0.1862 (0.2562)	Prec@1 91.406 (91.025)
Test: [0/79]	Time 0.265 (0.265)	Loss 0.1508 (0.1508)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.229 (0.186)	Loss 0.2269 (0.2690)	Prec@1 91.406 (91.560)
 * Prec@1 91.510
Best Accuracy:91.82
current lr 1.00000e-02
Epoch: [120][0/391]	Time 0.289 (0.289)	Data 0.111 (0.111)	Loss 0.2407 (0.2407)	Prec@1 92.188 (92.188)
Epoch: [120][60/391]	Time 0.166 (0.191)	Data 0.000 (0.002)	Loss 0.2816 (0.2558)	Prec@1 87.500 (91.099)
Epoch: [120][120/391]	Time 0.242 (0.194)	Data 0.000 (0.001)	Loss 0.2054 (0.2563)	Prec@1 92.188 (90.961)
Epoch: [120][180/391]	Time 0.244 (0.190)	Data 0.000 (0.001)	Loss 0.2373 (0.2512)	Prec@1 92.188 (91.195)
Epoch: [120][240/391]	Time 0.205 (0.189)	Data 0.000 (0.001)	Loss 0.1715 (0.2532)	Prec@1 92.969 (91.030)
Epoch: [120][300/391]	Time 0.167 (0.189)	Data 0.000 (0.001)	Loss 0.2119 (0.2526)	Prec@1 89.844 (91.061)
Epoch: [120][360/391]	Time 0.169 (0.189)	Data 0.000 (0.000)	Loss 0.2648 (0.2548)	Prec@1 90.625 (90.973)
Test: [0/79]	Time 0.248 (0.248)	Loss 0.1716 (0.1716)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.227 (0.179)	Loss 0.1897 (0.2666)	Prec@1 92.969 (91.547)
 * Prec@1 91.590
Best Accuracy:91.82
current lr 1.00000e-02
Epoch: [121][0/391]	Time 0.282 (0.282)	Data 0.105 (0.105)	Loss 0.1767 (0.1767)	Prec@1 94.531 (94.531)
Epoch: [121][60/391]	Time 0.167 (0.190)	Data 0.000 (0.002)	Loss 0.2233 (0.2647)	Prec@1 91.406 (90.612)
Epoch: [121][120/391]	Time 0.245 (0.189)	Data 0.000 (0.001)	Loss 0.2464 (0.2550)	Prec@1 93.750 (90.941)
Epoch: [121][180/391]	Time 0.240 (0.187)	Data 0.000 (0.001)	Loss 0.3320 (0.2547)	Prec@1 85.938 (90.992)
Epoch: [121][240/391]	Time 0.171 (0.186)	Data 0.000 (0.001)	Loss 0.2388 (0.2547)	Prec@1 92.188 (91.066)
Epoch: [121][300/391]	Time 0.238 (0.186)	Data 0.000 (0.000)	Loss 0.2658 (0.2560)	Prec@1 92.188 (91.051)
Epoch: [121][360/391]	Time 0.242 (0.185)	Data 0.000 (0.000)	Loss 0.1461 (0.2554)	Prec@1 95.312 (91.073)
Test: [0/79]	Time 0.259 (0.259)	Loss 0.1828 (0.1828)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.156 (0.173)	Loss 0.1786 (0.2580)	Prec@1 92.969 (91.983)
 * Prec@1 91.940
Best Accuracy:91.94
current lr 1.00000e-02
Epoch: [122][0/391]	Time 0.311 (0.311)	Data 0.136 (0.136)	Loss 0.3051 (0.3051)	Prec@1 88.281 (88.281)
Epoch: [122][60/391]	Time 0.169 (0.198)	Data 0.000 (0.002)	Loss 0.1814 (0.2560)	Prec@1 94.531 (91.048)
Epoch: [122][120/391]	Time 0.168 (0.198)	Data 0.000 (0.001)	Loss 0.2631 (0.2502)	Prec@1 89.062 (91.342)
Epoch: [122][180/391]	Time 0.168 (0.195)	Data 0.000 (0.001)	Loss 0.2865 (0.2484)	Prec@1 89.062 (91.294)
Epoch: [122][240/391]	Time 0.165 (0.194)	Data 0.000 (0.001)	Loss 0.3112 (0.2492)	Prec@1 90.625 (91.254)
Epoch: [122][300/391]	Time 0.166 (0.192)	Data 0.000 (0.001)	Loss 0.1885 (0.2490)	Prec@1 94.531 (91.251)
Epoch: [122][360/391]	Time 0.168 (0.192)	Data 0.000 (0.001)	Loss 0.2083 (0.2496)	Prec@1 92.188 (91.240)
Test: [0/79]	Time 0.259 (0.259)	Loss 0.2120 (0.2120)	Prec@1 92.188 (92.188)
Test: [60/79]	Time 0.156 (0.182)	Loss 0.2022 (0.2640)	Prec@1 92.969 (91.752)
 * Prec@1 91.770
Best Accuracy:91.94
current lr 1.00000e-02
Epoch: [123][0/391]	Time 0.279 (0.279)	Data 0.104 (0.104)	Loss 0.2439 (0.2439)	Prec@1 91.406 (91.406)
Epoch: [123][60/391]	Time 0.171 (0.188)	Data 0.000 (0.002)	Loss 0.3580 (0.2445)	Prec@1 87.500 (91.086)
Epoch: [123][120/391]	Time 0.171 (0.191)	Data 0.000 (0.001)	Loss 0.2945 (0.2376)	Prec@1 89.062 (91.264)
Epoch: [123][180/391]	Time 0.170 (0.188)	Data 0.000 (0.001)	Loss 0.1748 (0.2434)	Prec@1 93.750 (91.212)
Epoch: [123][240/391]	Time 0.168 (0.189)	Data 0.000 (0.001)	Loss 0.3135 (0.2452)	Prec@1 86.719 (91.225)
Epoch: [123][300/391]	Time 0.170 (0.189)	Data 0.000 (0.000)	Loss 0.1984 (0.2474)	Prec@1 92.969 (91.167)
Epoch: [123][360/391]	Time 0.166 (0.190)	Data 0.000 (0.000)	Loss 0.2290 (0.2490)	Prec@1 93.750 (91.131)
Test: [0/79]	Time 0.339 (0.339)	Loss 0.1960 (0.1960)	Prec@1 92.969 (92.969)
Test: [60/79]	Time 0.229 (0.171)	Loss 0.2104 (0.2610)	Prec@1 92.188 (91.778)
 * Prec@1 91.750
Best Accuracy:91.94
current lr 1.00000e-02
Epoch: [124][0/391]	Time 0.302 (0.302)	Data 0.120 (0.120)	Loss 0.2950 (0.2950)	Prec@1 91.406 (91.406)
Epoch: [124][60/391]	Time 0.168 (0.185)	Data 0.000 (0.002)	Loss 0.2400 (0.2548)	Prec@1 92.188 (90.753)
Epoch: [124][120/391]	Time 0.212 (0.193)	Data 0.000 (0.001)	Loss 0.3021 (0.2529)	Prec@1 89.844 (90.845)
Epoch: [124][180/391]	Time 0.240 (0.189)	Data 0.000 (0.001)	Loss 0.3125 (0.2531)	Prec@1 89.844 (90.988)
Epoch: [124][240/391]	Time 0.243 (0.188)	Data 0.000 (0.001)	Loss 0.3196 (0.2490)	Prec@1 90.625 (91.199)
Epoch: [124][300/391]	Time 0.245 (0.187)	Data 0.000 (0.001)	Loss 0.2564 (0.2491)	Prec@1 91.406 (91.269)
Epoch: [124][360/391]	Time 0.167 (0.190)	Data 0.000 (0.000)	Loss 0.1545 (0.2503)	Prec@1 93.750 (91.240)
Test: [0/79]	Time 0.315 (0.315)	Loss 0.1649 (0.1649)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.227 (0.170)	Loss 0.1765 (0.2542)	Prec@1 92.969 (92.085)
 * Prec@1 92.030
Best Accuracy:92.03
current lr 1.00000e-02
Epoch: [125][0/391]	Time 0.268 (0.268)	Data 0.096 (0.096)	Loss 0.2323 (0.2323)	Prec@1 93.750 (93.750)
Epoch: [125][60/391]	Time 0.165 (0.189)	Data 0.000 (0.002)	Loss 0.2518 (0.2458)	Prec@1 91.406 (91.393)
Epoch: [125][120/391]	Time 0.228 (0.188)	Data 0.000 (0.001)	Loss 0.2194 (0.2487)	Prec@1 92.188 (91.245)
Epoch: [125][180/391]	Time 0.239 (0.185)	Data 0.000 (0.001)	Loss 0.2236 (0.2499)	Prec@1 92.188 (91.143)
Epoch: [125][240/391]	Time 0.166 (0.184)	Data 0.000 (0.001)	Loss 0.2567 (0.2496)	Prec@1 90.625 (91.179)
Epoch: [125][300/391]	Time 0.170 (0.185)	Data 0.000 (0.000)	Loss 0.2821 (0.2528)	Prec@1 92.188 (91.048)
Epoch: [125][360/391]	Time 0.168 (0.187)	Data 0.000 (0.000)	Loss 0.1704 (0.2526)	Prec@1 93.750 (91.056)
Test: [0/79]	Time 0.257 (0.257)	Loss 0.1810 (0.1810)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.156 (0.174)	Loss 0.1817 (0.2525)	Prec@1 92.969 (92.213)
 * Prec@1 92.100
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [126][0/391]	Time 0.323 (0.323)	Data 0.148 (0.148)	Loss 0.3178 (0.3178)	Prec@1 89.062 (89.062)
Epoch: [126][60/391]	Time 0.169 (0.189)	Data 0.000 (0.003)	Loss 0.2281 (0.2494)	Prec@1 93.750 (91.342)
Epoch: [126][120/391]	Time 0.166 (0.191)	Data 0.000 (0.001)	Loss 0.3501 (0.2492)	Prec@1 85.156 (91.090)
Epoch: [126][180/391]	Time 0.167 (0.189)	Data 0.000 (0.001)	Loss 0.1804 (0.2485)	Prec@1 93.750 (91.195)
Epoch: [126][240/391]	Time 0.244 (0.192)	Data 0.000 (0.001)	Loss 0.1333 (0.2513)	Prec@1 96.875 (91.082)
Epoch: [126][300/391]	Time 0.239 (0.190)	Data 0.000 (0.001)	Loss 0.2728 (0.2500)	Prec@1 87.500 (91.149)
Epoch: [126][360/391]	Time 0.243 (0.189)	Data 0.000 (0.001)	Loss 0.2358 (0.2486)	Prec@1 89.844 (91.138)
Test: [0/79]	Time 0.264 (0.264)	Loss 0.1859 (0.1859)	Prec@1 92.188 (92.188)
Test: [60/79]	Time 0.156 (0.181)	Loss 0.2204 (0.2676)	Prec@1 91.406 (91.829)
 * Prec@1 91.800
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [127][0/391]	Time 0.349 (0.349)	Data 0.160 (0.160)	Loss 0.2521 (0.2521)	Prec@1 92.188 (92.188)
Epoch: [127][60/391]	Time 0.169 (0.195)	Data 0.000 (0.003)	Loss 0.3223 (0.2407)	Prec@1 89.062 (91.650)
Epoch: [127][120/391]	Time 0.166 (0.195)	Data 0.000 (0.001)	Loss 0.1727 (0.2411)	Prec@1 93.750 (91.581)
Epoch: [127][180/391]	Time 0.166 (0.196)	Data 0.000 (0.001)	Loss 0.2677 (0.2399)	Prec@1 89.062 (91.493)
Epoch: [127][240/391]	Time 0.239 (0.193)	Data 0.000 (0.001)	Loss 0.2629 (0.2417)	Prec@1 92.188 (91.422)
Epoch: [127][300/391]	Time 0.238 (0.191)	Data 0.000 (0.001)	Loss 0.2554 (0.2429)	Prec@1 89.062 (91.373)
Epoch: [127][360/391]	Time 0.166 (0.191)	Data 0.000 (0.001)	Loss 0.3675 (0.2444)	Prec@1 86.719 (91.391)
Test: [0/79]	Time 0.291 (0.291)	Loss 0.2052 (0.2052)	Prec@1 92.969 (92.969)
Test: [60/79]	Time 0.230 (0.168)	Loss 0.2443 (0.2603)	Prec@1 92.969 (91.778)
 * Prec@1 91.740
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [128][0/391]	Time 0.332 (0.332)	Data 0.153 (0.153)	Loss 0.1247 (0.1247)	Prec@1 96.094 (96.094)
Epoch: [128][60/391]	Time 0.168 (0.184)	Data 0.000 (0.003)	Loss 0.3165 (0.2411)	Prec@1 89.844 (91.547)
Epoch: [128][120/391]	Time 0.210 (0.186)	Data 0.000 (0.001)	Loss 0.2399 (0.2509)	Prec@1 92.969 (91.296)
Epoch: [128][180/391]	Time 0.243 (0.186)	Data 0.000 (0.001)	Loss 0.2548 (0.2475)	Prec@1 91.406 (91.432)
Epoch: [128][240/391]	Time 0.169 (0.186)	Data 0.000 (0.001)	Loss 0.2875 (0.2481)	Prec@1 87.500 (91.387)
Epoch: [128][300/391]	Time 0.171 (0.188)	Data 0.000 (0.001)	Loss 0.1998 (0.2501)	Prec@1 93.750 (91.248)
Epoch: [128][360/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.2709 (0.2500)	Prec@1 90.625 (91.227)
Test: [0/79]	Time 0.331 (0.331)	Loss 0.1886 (0.1886)	Prec@1 92.969 (92.969)
Test: [60/79]	Time 0.156 (0.176)	Loss 0.1806 (0.2622)	Prec@1 92.969 (91.726)
 * Prec@1 91.730
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [129][0/391]	Time 0.328 (0.328)	Data 0.149 (0.149)	Loss 0.2143 (0.2143)	Prec@1 92.188 (92.188)
Epoch: [129][60/391]	Time 0.166 (0.183)	Data 0.000 (0.003)	Loss 0.2013 (0.2498)	Prec@1 90.625 (91.278)
Epoch: [129][120/391]	Time 0.166 (0.183)	Data 0.000 (0.001)	Loss 0.2619 (0.2471)	Prec@1 92.188 (91.458)
Epoch: [129][180/391]	Time 0.238 (0.183)	Data 0.000 (0.001)	Loss 0.2672 (0.2432)	Prec@1 91.406 (91.462)
Epoch: [129][240/391]	Time 0.241 (0.182)	Data 0.000 (0.001)	Loss 0.2454 (0.2450)	Prec@1 92.969 (91.351)
Epoch: [129][300/391]	Time 0.166 (0.182)	Data 0.000 (0.001)	Loss 0.1937 (0.2454)	Prec@1 94.531 (91.318)
Epoch: [129][360/391]	Time 0.166 (0.184)	Data 0.000 (0.001)	Loss 0.2035 (0.2431)	Prec@1 92.969 (91.395)
Test: [0/79]	Time 0.340 (0.340)	Loss 0.1775 (0.1775)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.229 (0.169)	Loss 0.1734 (0.2604)	Prec@1 92.969 (91.842)
 * Prec@1 91.810
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [130][0/391]	Time 0.318 (0.318)	Data 0.138 (0.138)	Loss 0.2608 (0.2608)	Prec@1 92.188 (92.188)
Epoch: [130][60/391]	Time 0.165 (0.194)	Data 0.000 (0.002)	Loss 0.2735 (0.2543)	Prec@1 87.500 (90.984)
Epoch: [130][120/391]	Time 0.237 (0.189)	Data 0.000 (0.001)	Loss 0.1990 (0.2469)	Prec@1 93.750 (91.426)
Epoch: [130][180/391]	Time 0.241 (0.186)	Data 0.000 (0.001)	Loss 0.2218 (0.2452)	Prec@1 91.406 (91.415)
Epoch: [130][240/391]	Time 0.238 (0.184)	Data 0.000 (0.001)	Loss 0.1617 (0.2418)	Prec@1 95.312 (91.504)
Epoch: [130][300/391]	Time 0.166 (0.186)	Data 0.000 (0.001)	Loss 0.1927 (0.2415)	Prec@1 92.969 (91.484)
Epoch: [130][360/391]	Time 0.165 (0.186)	Data 0.000 (0.000)	Loss 0.2159 (0.2421)	Prec@1 92.188 (91.473)
Test: [0/79]	Time 0.348 (0.348)	Loss 0.1676 (0.1676)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.157 (0.173)	Loss 0.2534 (0.2651)	Prec@1 91.406 (91.867)
 * Prec@1 91.790
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [131][0/391]	Time 0.367 (0.367)	Data 0.112 (0.112)	Loss 0.2487 (0.2487)	Prec@1 92.188 (92.188)
Epoch: [131][60/391]	Time 0.241 (0.184)	Data 0.000 (0.002)	Loss 0.1503 (0.2425)	Prec@1 94.531 (91.534)
Epoch: [131][120/391]	Time 0.169 (0.185)	Data 0.000 (0.001)	Loss 0.2331 (0.2437)	Prec@1 89.844 (91.400)
Epoch: [131][180/391]	Time 0.172 (0.187)	Data 0.000 (0.001)	Loss 0.2054 (0.2404)	Prec@1 90.625 (91.415)
Epoch: [131][240/391]	Time 0.168 (0.187)	Data 0.000 (0.001)	Loss 0.2745 (0.2400)	Prec@1 87.500 (91.461)
Epoch: [131][300/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.1958 (0.2403)	Prec@1 92.188 (91.456)
Epoch: [131][360/391]	Time 0.167 (0.187)	Data 0.000 (0.000)	Loss 0.2789 (0.2428)	Prec@1 87.500 (91.374)
Test: [0/79]	Time 0.319 (0.319)	Loss 0.1927 (0.1927)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.229 (0.168)	Loss 0.1820 (0.2552)	Prec@1 92.969 (92.149)
 * Prec@1 91.960
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [132][0/391]	Time 0.304 (0.304)	Data 0.124 (0.124)	Loss 0.2822 (0.2822)	Prec@1 87.500 (87.500)
Epoch: [132][60/391]	Time 0.240 (0.192)	Data 0.000 (0.002)	Loss 0.2734 (0.2285)	Prec@1 91.406 (91.931)
Epoch: [132][120/391]	Time 0.242 (0.187)	Data 0.000 (0.001)	Loss 0.2774 (0.2369)	Prec@1 90.625 (91.529)
Epoch: [132][180/391]	Time 0.167 (0.190)	Data 0.000 (0.001)	Loss 0.2559 (0.2414)	Prec@1 91.406 (91.380)
Epoch: [132][240/391]	Time 0.167 (0.189)	Data 0.000 (0.001)	Loss 0.2340 (0.2425)	Prec@1 92.969 (91.413)
Epoch: [132][300/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.2846 (0.2464)	Prec@1 91.406 (91.287)
Epoch: [132][360/391]	Time 0.166 (0.190)	Data 0.000 (0.000)	Loss 0.3157 (0.2464)	Prec@1 90.625 (91.281)
Test: [0/79]	Time 0.272 (0.272)	Loss 0.1162 (0.1162)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.156 (0.177)	Loss 0.2672 (0.2700)	Prec@1 91.406 (91.752)
 * Prec@1 91.700
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [133][0/391]	Time 0.375 (0.375)	Data 0.132 (0.132)	Loss 0.3064 (0.3064)	Prec@1 88.281 (88.281)
Epoch: [133][60/391]	Time 0.241 (0.184)	Data 0.000 (0.002)	Loss 0.2720 (0.2421)	Prec@1 89.844 (91.534)
Epoch: [133][120/391]	Time 0.243 (0.183)	Data 0.000 (0.001)	Loss 0.2405 (0.2417)	Prec@1 92.188 (91.419)
Epoch: [133][180/391]	Time 0.239 (0.182)	Data 0.000 (0.001)	Loss 0.1877 (0.2436)	Prec@1 93.750 (91.415)
Epoch: [133][240/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.3038 (0.2428)	Prec@1 92.969 (91.458)
Epoch: [133][300/391]	Time 0.167 (0.187)	Data 0.000 (0.001)	Loss 0.1909 (0.2411)	Prec@1 95.312 (91.554)
Epoch: [133][360/391]	Time 0.167 (0.190)	Data 0.000 (0.001)	Loss 0.2850 (0.2428)	Prec@1 89.844 (91.499)
Test: [0/79]	Time 0.278 (0.278)	Loss 0.1503 (0.1503)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.156 (0.189)	Loss 0.2260 (0.2626)	Prec@1 90.625 (91.778)
 * Prec@1 91.830
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [134][0/391]	Time 0.325 (0.325)	Data 0.139 (0.139)	Loss 0.2323 (0.2323)	Prec@1 91.406 (91.406)
Epoch: [134][60/391]	Time 0.167 (0.201)	Data 0.000 (0.002)	Loss 0.1863 (0.2410)	Prec@1 93.750 (91.355)
Epoch: [134][120/391]	Time 0.168 (0.200)	Data 0.000 (0.001)	Loss 0.2727 (0.2400)	Prec@1 91.406 (91.368)
Epoch: [134][180/391]	Time 0.168 (0.198)	Data 0.000 (0.001)	Loss 0.2622 (0.2417)	Prec@1 92.188 (91.354)
Epoch: [134][240/391]	Time 0.172 (0.196)	Data 0.000 (0.001)	Loss 0.2393 (0.2447)	Prec@1 91.406 (91.280)
Epoch: [134][300/391]	Time 0.242 (0.194)	Data 0.000 (0.001)	Loss 0.2812 (0.2446)	Prec@1 90.625 (91.276)
Epoch: [134][360/391]	Time 0.168 (0.192)	Data 0.000 (0.001)	Loss 0.2122 (0.2443)	Prec@1 95.312 (91.350)
Test: [0/79]	Time 0.245 (0.245)	Loss 0.1721 (0.1721)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.218 (0.178)	Loss 0.2420 (0.2524)	Prec@1 89.844 (92.021)
 * Prec@1 92.050
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [135][0/391]	Time 0.269 (0.269)	Data 0.097 (0.097)	Loss 0.1914 (0.1914)	Prec@1 92.969 (92.969)
Epoch: [135][60/391]	Time 0.166 (0.200)	Data 0.000 (0.002)	Loss 0.2749 (0.2413)	Prec@1 90.625 (91.470)
Epoch: [135][120/391]	Time 0.243 (0.196)	Data 0.000 (0.001)	Loss 0.3059 (0.2370)	Prec@1 88.281 (91.626)
Epoch: [135][180/391]	Time 0.241 (0.193)	Data 0.000 (0.001)	Loss 0.3572 (0.2375)	Prec@1 89.062 (91.661)
Epoch: [135][240/391]	Time 0.244 (0.190)	Data 0.000 (0.001)	Loss 0.1683 (0.2375)	Prec@1 94.531 (91.708)
Epoch: [135][300/391]	Time 0.166 (0.190)	Data 0.000 (0.000)	Loss 0.3319 (0.2384)	Prec@1 86.719 (91.642)
Epoch: [135][360/391]	Time 0.166 (0.189)	Data 0.000 (0.000)	Loss 0.1934 (0.2368)	Prec@1 92.969 (91.677)
Test: [0/79]	Time 0.266 (0.266)	Loss 0.1181 (0.1181)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.229 (0.171)	Loss 0.1869 (0.2571)	Prec@1 91.406 (92.021)
 * Prec@1 91.960
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [136][0/391]	Time 0.309 (0.309)	Data 0.133 (0.133)	Loss 0.2407 (0.2407)	Prec@1 93.750 (93.750)
Epoch: [136][60/391]	Time 0.166 (0.188)	Data 0.000 (0.002)	Loss 0.1871 (0.2428)	Prec@1 94.531 (91.163)
Epoch: [136][120/391]	Time 0.170 (0.187)	Data 0.000 (0.001)	Loss 0.2981 (0.2368)	Prec@1 89.062 (91.439)
Epoch: [136][180/391]	Time 0.244 (0.187)	Data 0.000 (0.001)	Loss 0.3672 (0.2390)	Prec@1 88.281 (91.363)
Epoch: [136][240/391]	Time 0.241 (0.186)	Data 0.000 (0.001)	Loss 0.2346 (0.2401)	Prec@1 91.406 (91.390)
Epoch: [136][300/391]	Time 0.240 (0.185)	Data 0.000 (0.001)	Loss 0.2665 (0.2400)	Prec@1 92.188 (91.448)
Epoch: [136][360/391]	Time 0.166 (0.184)	Data 0.000 (0.000)	Loss 0.1924 (0.2402)	Prec@1 92.188 (91.454)
Test: [0/79]	Time 0.269 (0.269)	Loss 0.1775 (0.1775)	Prec@1 91.406 (91.406)
Test: [60/79]	Time 0.229 (0.178)	Loss 0.2079 (0.2602)	Prec@1 92.969 (91.855)
 * Prec@1 91.850
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [137][0/391]	Time 0.314 (0.314)	Data 0.136 (0.136)	Loss 0.2600 (0.2600)	Prec@1 90.625 (90.625)
Epoch: [137][60/391]	Time 0.166 (0.198)	Data 0.000 (0.002)	Loss 0.1850 (0.2459)	Prec@1 94.531 (91.355)
Epoch: [137][120/391]	Time 0.241 (0.192)	Data 0.000 (0.001)	Loss 0.2132 (0.2384)	Prec@1 90.625 (91.529)
Epoch: [137][180/391]	Time 0.243 (0.189)	Data 0.000 (0.001)	Loss 0.2833 (0.2395)	Prec@1 89.062 (91.506)
Epoch: [137][240/391]	Time 0.241 (0.187)	Data 0.000 (0.001)	Loss 0.1454 (0.2385)	Prec@1 95.312 (91.588)
Epoch: [137][300/391]	Time 0.168 (0.187)	Data 0.000 (0.001)	Loss 0.2824 (0.2409)	Prec@1 87.500 (91.507)
Epoch: [137][360/391]	Time 0.167 (0.187)	Data 0.000 (0.001)	Loss 0.2140 (0.2423)	Prec@1 91.406 (91.434)
Test: [0/79]	Time 0.256 (0.256)	Loss 0.1763 (0.1763)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.156 (0.172)	Loss 0.2241 (0.2685)	Prec@1 92.188 (91.803)
 * Prec@1 91.730
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [138][0/391]	Time 0.285 (0.285)	Data 0.112 (0.112)	Loss 0.3857 (0.3857)	Prec@1 87.500 (87.500)
Epoch: [138][60/391]	Time 0.167 (0.178)	Data 0.000 (0.002)	Loss 0.1911 (0.2400)	Prec@1 94.531 (91.547)
Epoch: [138][120/391]	Time 0.167 (0.184)	Data 0.000 (0.001)	Loss 0.2737 (0.2375)	Prec@1 89.844 (91.542)
Epoch: [138][180/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.2290 (0.2371)	Prec@1 92.969 (91.497)
Epoch: [138][240/391]	Time 0.166 (0.191)	Data 0.000 (0.001)	Loss 0.2318 (0.2383)	Prec@1 92.188 (91.481)
Epoch: [138][300/391]	Time 0.241 (0.189)	Data 0.000 (0.001)	Loss 0.2158 (0.2372)	Prec@1 92.188 (91.520)
Epoch: [138][360/391]	Time 0.166 (0.189)	Data 0.000 (0.000)	Loss 0.2221 (0.2366)	Prec@1 92.188 (91.553)
Test: [0/79]	Time 0.252 (0.252)	Loss 0.1516 (0.1516)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.156 (0.181)	Loss 0.2449 (0.2561)	Prec@1 90.625 (92.188)
 * Prec@1 92.070
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [139][0/391]	Time 0.315 (0.315)	Data 0.136 (0.136)	Loss 0.3586 (0.3586)	Prec@1 85.938 (85.938)
Epoch: [139][60/391]	Time 0.169 (0.182)	Data 0.000 (0.002)	Loss 0.3107 (0.2381)	Prec@1 92.188 (91.534)
Epoch: [139][120/391]	Time 0.170 (0.194)	Data 0.000 (0.001)	Loss 0.2258 (0.2358)	Prec@1 91.406 (91.677)
Epoch: [139][180/391]	Time 0.246 (0.193)	Data 0.000 (0.001)	Loss 0.2359 (0.2372)	Prec@1 88.281 (91.501)
Epoch: [139][240/391]	Time 0.168 (0.190)	Data 0.000 (0.001)	Loss 0.3141 (0.2375)	Prec@1 89.062 (91.546)
Epoch: [139][300/391]	Time 0.243 (0.190)	Data 0.000 (0.001)	Loss 0.2212 (0.2394)	Prec@1 92.188 (91.539)
Epoch: [139][360/391]	Time 0.248 (0.189)	Data 0.000 (0.001)	Loss 0.1971 (0.2395)	Prec@1 93.750 (91.536)
Test: [0/79]	Time 0.249 (0.249)	Loss 0.1317 (0.1317)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.156 (0.180)	Loss 0.2167 (0.2670)	Prec@1 91.406 (91.675)
 * Prec@1 91.670
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [140][0/391]	Time 0.296 (0.296)	Data 0.118 (0.118)	Loss 0.2177 (0.2177)	Prec@1 91.406 (91.406)
Epoch: [140][60/391]	Time 0.168 (0.186)	Data 0.000 (0.002)	Loss 0.2058 (0.2499)	Prec@1 91.406 (91.355)
Epoch: [140][120/391]	Time 0.171 (0.186)	Data 0.000 (0.001)	Loss 0.2714 (0.2486)	Prec@1 91.406 (91.374)
Epoch: [140][180/391]	Time 0.171 (0.185)	Data 0.000 (0.001)	Loss 0.2641 (0.2438)	Prec@1 89.062 (91.518)
Epoch: [140][240/391]	Time 0.167 (0.187)	Data 0.000 (0.001)	Loss 0.2753 (0.2403)	Prec@1 90.625 (91.604)
Epoch: [140][300/391]	Time 0.166 (0.186)	Data 0.000 (0.001)	Loss 0.2482 (0.2414)	Prec@1 89.844 (91.531)
Epoch: [140][360/391]	Time 0.165 (0.189)	Data 0.000 (0.000)	Loss 0.3277 (0.2393)	Prec@1 90.625 (91.618)
Test: [0/79]	Time 0.275 (0.275)	Loss 0.1662 (0.1662)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.156 (0.175)	Loss 0.3103 (0.2658)	Prec@1 90.625 (91.688)
 * Prec@1 91.750
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [141][0/391]	Time 0.298 (0.298)	Data 0.122 (0.122)	Loss 0.2264 (0.2264)	Prec@1 92.188 (92.188)
Epoch: [141][60/391]	Time 0.168 (0.181)	Data 0.000 (0.002)	Loss 0.2275 (0.2369)	Prec@1 92.969 (91.714)
Epoch: [141][120/391]	Time 0.238 (0.181)	Data 0.000 (0.001)	Loss 0.1416 (0.2399)	Prec@1 95.312 (91.677)
Epoch: [141][180/391]	Time 0.167 (0.182)	Data 0.000 (0.001)	Loss 0.3069 (0.2402)	Prec@1 87.500 (91.661)
Epoch: [141][240/391]	Time 0.168 (0.184)	Data 0.000 (0.001)	Loss 0.2546 (0.2416)	Prec@1 91.406 (91.578)
Epoch: [141][300/391]	Time 0.168 (0.191)	Data 0.000 (0.001)	Loss 0.2368 (0.2412)	Prec@1 90.625 (91.614)
Epoch: [141][360/391]	Time 0.166 (0.190)	Data 0.000 (0.000)	Loss 0.1473 (0.2391)	Prec@1 94.531 (91.649)
Test: [0/79]	Time 0.245 (0.245)	Loss 0.1593 (0.1593)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.156 (0.193)	Loss 0.2492 (0.2595)	Prec@1 92.188 (91.803)
 * Prec@1 91.820
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [142][0/391]	Time 0.324 (0.324)	Data 0.140 (0.140)	Loss 0.2542 (0.2542)	Prec@1 89.844 (89.844)
Epoch: [142][60/391]	Time 0.166 (0.188)	Data 0.000 (0.002)	Loss 0.3035 (0.2269)	Prec@1 89.062 (91.778)
Epoch: [142][120/391]	Time 0.166 (0.192)	Data 0.000 (0.001)	Loss 0.2336 (0.2307)	Prec@1 91.406 (91.794)
Epoch: [142][180/391]	Time 0.171 (0.189)	Data 0.000 (0.001)	Loss 0.1998 (0.2340)	Prec@1 94.531 (91.592)
Epoch: [142][240/391]	Time 0.169 (0.190)	Data 0.000 (0.001)	Loss 0.1859 (0.2345)	Prec@1 92.188 (91.533)
Epoch: [142][300/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.2213 (0.2333)	Prec@1 93.750 (91.593)
Epoch: [142][360/391]	Time 0.166 (0.188)	Data 0.000 (0.001)	Loss 0.2544 (0.2339)	Prec@1 89.062 (91.575)
Test: [0/79]	Time 0.318 (0.318)	Loss 0.1755 (0.1755)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.156 (0.170)	Loss 0.2184 (0.2705)	Prec@1 91.406 (91.855)
 * Prec@1 91.880
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [143][0/391]	Time 0.300 (0.300)	Data 0.116 (0.116)	Loss 0.1981 (0.1981)	Prec@1 95.312 (95.312)
Epoch: [143][60/391]	Time 0.232 (0.191)	Data 0.000 (0.002)	Loss 0.1849 (0.2305)	Prec@1 94.531 (92.072)
Epoch: [143][120/391]	Time 0.242 (0.187)	Data 0.000 (0.001)	Loss 0.0870 (0.2373)	Prec@1 96.875 (91.800)
Epoch: [143][180/391]	Time 0.169 (0.185)	Data 0.000 (0.001)	Loss 0.1582 (0.2338)	Prec@1 94.531 (91.842)
Epoch: [143][240/391]	Time 0.246 (0.185)	Data 0.000 (0.001)	Loss 0.2374 (0.2361)	Prec@1 90.625 (91.692)
Epoch: [143][300/391]	Time 0.243 (0.185)	Data 0.000 (0.001)	Loss 0.2551 (0.2362)	Prec@1 89.844 (91.725)
Epoch: [143][360/391]	Time 0.245 (0.184)	Data 0.000 (0.000)	Loss 0.2736 (0.2356)	Prec@1 92.188 (91.737)
Test: [0/79]	Time 0.247 (0.247)	Loss 0.1668 (0.1668)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.156 (0.170)	Loss 0.2576 (0.2610)	Prec@1 90.625 (92.047)
 * Prec@1 92.090
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [144][0/391]	Time 0.325 (0.325)	Data 0.143 (0.143)	Loss 0.1665 (0.1665)	Prec@1 92.969 (92.969)
Epoch: [144][60/391]	Time 0.172 (0.191)	Data 0.000 (0.003)	Loss 0.2585 (0.2275)	Prec@1 92.188 (91.752)
Epoch: [144][120/391]	Time 0.169 (0.189)	Data 0.000 (0.001)	Loss 0.2524 (0.2284)	Prec@1 92.969 (91.807)
Epoch: [144][180/391]	Time 0.172 (0.188)	Data 0.000 (0.001)	Loss 0.3088 (0.2300)	Prec@1 87.500 (91.777)
Epoch: [144][240/391]	Time 0.167 (0.190)	Data 0.000 (0.001)	Loss 0.2902 (0.2310)	Prec@1 90.625 (91.760)
Epoch: [144][300/391]	Time 0.165 (0.193)	Data 0.000 (0.001)	Loss 0.3073 (0.2323)	Prec@1 88.281 (91.715)
Epoch: [144][360/391]	Time 0.165 (0.191)	Data 0.000 (0.001)	Loss 0.2283 (0.2340)	Prec@1 92.188 (91.664)
Test: [0/79]	Time 0.249 (0.249)	Loss 0.1325 (0.1325)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.156 (0.178)	Loss 0.2798 (0.2602)	Prec@1 90.625 (91.880)
 * Prec@1 91.840
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [145][0/391]	Time 0.407 (0.407)	Data 0.155 (0.155)	Loss 0.2536 (0.2536)	Prec@1 92.188 (92.188)
Epoch: [145][60/391]	Time 0.240 (0.184)	Data 0.000 (0.003)	Loss 0.2418 (0.2284)	Prec@1 92.188 (92.418)
Epoch: [145][120/391]	Time 0.166 (0.186)	Data 0.000 (0.001)	Loss 0.1838 (0.2320)	Prec@1 92.188 (92.123)
Epoch: [145][180/391]	Time 0.168 (0.185)	Data 0.000 (0.001)	Loss 0.2253 (0.2338)	Prec@1 92.969 (91.976)
Epoch: [145][240/391]	Time 0.168 (0.189)	Data 0.000 (0.001)	Loss 0.2539 (0.2366)	Prec@1 90.625 (91.824)
Epoch: [145][300/391]	Time 0.168 (0.189)	Data 0.000 (0.001)	Loss 0.2184 (0.2380)	Prec@1 91.406 (91.744)
Epoch: [145][360/391]	Time 0.167 (0.191)	Data 0.000 (0.001)	Loss 0.2555 (0.2373)	Prec@1 92.188 (91.716)
Test: [0/79]	Time 0.266 (0.266)	Loss 0.1399 (0.1399)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.156 (0.173)	Loss 0.2348 (0.2625)	Prec@1 89.844 (91.803)
 * Prec@1 91.810
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [146][0/391]	Time 0.383 (0.383)	Data 0.136 (0.136)	Loss 0.1780 (0.1780)	Prec@1 95.312 (95.312)
Epoch: [146][60/391]	Time 0.217 (0.183)	Data 0.000 (0.002)	Loss 0.2065 (0.2347)	Prec@1 92.969 (91.752)
Epoch: [146][120/391]	Time 0.166 (0.191)	Data 0.000 (0.001)	Loss 0.2041 (0.2370)	Prec@1 92.188 (91.645)
Epoch: [146][180/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.1773 (0.2286)	Prec@1 92.188 (91.937)
Epoch: [146][240/391]	Time 0.166 (0.188)	Data 0.000 (0.001)	Loss 0.2220 (0.2339)	Prec@1 93.750 (91.737)
Epoch: [146][300/391]	Time 0.166 (0.191)	Data 0.000 (0.001)	Loss 0.1599 (0.2355)	Prec@1 95.312 (91.666)
Epoch: [146][360/391]	Time 0.188 (0.191)	Data 0.000 (0.001)	Loss 0.3913 (0.2367)	Prec@1 86.719 (91.657)
Test: [0/79]	Time 0.279 (0.279)	Loss 0.1523 (0.1523)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.156 (0.187)	Loss 0.2166 (0.2582)	Prec@1 92.188 (92.047)
 * Prec@1 92.000
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [147][0/391]	Time 0.314 (0.314)	Data 0.140 (0.140)	Loss 0.1896 (0.1896)	Prec@1 94.531 (94.531)
Epoch: [147][60/391]	Time 0.167 (0.183)	Data 0.000 (0.002)	Loss 0.2573 (0.2343)	Prec@1 90.625 (91.803)
Epoch: [147][120/391]	Time 0.169 (0.183)	Data 0.000 (0.001)	Loss 0.1437 (0.2355)	Prec@1 94.531 (91.748)
Epoch: [147][180/391]	Time 0.168 (0.185)	Data 0.000 (0.001)	Loss 0.2486 (0.2376)	Prec@1 89.844 (91.639)
Epoch: [147][240/391]	Time 0.167 (0.184)	Data 0.000 (0.001)	Loss 0.1393 (0.2347)	Prec@1 95.312 (91.675)
Epoch: [147][300/391]	Time 0.166 (0.185)	Data 0.000 (0.001)	Loss 0.2380 (0.2346)	Prec@1 92.969 (91.687)
Epoch: [147][360/391]	Time 0.170 (0.185)	Data 0.000 (0.001)	Loss 0.1741 (0.2333)	Prec@1 92.969 (91.750)
Test: [0/79]	Time 0.319 (0.319)	Loss 0.1408 (0.1408)	Prec@1 92.969 (92.969)
Test: [60/79]	Time 0.229 (0.168)	Loss 0.2132 (0.2587)	Prec@1 92.969 (91.970)
 * Prec@1 92.000
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [148][0/391]	Time 0.329 (0.329)	Data 0.151 (0.151)	Loss 0.1612 (0.1612)	Prec@1 94.531 (94.531)
Epoch: [148][60/391]	Time 0.167 (0.184)	Data 0.000 (0.003)	Loss 0.2058 (0.2293)	Prec@1 92.969 (92.085)
Epoch: [148][120/391]	Time 0.242 (0.185)	Data 0.000 (0.001)	Loss 0.2032 (0.2254)	Prec@1 92.188 (92.091)
Epoch: [148][180/391]	Time 0.243 (0.183)	Data 0.000 (0.001)	Loss 0.2841 (0.2306)	Prec@1 91.406 (91.950)
Epoch: [148][240/391]	Time 0.242 (0.183)	Data 0.000 (0.001)	Loss 0.2130 (0.2326)	Prec@1 94.531 (91.915)
Epoch: [148][300/391]	Time 0.167 (0.183)	Data 0.000 (0.001)	Loss 0.1953 (0.2297)	Prec@1 92.969 (92.016)
Epoch: [148][360/391]	Time 0.166 (0.185)	Data 0.000 (0.001)	Loss 0.1904 (0.2295)	Prec@1 93.750 (92.004)
Test: [0/79]	Time 0.274 (0.274)	Loss 0.1444 (0.1444)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.228 (0.169)	Loss 0.1996 (0.2665)	Prec@1 92.188 (91.970)
 * Prec@1 91.950
Best Accuracy:92.1
current lr 1.00000e-02
Epoch: [149][0/391]	Time 0.280 (0.280)	Data 0.101 (0.101)	Loss 0.1730 (0.1730)	Prec@1 94.531 (94.531)
Epoch: [149][60/391]	Time 0.242 (0.192)	Data 0.000 (0.002)	Loss 0.1642 (0.2426)	Prec@1 94.531 (91.637)
Epoch: [149][120/391]	Time 0.242 (0.187)	Data 0.000 (0.001)	Loss 0.2677 (0.2385)	Prec@1 90.625 (91.593)
Epoch: [149][180/391]	Time 0.168 (0.192)	Data 0.000 (0.001)	Loss 0.1941 (0.2341)	Prec@1 92.188 (91.687)
Epoch: [149][240/391]	Time 0.171 (0.194)	Data 0.000 (0.001)	Loss 0.2524 (0.2310)	Prec@1 91.406 (91.815)
Epoch: [149][300/391]	Time 0.172 (0.193)	Data 0.000 (0.000)	Loss 0.1785 (0.2328)	Prec@1 93.750 (91.772)
Epoch: [149][360/391]	Time 0.169 (0.193)	Data 0.000 (0.000)	Loss 0.2601 (0.2344)	Prec@1 89.844 (91.655)
Test: [0/79]	Time 0.233 (0.233)	Loss 0.1313 (0.1313)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.156 (0.167)	Loss 0.2016 (0.2566)	Prec@1 92.969 (92.200)
 * Prec@1 92.160
Best Accuracy:92.16
current lr 1.00000e-03
Epoch: [150][0/391]	Time 0.367 (0.367)	Data 0.120 (0.120)	Loss 0.2792 (0.2792)	Prec@1 91.406 (91.406)
Epoch: [150][60/391]	Time 0.169 (0.195)	Data 0.000 (0.002)	Loss 0.2232 (0.2217)	Prec@1 93.750 (92.226)
Epoch: [150][120/391]	Time 0.171 (0.189)	Data 0.000 (0.001)	Loss 0.2041 (0.2193)	Prec@1 90.625 (92.336)
Epoch: [150][180/391]	Time 0.171 (0.188)	Data 0.000 (0.001)	Loss 0.1326 (0.2177)	Prec@1 95.312 (92.321)
Epoch: [150][240/391]	Time 0.168 (0.188)	Data 0.000 (0.001)	Loss 0.2575 (0.2186)	Prec@1 89.844 (92.252)
Epoch: [150][300/391]	Time 0.169 (0.188)	Data 0.000 (0.001)	Loss 0.2292 (0.2191)	Prec@1 91.406 (92.250)
Epoch: [150][360/391]	Time 0.168 (0.189)	Data 0.000 (0.000)	Loss 0.2046 (0.2179)	Prec@1 89.844 (92.281)
Test: [0/79]	Time 0.299 (0.299)	Loss 0.1105 (0.1105)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.156 (0.190)	Loss 0.2121 (0.2435)	Prec@1 92.969 (92.520)
 * Prec@1 92.410
Best Accuracy:92.41
current lr 1.00000e-03
Epoch: [151][0/391]	Time 0.296 (0.296)	Data 0.123 (0.123)	Loss 0.2142 (0.2142)	Prec@1 96.094 (96.094)
Epoch: [151][60/391]	Time 0.167 (0.185)	Data 0.000 (0.002)	Loss 0.2814 (0.2067)	Prec@1 89.062 (92.892)
Epoch: [151][120/391]	Time 0.166 (0.191)	Data 0.000 (0.001)	Loss 0.2706 (0.2114)	Prec@1 88.281 (92.698)
Epoch: [151][180/391]	Time 0.166 (0.186)	Data 0.000 (0.001)	Loss 0.2885 (0.2120)	Prec@1 88.281 (92.559)
Epoch: [151][240/391]	Time 0.166 (0.186)	Data 0.000 (0.001)	Loss 0.2044 (0.2111)	Prec@1 92.969 (92.628)
Epoch: [151][300/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.2062 (0.2120)	Prec@1 93.750 (92.621)
Epoch: [151][360/391]	Time 0.166 (0.185)	Data 0.000 (0.001)	Loss 0.1903 (0.2123)	Prec@1 92.188 (92.603)
Test: [0/79]	Time 0.307 (0.307)	Loss 0.1118 (0.1118)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.155 (0.169)	Loss 0.2244 (0.2455)	Prec@1 92.188 (92.520)
 * Prec@1 92.460
Best Accuracy:92.46
current lr 1.00000e-03
Epoch: [152][0/391]	Time 0.411 (0.411)	Data 0.157 (0.157)	Loss 0.2019 (0.2019)	Prec@1 92.188 (92.188)
Epoch: [152][60/391]	Time 0.243 (0.183)	Data 0.000 (0.003)	Loss 0.1558 (0.2058)	Prec@1 93.750 (92.930)
Epoch: [152][120/391]	Time 0.236 (0.184)	Data 0.000 (0.001)	Loss 0.1884 (0.2100)	Prec@1 92.969 (92.607)
Epoch: [152][180/391]	Time 0.171 (0.186)	Data 0.000 (0.001)	Loss 0.1583 (0.2084)	Prec@1 96.094 (92.615)
Epoch: [152][240/391]	Time 0.168 (0.187)	Data 0.000 (0.001)	Loss 0.2007 (0.2087)	Prec@1 92.969 (92.648)
Epoch: [152][300/391]	Time 0.168 (0.190)	Data 0.000 (0.001)	Loss 0.1232 (0.2087)	Prec@1 94.531 (92.652)
Epoch: [152][360/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.2021 (0.2085)	Prec@1 92.188 (92.670)
Test: [0/79]	Time 0.260 (0.260)	Loss 0.0982 (0.0982)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.157 (0.188)	Loss 0.2153 (0.2441)	Prec@1 92.969 (92.431)
 * Prec@1 92.360
Best Accuracy:92.46
current lr 1.00000e-03
Epoch: [153][0/391]	Time 0.288 (0.288)	Data 0.115 (0.115)	Loss 0.2092 (0.2092)	Prec@1 94.531 (94.531)
Epoch: [153][60/391]	Time 0.167 (0.204)	Data 0.000 (0.002)	Loss 0.2419 (0.2177)	Prec@1 91.406 (92.725)
Epoch: [153][120/391]	Time 0.167 (0.197)	Data 0.000 (0.001)	Loss 0.2709 (0.2238)	Prec@1 88.281 (92.271)
Epoch: [153][180/391]	Time 0.167 (0.195)	Data 0.000 (0.001)	Loss 0.1366 (0.2206)	Prec@1 95.312 (92.261)
Epoch: [153][240/391]	Time 0.242 (0.194)	Data 0.000 (0.001)	Loss 0.1666 (0.2157)	Prec@1 95.312 (92.444)
Epoch: [153][300/391]	Time 0.242 (0.191)	Data 0.000 (0.001)	Loss 0.2867 (0.2138)	Prec@1 90.625 (92.483)
Epoch: [153][360/391]	Time 0.240 (0.189)	Data 0.000 (0.000)	Loss 0.2704 (0.2136)	Prec@1 90.625 (92.514)
Test: [0/79]	Time 0.235 (0.235)	Loss 0.1162 (0.1162)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.230 (0.187)	Loss 0.2266 (0.2439)	Prec@1 92.969 (92.482)
 * Prec@1 92.430
Best Accuracy:92.46
current lr 1.00000e-03
Epoch: [154][0/391]	Time 0.281 (0.281)	Data 0.109 (0.109)	Loss 0.1695 (0.1695)	Prec@1 92.188 (92.188)
Epoch: [154][60/391]	Time 0.166 (0.193)	Data 0.000 (0.002)	Loss 0.2380 (0.2100)	Prec@1 91.406 (92.367)
Epoch: [154][120/391]	Time 0.242 (0.188)	Data 0.000 (0.001)	Loss 0.1368 (0.2080)	Prec@1 94.531 (92.620)
Epoch: [154][180/391]	Time 0.243 (0.186)	Data 0.000 (0.001)	Loss 0.1790 (0.2066)	Prec@1 92.969 (92.805)
Epoch: [154][240/391]	Time 0.168 (0.188)	Data 0.000 (0.001)	Loss 0.1924 (0.2066)	Prec@1 92.969 (92.748)
Epoch: [154][300/391]	Time 0.166 (0.189)	Data 0.000 (0.000)	Loss 0.2045 (0.2066)	Prec@1 93.750 (92.740)
Epoch: [154][360/391]	Time 0.167 (0.188)	Data 0.000 (0.000)	Loss 0.1700 (0.2080)	Prec@1 93.750 (92.657)
Test: [0/79]	Time 0.312 (0.312)	Loss 0.1152 (0.1152)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.155 (0.170)	Loss 0.2101 (0.2416)	Prec@1 92.969 (92.725)
 * Prec@1 92.660
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [155][0/391]	Time 0.297 (0.297)	Data 0.110 (0.110)	Loss 0.1774 (0.1774)	Prec@1 93.750 (93.750)
Epoch: [155][60/391]	Time 0.243 (0.192)	Data 0.000 (0.002)	Loss 0.1592 (0.2073)	Prec@1 93.750 (92.533)
Epoch: [155][120/391]	Time 0.243 (0.186)	Data 0.000 (0.001)	Loss 0.1628 (0.2066)	Prec@1 95.312 (92.575)
Epoch: [155][180/391]	Time 0.240 (0.184)	Data 0.000 (0.001)	Loss 0.2515 (0.2045)	Prec@1 93.750 (92.649)
Epoch: [155][240/391]	Time 0.166 (0.186)	Data 0.000 (0.001)	Loss 0.2475 (0.2073)	Prec@1 90.625 (92.538)
Epoch: [155][300/391]	Time 0.166 (0.186)	Data 0.000 (0.001)	Loss 0.2744 (0.2070)	Prec@1 90.625 (92.553)
Epoch: [155][360/391]	Time 0.166 (0.185)	Data 0.000 (0.000)	Loss 0.2065 (0.2086)	Prec@1 92.188 (92.579)
Test: [0/79]	Time 0.340 (0.340)	Loss 0.1166 (0.1166)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.227 (0.169)	Loss 0.2231 (0.2439)	Prec@1 92.969 (92.392)
 * Prec@1 92.350
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [156][0/391]	Time 0.313 (0.313)	Data 0.137 (0.137)	Loss 0.1208 (0.1208)	Prec@1 96.094 (96.094)
Epoch: [156][60/391]	Time 0.242 (0.183)	Data 0.000 (0.002)	Loss 0.2750 (0.2053)	Prec@1 88.281 (92.623)
Epoch: [156][120/391]	Time 0.243 (0.182)	Data 0.000 (0.001)	Loss 0.2004 (0.2001)	Prec@1 92.188 (92.956)
Epoch: [156][180/391]	Time 0.241 (0.181)	Data 0.000 (0.001)	Loss 0.2813 (0.2075)	Prec@1 91.406 (92.610)
Epoch: [156][240/391]	Time 0.166 (0.183)	Data 0.000 (0.001)	Loss 0.2081 (0.2095)	Prec@1 93.750 (92.632)
Epoch: [156][300/391]	Time 0.167 (0.184)	Data 0.000 (0.001)	Loss 0.2081 (0.2072)	Prec@1 92.188 (92.678)
Epoch: [156][360/391]	Time 0.166 (0.187)	Data 0.000 (0.001)	Loss 0.1911 (0.2075)	Prec@1 92.188 (92.618)
Test: [0/79]	Time 0.272 (0.272)	Loss 0.1148 (0.1148)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.156 (0.180)	Loss 0.2059 (0.2420)	Prec@1 93.750 (92.610)
 * Prec@1 92.520
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [157][0/391]	Time 0.401 (0.401)	Data 0.147 (0.147)	Loss 0.2207 (0.2207)	Prec@1 91.406 (91.406)
Epoch: [157][60/391]	Time 0.241 (0.185)	Data 0.000 (0.003)	Loss 0.1220 (0.1971)	Prec@1 98.438 (93.110)
Epoch: [157][120/391]	Time 0.242 (0.183)	Data 0.000 (0.001)	Loss 0.2002 (0.2045)	Prec@1 90.625 (92.820)
Epoch: [157][180/391]	Time 0.171 (0.186)	Data 0.000 (0.001)	Loss 0.1808 (0.2071)	Prec@1 92.188 (92.727)
Epoch: [157][240/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.2269 (0.2073)	Prec@1 92.188 (92.609)
Epoch: [157][300/391]	Time 0.166 (0.188)	Data 0.000 (0.001)	Loss 0.1735 (0.2075)	Prec@1 93.750 (92.569)
Epoch: [157][360/391]	Time 0.166 (0.187)	Data 0.000 (0.001)	Loss 0.2425 (0.2072)	Prec@1 92.188 (92.579)
Test: [0/79]	Time 0.336 (0.336)	Loss 0.1141 (0.1141)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.155 (0.178)	Loss 0.2046 (0.2408)	Prec@1 92.188 (92.597)
 * Prec@1 92.490
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [158][0/391]	Time 0.416 (0.416)	Data 0.161 (0.161)	Loss 0.2086 (0.2086)	Prec@1 92.188 (92.188)
Epoch: [158][60/391]	Time 0.246 (0.186)	Data 0.000 (0.003)	Loss 0.1782 (0.2048)	Prec@1 93.750 (92.853)
Epoch: [158][120/391]	Time 0.171 (0.192)	Data 0.000 (0.002)	Loss 0.2570 (0.2037)	Prec@1 90.625 (92.840)
Epoch: [158][180/391]	Time 0.171 (0.193)	Data 0.000 (0.001)	Loss 0.2509 (0.2081)	Prec@1 90.625 (92.675)
Epoch: [158][240/391]	Time 0.171 (0.194)	Data 0.000 (0.001)	Loss 0.3260 (0.2076)	Prec@1 87.500 (92.667)
Epoch: [158][300/391]	Time 0.168 (0.195)	Data 0.000 (0.001)	Loss 0.2695 (0.2071)	Prec@1 88.281 (92.704)
Epoch: [158][360/391]	Time 0.233 (0.194)	Data 0.000 (0.001)	Loss 0.1083 (0.2058)	Prec@1 94.531 (92.713)
Test: [0/79]	Time 0.272 (0.272)	Loss 0.1144 (0.1144)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.231 (0.204)	Loss 0.2060 (0.2414)	Prec@1 93.750 (92.585)
 * Prec@1 92.560
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [159][0/391]	Time 0.396 (0.396)	Data 0.146 (0.146)	Loss 0.2242 (0.2242)	Prec@1 92.969 (92.969)
Epoch: [159][60/391]	Time 0.167 (0.202)	Data 0.000 (0.003)	Loss 0.1801 (0.1930)	Prec@1 92.969 (93.212)
Epoch: [159][120/391]	Time 0.167 (0.196)	Data 0.000 (0.001)	Loss 0.2267 (0.2000)	Prec@1 90.625 (93.040)
Epoch: [159][180/391]	Time 0.167 (0.194)	Data 0.000 (0.001)	Loss 0.3067 (0.2001)	Prec@1 90.625 (93.012)
Epoch: [159][240/391]	Time 0.169 (0.193)	Data 0.000 (0.001)	Loss 0.2362 (0.2038)	Prec@1 89.062 (92.823)
Epoch: [159][300/391]	Time 0.169 (0.192)	Data 0.000 (0.001)	Loss 0.1799 (0.2042)	Prec@1 92.969 (92.816)
Epoch: [159][360/391]	Time 0.168 (0.192)	Data 0.000 (0.001)	Loss 0.2597 (0.2041)	Prec@1 89.062 (92.837)
Test: [0/79]	Time 0.273 (0.273)	Loss 0.1224 (0.1224)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.156 (0.182)	Loss 0.2184 (0.2435)	Prec@1 92.969 (92.713)
 * Prec@1 92.580
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [160][0/391]	Time 0.328 (0.328)	Data 0.152 (0.152)	Loss 0.1996 (0.1996)	Prec@1 92.188 (92.188)
Epoch: [160][60/391]	Time 0.168 (0.200)	Data 0.000 (0.003)	Loss 0.1468 (0.1874)	Prec@1 92.969 (93.673)
Epoch: [160][120/391]	Time 0.165 (0.196)	Data 0.000 (0.001)	Loss 0.2842 (0.1900)	Prec@1 91.406 (93.459)
Epoch: [160][180/391]	Time 0.165 (0.194)	Data 0.000 (0.001)	Loss 0.1380 (0.1986)	Prec@1 93.750 (93.133)
Epoch: [160][240/391]	Time 0.240 (0.192)	Data 0.000 (0.001)	Loss 0.2129 (0.2020)	Prec@1 93.750 (92.962)
Epoch: [160][300/391]	Time 0.165 (0.191)	Data 0.000 (0.001)	Loss 0.1684 (0.2017)	Prec@1 94.531 (92.966)
Epoch: [160][360/391]	Time 0.165 (0.193)	Data 0.000 (0.001)	Loss 0.2652 (0.2026)	Prec@1 92.188 (92.923)
Test: [0/79]	Time 0.313 (0.313)	Loss 0.1084 (0.1084)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.156 (0.181)	Loss 0.2005 (0.2420)	Prec@1 93.750 (92.687)
 * Prec@1 92.570
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [161][0/391]	Time 0.394 (0.394)	Data 0.146 (0.146)	Loss 0.1627 (0.1627)	Prec@1 94.531 (94.531)
Epoch: [161][60/391]	Time 0.166 (0.196)	Data 0.000 (0.003)	Loss 0.2484 (0.2060)	Prec@1 93.750 (92.687)
Epoch: [161][120/391]	Time 0.166 (0.193)	Data 0.000 (0.001)	Loss 0.2846 (0.2073)	Prec@1 93.750 (92.646)
Epoch: [161][180/391]	Time 0.166 (0.199)	Data 0.000 (0.001)	Loss 0.2037 (0.2063)	Prec@1 92.969 (92.710)
Epoch: [161][240/391]	Time 0.243 (0.195)	Data 0.000 (0.001)	Loss 0.1468 (0.2022)	Prec@1 94.531 (92.839)
Epoch: [161][300/391]	Time 0.168 (0.193)	Data 0.000 (0.001)	Loss 0.1733 (0.2034)	Prec@1 93.750 (92.746)
Epoch: [161][360/391]	Time 0.171 (0.196)	Data 0.000 (0.001)	Loss 0.2409 (0.2028)	Prec@1 90.625 (92.819)
Test: [0/79]	Time 0.332 (0.332)	Loss 0.1127 (0.1127)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.156 (0.170)	Loss 0.2100 (0.2420)	Prec@1 93.750 (92.700)
 * Prec@1 92.560
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [162][0/391]	Time 0.342 (0.342)	Data 0.159 (0.159)	Loss 0.3024 (0.3024)	Prec@1 89.062 (89.062)
Epoch: [162][60/391]	Time 0.243 (0.190)	Data 0.000 (0.003)	Loss 0.3201 (0.1954)	Prec@1 92.188 (93.161)
Epoch: [162][120/391]	Time 0.246 (0.184)	Data 0.000 (0.001)	Loss 0.2600 (0.2010)	Prec@1 91.406 (92.995)
Epoch: [162][180/391]	Time 0.170 (0.190)	Data 0.000 (0.001)	Loss 0.2314 (0.1999)	Prec@1 92.969 (92.977)
Epoch: [162][240/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.1230 (0.2025)	Prec@1 96.094 (92.907)
Epoch: [162][300/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.2227 (0.2019)	Prec@1 89.062 (92.865)
Epoch: [162][360/391]	Time 0.165 (0.189)	Data 0.000 (0.001)	Loss 0.1766 (0.1998)	Prec@1 92.969 (92.915)
Test: [0/79]	Time 0.274 (0.274)	Loss 0.1107 (0.1107)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.156 (0.174)	Loss 0.2025 (0.2421)	Prec@1 92.969 (92.597)
 * Prec@1 92.500
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [163][0/391]	Time 0.327 (0.327)	Data 0.112 (0.112)	Loss 0.1532 (0.1532)	Prec@1 93.750 (93.750)
Epoch: [163][60/391]	Time 0.169 (0.201)	Data 0.000 (0.002)	Loss 0.2085 (0.2001)	Prec@1 93.750 (92.943)
Epoch: [163][120/391]	Time 0.166 (0.195)	Data 0.000 (0.001)	Loss 0.2069 (0.2044)	Prec@1 93.750 (92.827)
Epoch: [163][180/391]	Time 0.166 (0.194)	Data 0.000 (0.001)	Loss 0.1928 (0.2050)	Prec@1 93.750 (92.757)
Epoch: [163][240/391]	Time 0.166 (0.195)	Data 0.000 (0.001)	Loss 0.3483 (0.2076)	Prec@1 89.062 (92.641)
Epoch: [163][300/391]	Time 0.240 (0.193)	Data 0.000 (0.001)	Loss 0.1629 (0.2049)	Prec@1 93.750 (92.701)
Epoch: [163][360/391]	Time 0.169 (0.192)	Data 0.000 (0.000)	Loss 0.1820 (0.2037)	Prec@1 96.094 (92.802)
Test: [0/79]	Time 0.230 (0.230)	Loss 0.1118 (0.1118)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.156 (0.173)	Loss 0.2054 (0.2425)	Prec@1 93.750 (92.520)
 * Prec@1 92.470
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [164][0/391]	Time 0.304 (0.304)	Data 0.131 (0.131)	Loss 0.2266 (0.2266)	Prec@1 92.188 (92.188)
Epoch: [164][60/391]	Time 0.165 (0.203)	Data 0.000 (0.002)	Loss 0.2614 (0.1915)	Prec@1 87.500 (93.366)
Epoch: [164][120/391]	Time 0.237 (0.194)	Data 0.000 (0.001)	Loss 0.1988 (0.1870)	Prec@1 92.188 (93.524)
Epoch: [164][180/391]	Time 0.224 (0.188)	Data 0.000 (0.001)	Loss 0.1192 (0.1940)	Prec@1 96.875 (93.228)
Epoch: [164][240/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.2411 (0.1993)	Prec@1 93.750 (92.991)
Epoch: [164][300/391]	Time 0.165 (0.185)	Data 0.000 (0.001)	Loss 0.1851 (0.2013)	Prec@1 91.406 (92.922)
Epoch: [164][360/391]	Time 0.166 (0.185)	Data 0.000 (0.000)	Loss 0.2238 (0.2023)	Prec@1 92.188 (92.861)
Test: [0/79]	Time 0.256 (0.256)	Loss 0.1172 (0.1172)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.230 (0.171)	Loss 0.2091 (0.2443)	Prec@1 92.969 (92.559)
 * Prec@1 92.460
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [165][0/391]	Time 0.366 (0.366)	Data 0.114 (0.114)	Loss 0.2119 (0.2119)	Prec@1 95.312 (95.312)
Epoch: [165][60/391]	Time 0.167 (0.198)	Data 0.000 (0.002)	Loss 0.1245 (0.2126)	Prec@1 95.312 (92.328)
Epoch: [165][120/391]	Time 0.167 (0.197)	Data 0.000 (0.001)	Loss 0.1001 (0.2111)	Prec@1 96.875 (92.510)
Epoch: [165][180/391]	Time 0.174 (0.196)	Data 0.000 (0.001)	Loss 0.3102 (0.2077)	Prec@1 87.500 (92.628)
Epoch: [165][240/391]	Time 0.168 (0.193)	Data 0.000 (0.001)	Loss 0.1222 (0.2081)	Prec@1 95.312 (92.567)
Epoch: [165][300/391]	Time 0.235 (0.193)	Data 0.000 (0.001)	Loss 0.2777 (0.2076)	Prec@1 92.188 (92.603)
Epoch: [165][360/391]	Time 0.239 (0.191)	Data 0.000 (0.001)	Loss 0.1200 (0.2069)	Prec@1 96.094 (92.642)
Test: [0/79]	Time 0.249 (0.249)	Loss 0.1189 (0.1189)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.232 (0.176)	Loss 0.2115 (0.2434)	Prec@1 92.188 (92.597)
 * Prec@1 92.490
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [166][0/391]	Time 0.283 (0.283)	Data 0.106 (0.106)	Loss 0.1525 (0.1525)	Prec@1 95.312 (95.312)
Epoch: [166][60/391]	Time 0.238 (0.183)	Data 0.000 (0.002)	Loss 0.2149 (0.1966)	Prec@1 90.625 (93.315)
Epoch: [166][120/391]	Time 0.234 (0.180)	Data 0.000 (0.001)	Loss 0.1442 (0.1985)	Prec@1 93.750 (93.182)
Epoch: [166][180/391]	Time 0.168 (0.183)	Data 0.000 (0.001)	Loss 0.2466 (0.2059)	Prec@1 91.406 (92.891)
Epoch: [166][240/391]	Time 0.167 (0.188)	Data 0.000 (0.001)	Loss 0.1691 (0.2055)	Prec@1 94.531 (92.800)
Epoch: [166][300/391]	Time 0.169 (0.190)	Data 0.000 (0.001)	Loss 0.1307 (0.2057)	Prec@1 95.312 (92.810)
Epoch: [166][360/391]	Time 0.166 (0.190)	Data 0.000 (0.000)	Loss 0.1679 (0.2056)	Prec@1 92.188 (92.770)
Test: [0/79]	Time 0.274 (0.274)	Loss 0.1063 (0.1063)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.156 (0.180)	Loss 0.2022 (0.2452)	Prec@1 92.969 (92.533)
 * Prec@1 92.420
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [167][0/391]	Time 0.297 (0.297)	Data 0.114 (0.114)	Loss 0.3202 (0.3202)	Prec@1 86.719 (86.719)
Epoch: [167][60/391]	Time 0.169 (0.192)	Data 0.000 (0.002)	Loss 0.1925 (0.2134)	Prec@1 92.188 (92.341)
Epoch: [167][120/391]	Time 0.172 (0.197)	Data 0.000 (0.001)	Loss 0.1576 (0.2068)	Prec@1 92.969 (92.730)
Epoch: [167][180/391]	Time 0.168 (0.194)	Data 0.000 (0.001)	Loss 0.3695 (0.2091)	Prec@1 87.500 (92.554)
Epoch: [167][240/391]	Time 0.167 (0.191)	Data 0.000 (0.001)	Loss 0.2181 (0.2102)	Prec@1 90.625 (92.512)
Epoch: [167][300/391]	Time 0.167 (0.190)	Data 0.000 (0.001)	Loss 0.2072 (0.2086)	Prec@1 92.188 (92.592)
Epoch: [167][360/391]	Time 0.244 (0.189)	Data 0.000 (0.000)	Loss 0.1018 (0.2078)	Prec@1 96.875 (92.605)
Test: [0/79]	Time 0.257 (0.257)	Loss 0.1091 (0.1091)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.156 (0.184)	Loss 0.1952 (0.2404)	Prec@1 93.750 (92.713)
 * Prec@1 92.550
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [168][0/391]	Time 0.337 (0.337)	Data 0.156 (0.156)	Loss 0.2272 (0.2272)	Prec@1 91.406 (91.406)
Epoch: [168][60/391]	Time 0.169 (0.209)	Data 0.000 (0.003)	Loss 0.2506 (0.2122)	Prec@1 91.406 (92.585)
Epoch: [168][120/391]	Time 0.242 (0.199)	Data 0.000 (0.001)	Loss 0.1373 (0.2071)	Prec@1 95.312 (92.730)
Epoch: [168][180/391]	Time 0.245 (0.192)	Data 0.000 (0.001)	Loss 0.2035 (0.2056)	Prec@1 95.312 (92.740)
Epoch: [168][240/391]	Time 0.169 (0.191)	Data 0.000 (0.001)	Loss 0.2571 (0.2054)	Prec@1 89.844 (92.713)
Epoch: [168][300/391]	Time 0.166 (0.194)	Data 0.000 (0.001)	Loss 0.1126 (0.2033)	Prec@1 96.875 (92.777)
Epoch: [168][360/391]	Time 0.165 (0.193)	Data 0.000 (0.001)	Loss 0.1868 (0.2043)	Prec@1 93.750 (92.763)
Test: [0/79]	Time 0.272 (0.272)	Loss 0.1205 (0.1205)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.156 (0.187)	Loss 0.2018 (0.2420)	Prec@1 92.969 (92.585)
 * Prec@1 92.550
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [169][0/391]	Time 0.292 (0.292)	Data 0.120 (0.120)	Loss 0.1766 (0.1766)	Prec@1 92.188 (92.188)
Epoch: [169][60/391]	Time 0.166 (0.204)	Data 0.000 (0.002)	Loss 0.1045 (0.2096)	Prec@1 96.875 (92.508)
Epoch: [169][120/391]	Time 0.168 (0.196)	Data 0.000 (0.001)	Loss 0.1388 (0.2120)	Prec@1 93.750 (92.355)
Epoch: [169][180/391]	Time 0.168 (0.197)	Data 0.000 (0.001)	Loss 0.1195 (0.2062)	Prec@1 96.094 (92.559)
Epoch: [169][240/391]	Time 0.242 (0.195)	Data 0.000 (0.001)	Loss 0.0982 (0.2058)	Prec@1 97.656 (92.609)
Epoch: [169][300/391]	Time 0.244 (0.192)	Data 0.000 (0.001)	Loss 0.2273 (0.2055)	Prec@1 95.312 (92.717)
Epoch: [169][360/391]	Time 0.167 (0.192)	Data 0.000 (0.000)	Loss 0.2410 (0.2058)	Prec@1 90.625 (92.700)
Test: [0/79]	Time 0.337 (0.337)	Loss 0.1057 (0.1057)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.158 (0.178)	Loss 0.1920 (0.2409)	Prec@1 93.750 (92.738)
 * Prec@1 92.630
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [170][0/391]	Time 0.379 (0.379)	Data 0.133 (0.133)	Loss 0.2974 (0.2974)	Prec@1 90.625 (90.625)
Epoch: [170][60/391]	Time 0.241 (0.182)	Data 0.000 (0.002)	Loss 0.1476 (0.2134)	Prec@1 93.750 (92.661)
Epoch: [170][120/391]	Time 0.166 (0.183)	Data 0.000 (0.001)	Loss 0.2139 (0.2069)	Prec@1 89.062 (92.672)
Epoch: [170][180/391]	Time 0.170 (0.186)	Data 0.000 (0.001)	Loss 0.1614 (0.2041)	Prec@1 93.750 (92.831)
Epoch: [170][240/391]	Time 0.171 (0.188)	Data 0.000 (0.001)	Loss 0.1745 (0.2030)	Prec@1 94.531 (92.897)
Epoch: [170][300/391]	Time 0.168 (0.189)	Data 0.000 (0.001)	Loss 0.2348 (0.2042)	Prec@1 92.969 (92.839)
Epoch: [170][360/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.2140 (0.2039)	Prec@1 92.969 (92.830)
Test: [0/79]	Time 0.242 (0.242)	Loss 0.0992 (0.0992)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.155 (0.179)	Loss 0.2064 (0.2430)	Prec@1 92.969 (92.495)
 * Prec@1 92.440
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [171][0/391]	Time 0.287 (0.287)	Data 0.109 (0.109)	Loss 0.1879 (0.1879)	Prec@1 92.969 (92.969)
Epoch: [171][60/391]	Time 0.169 (0.192)	Data 0.000 (0.002)	Loss 0.1793 (0.2059)	Prec@1 90.625 (92.853)
Epoch: [171][120/391]	Time 0.167 (0.195)	Data 0.000 (0.001)	Loss 0.2120 (0.1962)	Prec@1 92.188 (93.156)
Epoch: [171][180/391]	Time 0.167 (0.194)	Data 0.000 (0.001)	Loss 0.2299 (0.1991)	Prec@1 91.406 (93.081)
Epoch: [171][240/391]	Time 0.221 (0.195)	Data 0.000 (0.001)	Loss 0.1386 (0.1990)	Prec@1 93.750 (93.017)
Epoch: [171][300/391]	Time 0.243 (0.192)	Data 0.000 (0.001)	Loss 0.1788 (0.2000)	Prec@1 91.406 (92.977)
Epoch: [171][360/391]	Time 0.212 (0.190)	Data 0.000 (0.000)	Loss 0.2581 (0.2007)	Prec@1 89.844 (92.908)
Test: [0/79]	Time 0.251 (0.251)	Loss 0.1080 (0.1080)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.155 (0.182)	Loss 0.2081 (0.2449)	Prec@1 92.969 (92.495)
 * Prec@1 92.420
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [172][0/391]	Time 0.330 (0.330)	Data 0.155 (0.155)	Loss 0.1771 (0.1771)	Prec@1 92.969 (92.969)
Epoch: [172][60/391]	Time 0.166 (0.181)	Data 0.000 (0.003)	Loss 0.1647 (0.2043)	Prec@1 92.188 (92.879)
Epoch: [172][120/391]	Time 0.165 (0.187)	Data 0.000 (0.001)	Loss 0.1938 (0.2057)	Prec@1 93.750 (92.672)
Epoch: [172][180/391]	Time 0.166 (0.184)	Data 0.000 (0.001)	Loss 0.1633 (0.2075)	Prec@1 92.969 (92.593)
Epoch: [172][240/391]	Time 0.166 (0.182)	Data 0.000 (0.001)	Loss 0.2351 (0.2053)	Prec@1 89.062 (92.651)
Epoch: [172][300/391]	Time 0.166 (0.182)	Data 0.000 (0.001)	Loss 0.2131 (0.2047)	Prec@1 92.969 (92.714)
Epoch: [172][360/391]	Time 0.240 (0.182)	Data 0.000 (0.001)	Loss 0.1229 (0.2050)	Prec@1 96.875 (92.726)
Test: [0/79]	Time 0.254 (0.254)	Loss 0.1204 (0.1204)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.155 (0.167)	Loss 0.2139 (0.2421)	Prec@1 92.969 (92.559)
 * Prec@1 92.510
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [173][0/391]	Time 0.333 (0.333)	Data 0.157 (0.157)	Loss 0.2194 (0.2194)	Prec@1 95.312 (95.312)
Epoch: [173][60/391]	Time 0.167 (0.185)	Data 0.000 (0.003)	Loss 0.2259 (0.2087)	Prec@1 92.969 (92.841)
Epoch: [173][120/391]	Time 0.168 (0.184)	Data 0.000 (0.001)	Loss 0.1890 (0.2094)	Prec@1 92.188 (92.782)
Epoch: [173][180/391]	Time 0.168 (0.183)	Data 0.000 (0.001)	Loss 0.1528 (0.2092)	Prec@1 92.969 (92.723)
Epoch: [173][240/391]	Time 0.168 (0.185)	Data 0.000 (0.001)	Loss 0.2703 (0.2064)	Prec@1 89.062 (92.771)
Epoch: [173][300/391]	Time 0.168 (0.183)	Data 0.000 (0.001)	Loss 0.1828 (0.2050)	Prec@1 92.969 (92.816)
Epoch: [173][360/391]	Time 0.168 (0.183)	Data 0.000 (0.001)	Loss 0.1909 (0.2053)	Prec@1 93.750 (92.770)
Test: [0/79]	Time 0.345 (0.345)	Loss 0.1140 (0.1140)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.226 (0.165)	Loss 0.2111 (0.2414)	Prec@1 93.750 (92.713)
 * Prec@1 92.650
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [174][0/391]	Time 0.298 (0.298)	Data 0.123 (0.123)	Loss 0.2027 (0.2027)	Prec@1 93.750 (93.750)
Epoch: [174][60/391]	Time 0.241 (0.186)	Data 0.000 (0.002)	Loss 0.1894 (0.1930)	Prec@1 90.625 (93.148)
Epoch: [174][120/391]	Time 0.243 (0.182)	Data 0.000 (0.001)	Loss 0.2144 (0.2025)	Prec@1 92.969 (92.936)
Epoch: [174][180/391]	Time 0.242 (0.181)	Data 0.000 (0.001)	Loss 0.1890 (0.2015)	Prec@1 92.969 (92.943)
Epoch: [174][240/391]	Time 0.244 (0.181)	Data 0.000 (0.001)	Loss 0.2908 (0.2031)	Prec@1 89.844 (92.813)
Epoch: [174][300/391]	Time 0.169 (0.182)	Data 0.000 (0.001)	Loss 0.1301 (0.2028)	Prec@1 94.531 (92.821)
Epoch: [174][360/391]	Time 0.166 (0.182)	Data 0.000 (0.001)	Loss 0.2027 (0.2040)	Prec@1 94.531 (92.787)
Test: [0/79]	Time 0.230 (0.230)	Loss 0.1127 (0.1127)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.229 (0.176)	Loss 0.2003 (0.2399)	Prec@1 93.750 (92.674)
 * Prec@1 92.560
Best Accuracy:92.66
current lr 1.00000e-03
Epoch: [175][0/391]	Time 0.286 (0.286)	Data 0.102 (0.102)	Loss 0.2513 (0.2513)	Prec@1 89.844 (89.844)
Epoch: [175][60/391]	Time 0.168 (0.180)	Data 0.000 (0.002)	Loss 0.1386 (0.2048)	Prec@1 93.750 (92.789)
Epoch: [175][120/391]	Time 0.169 (0.183)	Data 0.000 (0.001)	Loss 0.1754 (0.2008)	Prec@1 93.750 (92.872)
Epoch: [175][180/391]	Time 0.166 (0.184)	Data 0.000 (0.001)	Loss 0.1365 (0.2017)	Prec@1 94.531 (92.844)
Epoch: [175][240/391]	Time 0.240 (0.184)	Data 0.000 (0.001)	Loss 0.1584 (0.2028)	Prec@1 94.531 (92.907)
Epoch: [175][300/391]	Time 0.242 (0.183)	Data 0.000 (0.000)	Loss 0.1675 (0.2035)	Prec@1 94.531 (92.844)
Epoch: [175][360/391]	Time 0.166 (0.183)	Data 0.000 (0.000)	Loss 0.1683 (0.2037)	Prec@1 91.406 (92.798)
Test: [0/79]	Time 0.278 (0.278)	Loss 0.1091 (0.1091)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.233 (0.175)	Loss 0.2108 (0.2404)	Prec@1 93.750 (92.764)
 * Prec@1 92.690
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [176][0/391]	Time 0.302 (0.302)	Data 0.125 (0.125)	Loss 0.2706 (0.2706)	Prec@1 89.062 (89.062)
Epoch: [176][60/391]	Time 0.168 (0.189)	Data 0.000 (0.002)	Loss 0.2843 (0.2081)	Prec@1 89.062 (92.559)
Epoch: [176][120/391]	Time 0.241 (0.188)	Data 0.000 (0.001)	Loss 0.3188 (0.2100)	Prec@1 89.062 (92.723)
Epoch: [176][180/391]	Time 0.234 (0.184)	Data 0.000 (0.001)	Loss 0.2301 (0.2107)	Prec@1 92.188 (92.593)
Epoch: [176][240/391]	Time 0.242 (0.183)	Data 0.000 (0.001)	Loss 0.2151 (0.2079)	Prec@1 91.406 (92.709)
Epoch: [176][300/391]	Time 0.171 (0.184)	Data 0.000 (0.001)	Loss 0.2084 (0.2060)	Prec@1 92.188 (92.792)
Epoch: [176][360/391]	Time 0.167 (0.184)	Data 0.000 (0.001)	Loss 0.1742 (0.2055)	Prec@1 93.750 (92.826)
Test: [0/79]	Time 0.245 (0.245)	Loss 0.1080 (0.1080)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.156 (0.169)	Loss 0.2113 (0.2417)	Prec@1 92.969 (92.585)
 * Prec@1 92.490
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [177][0/391]	Time 0.335 (0.335)	Data 0.158 (0.158)	Loss 0.2857 (0.2857)	Prec@1 90.625 (90.625)
Epoch: [177][60/391]	Time 0.166 (0.196)	Data 0.000 (0.003)	Loss 0.1717 (0.2028)	Prec@1 92.969 (92.969)
Epoch: [177][120/391]	Time 0.232 (0.194)	Data 0.000 (0.001)	Loss 0.2591 (0.2038)	Prec@1 92.188 (92.891)
Epoch: [177][180/391]	Time 0.231 (0.188)	Data 0.000 (0.001)	Loss 0.2283 (0.2011)	Prec@1 91.406 (92.990)
Epoch: [177][240/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.2039 (0.2026)	Prec@1 94.531 (92.959)
Epoch: [177][300/391]	Time 0.169 (0.188)	Data 0.000 (0.001)	Loss 0.1733 (0.2021)	Prec@1 93.750 (92.953)
Epoch: [177][360/391]	Time 0.168 (0.188)	Data 0.000 (0.001)	Loss 0.2509 (0.2018)	Prec@1 92.188 (92.943)
Test: [0/79]	Time 0.340 (0.340)	Loss 0.1033 (0.1033)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.227 (0.165)	Loss 0.2026 (0.2429)	Prec@1 92.188 (92.623)
 * Prec@1 92.540
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [178][0/391]	Time 0.293 (0.293)	Data 0.117 (0.117)	Loss 0.2881 (0.2881)	Prec@1 90.625 (90.625)
Epoch: [178][60/391]	Time 0.166 (0.182)	Data 0.000 (0.002)	Loss 0.2220 (0.1981)	Prec@1 93.750 (92.918)
Epoch: [178][120/391]	Time 0.168 (0.181)	Data 0.000 (0.001)	Loss 0.1294 (0.2090)	Prec@1 92.969 (92.362)
Epoch: [178][180/391]	Time 0.207 (0.182)	Data 0.000 (0.001)	Loss 0.2232 (0.2058)	Prec@1 91.406 (92.528)
Epoch: [178][240/391]	Time 0.243 (0.182)	Data 0.000 (0.001)	Loss 0.1380 (0.2042)	Prec@1 95.312 (92.654)
Epoch: [178][300/391]	Time 0.242 (0.181)	Data 0.000 (0.001)	Loss 0.1504 (0.2028)	Prec@1 95.312 (92.699)
Epoch: [178][360/391]	Time 0.242 (0.181)	Data 0.000 (0.000)	Loss 0.1935 (0.2014)	Prec@1 92.969 (92.755)
Test: [0/79]	Time 0.246 (0.246)	Loss 0.1088 (0.1088)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.196 (0.179)	Loss 0.2127 (0.2425)	Prec@1 92.969 (92.687)
 * Prec@1 92.640
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [179][0/391]	Time 0.269 (0.269)	Data 0.097 (0.097)	Loss 0.2598 (0.2598)	Prec@1 89.062 (89.062)
Epoch: [179][60/391]	Time 0.168 (0.190)	Data 0.000 (0.002)	Loss 0.1582 (0.2090)	Prec@1 95.312 (92.482)
Epoch: [179][120/391]	Time 0.240 (0.192)	Data 0.000 (0.001)	Loss 0.1489 (0.2022)	Prec@1 94.531 (92.775)
Epoch: [179][180/391]	Time 0.246 (0.186)	Data 0.000 (0.001)	Loss 0.1869 (0.2002)	Prec@1 93.750 (92.995)
Epoch: [179][240/391]	Time 0.167 (0.184)	Data 0.000 (0.001)	Loss 0.1322 (0.1981)	Prec@1 94.531 (93.079)
Epoch: [179][300/391]	Time 0.166 (0.187)	Data 0.000 (0.000)	Loss 0.1786 (0.1989)	Prec@1 94.531 (93.130)
Epoch: [179][360/391]	Time 0.166 (0.189)	Data 0.000 (0.000)	Loss 0.1978 (0.2002)	Prec@1 92.188 (93.034)
Test: [0/79]	Time 0.270 (0.270)	Loss 0.1247 (0.1247)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.155 (0.180)	Loss 0.2093 (0.2406)	Prec@1 91.406 (92.610)
 * Prec@1 92.580
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [180][0/391]	Time 0.323 (0.323)	Data 0.142 (0.142)	Loss 0.1329 (0.1329)	Prec@1 94.531 (94.531)
Epoch: [180][60/391]	Time 0.167 (0.194)	Data 0.000 (0.002)	Loss 0.1742 (0.1976)	Prec@1 93.750 (92.930)
Epoch: [180][120/391]	Time 0.168 (0.191)	Data 0.000 (0.001)	Loss 0.1886 (0.2053)	Prec@1 92.969 (92.633)
Epoch: [180][180/391]	Time 0.168 (0.192)	Data 0.000 (0.001)	Loss 0.1975 (0.2028)	Prec@1 93.750 (92.762)
Epoch: [180][240/391]	Time 0.171 (0.194)	Data 0.000 (0.001)	Loss 0.2771 (0.2019)	Prec@1 89.062 (92.816)
Epoch: [180][300/391]	Time 0.167 (0.192)	Data 0.000 (0.001)	Loss 0.2493 (0.2008)	Prec@1 90.625 (92.844)
Epoch: [180][360/391]	Time 0.245 (0.190)	Data 0.000 (0.001)	Loss 0.2019 (0.2007)	Prec@1 93.750 (92.858)
Test: [0/79]	Time 0.249 (0.249)	Loss 0.1191 (0.1191)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.155 (0.182)	Loss 0.2096 (0.2424)	Prec@1 92.188 (92.649)
 * Prec@1 92.590
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [181][0/391]	Time 0.293 (0.293)	Data 0.116 (0.116)	Loss 0.1409 (0.1409)	Prec@1 96.875 (96.875)
Epoch: [181][60/391]	Time 0.166 (0.190)	Data 0.000 (0.002)	Loss 0.2003 (0.2101)	Prec@1 92.969 (92.841)
Epoch: [181][120/391]	Time 0.166 (0.192)	Data 0.000 (0.001)	Loss 0.3177 (0.2009)	Prec@1 89.062 (92.956)
Epoch: [181][180/391]	Time 0.242 (0.190)	Data 0.000 (0.001)	Loss 0.1929 (0.2015)	Prec@1 92.188 (92.874)
Epoch: [181][240/391]	Time 0.240 (0.187)	Data 0.000 (0.001)	Loss 0.2519 (0.2023)	Prec@1 90.625 (92.862)
Epoch: [181][300/391]	Time 0.167 (0.188)	Data 0.000 (0.001)	Loss 0.2479 (0.2029)	Prec@1 91.406 (92.821)
Epoch: [181][360/391]	Time 0.166 (0.189)	Data 0.000 (0.000)	Loss 0.2113 (0.2018)	Prec@1 92.188 (92.832)
Test: [0/79]	Time 0.322 (0.322)	Loss 0.1183 (0.1183)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.156 (0.177)	Loss 0.2130 (0.2435)	Prec@1 92.188 (92.533)
 * Prec@1 92.470
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [182][0/391]	Time 0.413 (0.413)	Data 0.162 (0.162)	Loss 0.3326 (0.3326)	Prec@1 88.281 (88.281)
Epoch: [182][60/391]	Time 0.167 (0.198)	Data 0.000 (0.003)	Loss 0.2045 (0.1964)	Prec@1 92.969 (93.340)
Epoch: [182][120/391]	Time 0.166 (0.194)	Data 0.000 (0.001)	Loss 0.2077 (0.1988)	Prec@1 89.844 (93.066)
Epoch: [182][180/391]	Time 0.166 (0.194)	Data 0.000 (0.001)	Loss 0.2655 (0.2002)	Prec@1 89.844 (92.982)
Epoch: [182][240/391]	Time 0.167 (0.193)	Data 0.000 (0.001)	Loss 0.2181 (0.2016)	Prec@1 91.406 (92.943)
Epoch: [182][300/391]	Time 0.241 (0.193)	Data 0.000 (0.001)	Loss 0.1716 (0.2008)	Prec@1 92.969 (92.953)
Epoch: [182][360/391]	Time 0.245 (0.190)	Data 0.000 (0.001)	Loss 0.1605 (0.2015)	Prec@1 94.531 (92.925)
Test: [0/79]	Time 0.246 (0.246)	Loss 0.1162 (0.1162)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.199 (0.176)	Loss 0.2204 (0.2420)	Prec@1 92.188 (92.674)
 * Prec@1 92.560
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [183][0/391]	Time 0.298 (0.298)	Data 0.118 (0.118)	Loss 0.2575 (0.2575)	Prec@1 89.844 (89.844)
Epoch: [183][60/391]	Time 0.166 (0.191)	Data 0.000 (0.002)	Loss 0.2036 (0.1972)	Prec@1 92.188 (93.302)
Epoch: [183][120/391]	Time 0.239 (0.190)	Data 0.000 (0.001)	Loss 0.1420 (0.1953)	Prec@1 92.969 (93.169)
Epoch: [183][180/391]	Time 0.241 (0.185)	Data 0.000 (0.001)	Loss 0.2795 (0.1993)	Prec@1 89.844 (92.939)
Epoch: [183][240/391]	Time 0.166 (0.185)	Data 0.000 (0.001)	Loss 0.2224 (0.2016)	Prec@1 92.969 (92.914)
Epoch: [183][300/391]	Time 0.169 (0.186)	Data 0.000 (0.001)	Loss 0.1325 (0.2011)	Prec@1 95.312 (92.917)
Epoch: [183][360/391]	Time 0.166 (0.187)	Data 0.000 (0.000)	Loss 0.1424 (0.2001)	Prec@1 94.531 (92.919)
Test: [0/79]	Time 0.331 (0.331)	Loss 0.1056 (0.1056)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.156 (0.177)	Loss 0.2025 (0.2426)	Prec@1 92.969 (92.469)
 * Prec@1 92.420
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [184][0/391]	Time 0.355 (0.355)	Data 0.107 (0.107)	Loss 0.2021 (0.2021)	Prec@1 94.531 (94.531)
Epoch: [184][60/391]	Time 0.167 (0.196)	Data 0.000 (0.002)	Loss 0.0962 (0.2012)	Prec@1 96.875 (92.879)
Epoch: [184][120/391]	Time 0.168 (0.188)	Data 0.000 (0.001)	Loss 0.2674 (0.2001)	Prec@1 88.281 (92.969)
Epoch: [184][180/391]	Time 0.167 (0.190)	Data 0.000 (0.001)	Loss 0.2216 (0.2035)	Prec@1 93.750 (92.895)
Epoch: [184][240/391]	Time 0.168 (0.193)	Data 0.000 (0.001)	Loss 0.1128 (0.2024)	Prec@1 96.094 (92.933)
Epoch: [184][300/391]	Time 0.242 (0.190)	Data 0.000 (0.001)	Loss 0.2302 (0.1999)	Prec@1 92.969 (92.977)
Epoch: [184][360/391]	Time 0.241 (0.188)	Data 0.000 (0.000)	Loss 0.2225 (0.1989)	Prec@1 92.969 (93.060)
Test: [0/79]	Time 0.255 (0.255)	Loss 0.1052 (0.1052)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.230 (0.171)	Loss 0.2030 (0.2449)	Prec@1 92.969 (92.559)
 * Prec@1 92.510
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [185][0/391]	Time 0.327 (0.327)	Data 0.143 (0.143)	Loss 0.2122 (0.2122)	Prec@1 90.625 (90.625)
Epoch: [185][60/391]	Time 0.242 (0.181)	Data 0.000 (0.003)	Loss 0.2396 (0.1938)	Prec@1 92.188 (93.353)
Epoch: [185][120/391]	Time 0.167 (0.207)	Data 0.000 (0.001)	Loss 0.2523 (0.2023)	Prec@1 90.625 (93.020)
Epoch: [185][180/391]	Time 0.245 (0.199)	Data 0.000 (0.001)	Loss 0.2028 (0.2031)	Prec@1 91.406 (92.895)
Epoch: [185][240/391]	Time 0.168 (0.194)	Data 0.000 (0.001)	Loss 0.1925 (0.2023)	Prec@1 93.750 (92.836)
Epoch: [185][300/391]	Time 0.167 (0.193)	Data 0.000 (0.001)	Loss 0.1790 (0.1996)	Prec@1 96.094 (92.964)
Epoch: [185][360/391]	Time 0.167 (0.191)	Data 0.000 (0.001)	Loss 0.2568 (0.1998)	Prec@1 91.406 (92.964)
Test: [0/79]	Time 0.254 (0.254)	Loss 0.1187 (0.1187)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.231 (0.168)	Loss 0.2098 (0.2418)	Prec@1 92.969 (92.508)
 * Prec@1 92.450
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [186][0/391]	Time 0.329 (0.329)	Data 0.148 (0.148)	Loss 0.1576 (0.1576)	Prec@1 94.531 (94.531)
Epoch: [186][60/391]	Time 0.245 (0.192)	Data 0.000 (0.003)	Loss 0.2225 (0.2000)	Prec@1 90.625 (92.815)
Epoch: [186][120/391]	Time 0.247 (0.185)	Data 0.000 (0.001)	Loss 0.1816 (0.1960)	Prec@1 92.969 (92.982)
Epoch: [186][180/391]	Time 0.169 (0.184)	Data 0.000 (0.001)	Loss 0.2724 (0.1964)	Prec@1 89.062 (93.012)
Epoch: [186][240/391]	Time 0.167 (0.186)	Data 0.000 (0.001)	Loss 0.1463 (0.1941)	Prec@1 95.312 (93.063)
Epoch: [186][300/391]	Time 0.167 (0.187)	Data 0.000 (0.001)	Loss 0.2185 (0.1959)	Prec@1 89.844 (93.010)
Epoch: [186][360/391]	Time 0.167 (0.188)	Data 0.000 (0.001)	Loss 0.2109 (0.1970)	Prec@1 89.062 (93.016)
Test: [0/79]	Time 0.330 (0.330)	Loss 0.1143 (0.1143)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.159 (0.170)	Loss 0.2118 (0.2409)	Prec@1 92.188 (92.700)
 * Prec@1 92.590
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [187][0/391]	Time 0.393 (0.393)	Data 0.141 (0.141)	Loss 0.1800 (0.1800)	Prec@1 94.531 (94.531)
Epoch: [187][60/391]	Time 0.246 (0.180)	Data 0.000 (0.002)	Loss 0.1849 (0.2089)	Prec@1 94.531 (92.687)
Epoch: [187][120/391]	Time 0.166 (0.187)	Data 0.000 (0.001)	Loss 0.1250 (0.2038)	Prec@1 96.094 (92.807)
Epoch: [187][180/391]	Time 0.168 (0.196)	Data 0.000 (0.001)	Loss 0.1603 (0.2002)	Prec@1 94.531 (92.947)
Epoch: [187][240/391]	Time 0.243 (0.195)	Data 0.000 (0.001)	Loss 0.1620 (0.1995)	Prec@1 93.750 (93.004)
Epoch: [187][300/391]	Time 0.237 (0.191)	Data 0.000 (0.001)	Loss 0.2213 (0.2009)	Prec@1 89.062 (92.938)
Epoch: [187][360/391]	Time 0.169 (0.190)	Data 0.000 (0.001)	Loss 0.2497 (0.2004)	Prec@1 91.406 (92.945)
Test: [0/79]	Time 0.251 (0.251)	Loss 0.1122 (0.1122)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.163 (0.177)	Loss 0.1872 (0.2428)	Prec@1 92.188 (92.585)
 * Prec@1 92.440
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [188][0/391]	Time 0.325 (0.325)	Data 0.147 (0.147)	Loss 0.1906 (0.1906)	Prec@1 92.969 (92.969)
Epoch: [188][60/391]	Time 0.166 (0.186)	Data 0.000 (0.003)	Loss 0.1510 (0.1973)	Prec@1 94.531 (93.212)
Epoch: [188][120/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.1525 (0.1953)	Prec@1 94.531 (93.214)
Epoch: [188][180/391]	Time 0.246 (0.187)	Data 0.000 (0.001)	Loss 0.1920 (0.1967)	Prec@1 92.969 (93.167)
Epoch: [188][240/391]	Time 0.166 (0.187)	Data 0.000 (0.001)	Loss 0.1888 (0.1938)	Prec@1 93.750 (93.290)
Epoch: [188][300/391]	Time 0.167 (0.186)	Data 0.000 (0.001)	Loss 0.2015 (0.1933)	Prec@1 92.188 (93.280)
Epoch: [188][360/391]	Time 0.169 (0.186)	Data 0.000 (0.001)	Loss 0.2626 (0.1942)	Prec@1 90.625 (93.237)
Test: [0/79]	Time 0.308 (0.308)	Loss 0.1171 (0.1171)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.155 (0.167)	Loss 0.2298 (0.2446)	Prec@1 91.406 (92.456)
 * Prec@1 92.400
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [189][0/391]	Time 0.383 (0.383)	Data 0.155 (0.155)	Loss 0.1650 (0.1650)	Prec@1 95.312 (95.312)
Epoch: [189][60/391]	Time 0.248 (0.186)	Data 0.000 (0.003)	Loss 0.2401 (0.2011)	Prec@1 92.969 (92.828)
Epoch: [189][120/391]	Time 0.168 (0.184)	Data 0.000 (0.001)	Loss 0.1564 (0.1949)	Prec@1 93.750 (93.053)
Epoch: [189][180/391]	Time 0.171 (0.188)	Data 0.000 (0.001)	Loss 0.2971 (0.1950)	Prec@1 89.062 (92.943)
Epoch: [189][240/391]	Time 0.171 (0.190)	Data 0.000 (0.001)	Loss 0.2941 (0.1951)	Prec@1 90.625 (93.011)
Epoch: [189][300/391]	Time 0.168 (0.191)	Data 0.000 (0.001)	Loss 0.1866 (0.1957)	Prec@1 94.531 (93.008)
Epoch: [189][360/391]	Time 0.174 (0.191)	Data 0.000 (0.001)	Loss 0.2388 (0.1986)	Prec@1 91.406 (92.936)
Test: [0/79]	Time 0.269 (0.269)	Loss 0.1210 (0.1210)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.156 (0.173)	Loss 0.2167 (0.2423)	Prec@1 91.406 (92.585)
 * Prec@1 92.570
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [190][0/391]	Time 0.319 (0.319)	Data 0.140 (0.140)	Loss 0.1531 (0.1531)	Prec@1 93.750 (93.750)
Epoch: [190][60/391]	Time 0.167 (0.197)	Data 0.000 (0.002)	Loss 0.1549 (0.1945)	Prec@1 94.531 (93.007)
Epoch: [190][120/391]	Time 0.166 (0.187)	Data 0.000 (0.001)	Loss 0.1911 (0.1945)	Prec@1 92.188 (92.917)
Epoch: [190][180/391]	Time 0.168 (0.188)	Data 0.000 (0.001)	Loss 0.2464 (0.1974)	Prec@1 92.188 (92.826)
Epoch: [190][240/391]	Time 0.165 (0.189)	Data 0.000 (0.001)	Loss 0.1980 (0.1991)	Prec@1 92.969 (92.810)
Epoch: [190][300/391]	Time 0.241 (0.189)	Data 0.000 (0.001)	Loss 0.2011 (0.1988)	Prec@1 92.969 (92.844)
Epoch: [190][360/391]	Time 0.240 (0.186)	Data 0.000 (0.000)	Loss 0.2845 (0.1984)	Prec@1 91.406 (92.858)
Test: [0/79]	Time 0.265 (0.265)	Loss 0.1116 (0.1116)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.181)	Loss 0.2050 (0.2432)	Prec@1 92.969 (92.597)
 * Prec@1 92.520
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [191][0/391]	Time 0.331 (0.331)	Data 0.150 (0.150)	Loss 0.1495 (0.1495)	Prec@1 95.312 (95.312)
Epoch: [191][60/391]	Time 0.168 (0.196)	Data 0.000 (0.003)	Loss 0.2446 (0.1925)	Prec@1 88.281 (93.327)
Epoch: [191][120/391]	Time 0.229 (0.191)	Data 0.000 (0.001)	Loss 0.2303 (0.1962)	Prec@1 92.188 (93.259)
Epoch: [191][180/391]	Time 0.245 (0.187)	Data 0.000 (0.001)	Loss 0.2218 (0.1954)	Prec@1 92.188 (93.180)
Epoch: [191][240/391]	Time 0.240 (0.184)	Data 0.000 (0.001)	Loss 0.2929 (0.1981)	Prec@1 88.281 (93.108)
Epoch: [191][300/391]	Time 0.242 (0.183)	Data 0.000 (0.001)	Loss 0.1807 (0.2010)	Prec@1 92.969 (92.956)
Epoch: [191][360/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.1976 (0.2003)	Prec@1 93.750 (92.982)
Test: [0/79]	Time 0.317 (0.317)	Loss 0.1122 (0.1122)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.155 (0.173)	Loss 0.2053 (0.2424)	Prec@1 92.969 (92.572)
 * Prec@1 92.510
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [192][0/391]	Time 0.387 (0.387)	Data 0.138 (0.138)	Loss 0.2423 (0.2423)	Prec@1 89.062 (89.062)
Epoch: [192][60/391]	Time 0.167 (0.183)	Data 0.000 (0.002)	Loss 0.1666 (0.2045)	Prec@1 93.750 (92.725)
Epoch: [192][120/391]	Time 0.169 (0.188)	Data 0.000 (0.001)	Loss 0.1383 (0.1983)	Prec@1 96.094 (93.001)
Epoch: [192][180/391]	Time 0.168 (0.193)	Data 0.000 (0.001)	Loss 0.1806 (0.1967)	Prec@1 92.188 (93.077)
Epoch: [192][240/391]	Time 0.241 (0.194)	Data 0.000 (0.001)	Loss 0.2041 (0.1965)	Prec@1 92.188 (93.060)
Epoch: [192][300/391]	Time 0.241 (0.191)	Data 0.000 (0.001)	Loss 0.2834 (0.1976)	Prec@1 89.844 (93.049)
Epoch: [192][360/391]	Time 0.242 (0.200)	Data 0.000 (0.001)	Loss 0.2339 (0.1965)	Prec@1 92.188 (93.060)
Test: [0/79]	Time 0.263 (0.263)	Loss 0.1171 (0.1171)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.228 (0.170)	Loss 0.1989 (0.2416)	Prec@1 91.406 (92.610)
 * Prec@1 92.580
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [193][0/391]	Time 0.327 (0.327)	Data 0.143 (0.143)	Loss 0.2212 (0.2212)	Prec@1 92.969 (92.969)
Epoch: [193][60/391]	Time 0.244 (0.189)	Data 0.000 (0.003)	Loss 0.1281 (0.2010)	Prec@1 96.094 (93.135)
Epoch: [193][120/391]	Time 0.167 (0.184)	Data 0.000 (0.001)	Loss 0.1680 (0.2048)	Prec@1 94.531 (92.723)
Epoch: [193][180/391]	Time 0.169 (0.189)	Data 0.000 (0.001)	Loss 0.1407 (0.2013)	Prec@1 95.312 (92.891)
Epoch: [193][240/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.4026 (0.2011)	Prec@1 83.594 (92.842)
Epoch: [193][300/391]	Time 0.168 (0.191)	Data 0.000 (0.001)	Loss 0.2065 (0.2017)	Prec@1 92.969 (92.873)
Epoch: [193][360/391]	Time 0.238 (0.191)	Data 0.000 (0.001)	Loss 0.2274 (0.2011)	Prec@1 90.625 (92.865)
Test: [0/79]	Time 0.267 (0.267)	Loss 0.1116 (0.1116)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.155 (0.174)	Loss 0.2108 (0.2435)	Prec@1 91.406 (92.533)
 * Prec@1 92.480
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [194][0/391]	Time 0.299 (0.299)	Data 0.120 (0.120)	Loss 0.1717 (0.1717)	Prec@1 95.312 (95.312)
Epoch: [194][60/391]	Time 0.168 (0.193)	Data 0.000 (0.002)	Loss 0.1901 (0.1937)	Prec@1 92.969 (93.468)
Epoch: [194][120/391]	Time 0.168 (0.189)	Data 0.000 (0.001)	Loss 0.1203 (0.2025)	Prec@1 96.875 (93.117)
Epoch: [194][180/391]	Time 0.166 (0.188)	Data 0.000 (0.001)	Loss 0.1778 (0.1962)	Prec@1 92.969 (93.288)
Epoch: [194][240/391]	Time 0.166 (0.187)	Data 0.000 (0.001)	Loss 0.1506 (0.1961)	Prec@1 94.531 (93.248)
Epoch: [194][300/391]	Time 0.166 (0.187)	Data 0.000 (0.001)	Loss 0.2817 (0.1925)	Prec@1 90.625 (93.353)
Epoch: [194][360/391]	Time 0.240 (0.187)	Data 0.000 (0.000)	Loss 0.1687 (0.1963)	Prec@1 93.750 (93.166)
Test: [0/79]	Time 0.251 (0.251)	Loss 0.1220 (0.1220)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.156 (0.176)	Loss 0.1959 (0.2421)	Prec@1 92.188 (92.482)
 * Prec@1 92.420
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [195][0/391]	Time 0.291 (0.291)	Data 0.114 (0.114)	Loss 0.1852 (0.1852)	Prec@1 90.625 (90.625)
Epoch: [195][60/391]	Time 0.166 (0.190)	Data 0.000 (0.002)	Loss 0.1845 (0.1953)	Prec@1 94.531 (92.930)
Epoch: [195][120/391]	Time 0.168 (0.186)	Data 0.000 (0.001)	Loss 0.1849 (0.1943)	Prec@1 91.406 (93.033)
Epoch: [195][180/391]	Time 0.168 (0.189)	Data 0.000 (0.001)	Loss 0.1847 (0.1998)	Prec@1 92.969 (92.835)
Epoch: [195][240/391]	Time 0.240 (0.188)	Data 0.000 (0.001)	Loss 0.2488 (0.1990)	Prec@1 88.281 (92.823)
Epoch: [195][300/391]	Time 0.166 (0.186)	Data 0.000 (0.001)	Loss 0.2159 (0.1979)	Prec@1 92.969 (92.917)
Epoch: [195][360/391]	Time 0.169 (0.187)	Data 0.000 (0.000)	Loss 0.1875 (0.1983)	Prec@1 93.750 (92.893)
Test: [0/79]	Time 0.265 (0.265)	Loss 0.1207 (0.1207)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.156 (0.171)	Loss 0.1948 (0.2431)	Prec@1 93.750 (92.585)
 * Prec@1 92.560
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [196][0/391]	Time 0.269 (0.269)	Data 0.096 (0.096)	Loss 0.1814 (0.1814)	Prec@1 92.969 (92.969)
Epoch: [196][60/391]	Time 0.167 (0.191)	Data 0.000 (0.002)	Loss 0.3228 (0.2016)	Prec@1 88.281 (93.058)
Epoch: [196][120/391]	Time 0.228 (0.190)	Data 0.000 (0.001)	Loss 0.1669 (0.1952)	Prec@1 94.531 (93.195)
Epoch: [196][180/391]	Time 0.246 (0.186)	Data 0.000 (0.001)	Loss 0.2075 (0.1943)	Prec@1 92.969 (93.223)
Epoch: [196][240/391]	Time 0.238 (0.183)	Data 0.000 (0.001)	Loss 0.1968 (0.1979)	Prec@1 94.531 (93.063)
Epoch: [196][300/391]	Time 0.218 (0.182)	Data 0.000 (0.000)	Loss 0.1176 (0.1994)	Prec@1 95.312 (92.984)
Epoch: [196][360/391]	Time 0.166 (0.182)	Data 0.000 (0.000)	Loss 0.1513 (0.1984)	Prec@1 93.750 (93.053)
Test: [0/79]	Time 0.230 (0.230)	Loss 0.1206 (0.1206)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.155 (0.169)	Loss 0.2011 (0.2450)	Prec@1 92.969 (92.495)
 * Prec@1 92.520
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [197][0/391]	Time 0.340 (0.340)	Data 0.161 (0.161)	Loss 0.2328 (0.2328)	Prec@1 91.406 (91.406)
Epoch: [197][60/391]	Time 0.168 (0.195)	Data 0.000 (0.003)	Loss 0.1851 (0.1987)	Prec@1 91.406 (93.186)
Epoch: [197][120/391]	Time 0.172 (0.191)	Data 0.000 (0.002)	Loss 0.1799 (0.2038)	Prec@1 94.531 (92.936)
Epoch: [197][180/391]	Time 0.247 (0.190)	Data 0.000 (0.001)	Loss 0.2848 (0.2017)	Prec@1 91.406 (92.969)
Epoch: [197][240/391]	Time 0.247 (0.188)	Data 0.000 (0.001)	Loss 0.2828 (0.2013)	Prec@1 92.969 (93.011)
Epoch: [197][300/391]	Time 0.168 (0.187)	Data 0.000 (0.001)	Loss 0.1482 (0.1990)	Prec@1 95.312 (93.047)
Epoch: [197][360/391]	Time 0.168 (0.187)	Data 0.000 (0.001)	Loss 0.1514 (0.1966)	Prec@1 96.094 (93.133)
Test: [0/79]	Time 0.275 (0.275)	Loss 0.1261 (0.1261)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.156 (0.168)	Loss 0.2059 (0.2454)	Prec@1 92.969 (92.508)
 * Prec@1 92.430
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [198][0/391]	Time 0.318 (0.318)	Data 0.138 (0.138)	Loss 0.2558 (0.2558)	Prec@1 92.188 (92.188)
Epoch: [198][60/391]	Time 0.168 (0.191)	Data 0.000 (0.002)	Loss 0.1403 (0.1943)	Prec@1 95.312 (93.315)
Epoch: [198][120/391]	Time 0.168 (0.187)	Data 0.000 (0.001)	Loss 0.1130 (0.1974)	Prec@1 96.875 (93.259)
Epoch: [198][180/391]	Time 0.243 (0.189)	Data 0.000 (0.001)	Loss 0.2166 (0.1979)	Prec@1 94.531 (93.206)
Epoch: [198][240/391]	Time 0.243 (0.186)	Data 0.000 (0.001)	Loss 0.2438 (0.1986)	Prec@1 90.625 (93.115)
Epoch: [198][300/391]	Time 0.168 (0.184)	Data 0.000 (0.001)	Loss 0.2113 (0.1962)	Prec@1 91.406 (93.205)
Epoch: [198][360/391]	Time 0.168 (0.184)	Data 0.000 (0.001)	Loss 0.1808 (0.1963)	Prec@1 92.969 (93.213)
Test: [0/79]	Time 0.247 (0.247)	Loss 0.1218 (0.1218)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.155 (0.172)	Loss 0.1985 (0.2442)	Prec@1 92.969 (92.700)
 * Prec@1 92.660
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [199][0/391]	Time 0.295 (0.295)	Data 0.115 (0.115)	Loss 0.1788 (0.1788)	Prec@1 92.188 (92.188)
Epoch: [199][60/391]	Time 0.167 (0.201)	Data 0.000 (0.002)	Loss 0.2228 (0.1821)	Prec@1 89.844 (93.686)
Epoch: [199][120/391]	Time 0.241 (0.189)	Data 0.000 (0.001)	Loss 0.1892 (0.1926)	Prec@1 94.531 (93.272)
Epoch: [199][180/391]	Time 0.240 (0.184)	Data 0.000 (0.001)	Loss 0.2052 (0.1975)	Prec@1 92.969 (93.038)
Epoch: [199][240/391]	Time 0.242 (0.182)	Data 0.000 (0.001)	Loss 0.2361 (0.2002)	Prec@1 89.844 (92.969)
Epoch: [199][300/391]	Time 0.166 (0.181)	Data 0.000 (0.001)	Loss 0.3217 (0.1995)	Prec@1 89.844 (93.010)
Epoch: [199][360/391]	Time 0.167 (0.181)	Data 0.000 (0.000)	Loss 0.1474 (0.1995)	Prec@1 95.312 (93.025)
Test: [0/79]	Time 0.249 (0.249)	Loss 0.1036 (0.1036)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.230 (0.165)	Loss 0.2048 (0.2449)	Prec@1 91.406 (92.508)
 * Prec@1 92.470
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [200][0/391]	Time 0.297 (0.297)	Data 0.118 (0.118)	Loss 0.3119 (0.3119)	Prec@1 89.062 (89.062)
Epoch: [200][60/391]	Time 0.171 (0.186)	Data 0.000 (0.002)	Loss 0.1093 (0.1865)	Prec@1 96.094 (93.315)
Epoch: [200][120/391]	Time 0.242 (0.182)	Data 0.000 (0.001)	Loss 0.2533 (0.1900)	Prec@1 89.062 (93.066)
Epoch: [200][180/391]	Time 0.241 (0.180)	Data 0.000 (0.001)	Loss 0.1508 (0.1890)	Prec@1 94.531 (93.180)
Epoch: [200][240/391]	Time 0.172 (0.178)	Data 0.000 (0.001)	Loss 0.1241 (0.1926)	Prec@1 96.094 (93.050)
Epoch: [200][300/391]	Time 0.168 (0.181)	Data 0.000 (0.001)	Loss 0.2044 (0.1960)	Prec@1 91.406 (93.044)
Epoch: [200][360/391]	Time 0.166 (0.182)	Data 0.000 (0.000)	Loss 0.2515 (0.1960)	Prec@1 91.406 (93.070)
Test: [0/79]	Time 0.261 (0.261)	Loss 0.1229 (0.1229)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.228 (0.162)	Loss 0.2138 (0.2443)	Prec@1 92.188 (92.572)
 * Prec@1 92.560
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [201][0/391]	Time 0.311 (0.311)	Data 0.133 (0.133)	Loss 0.2885 (0.2885)	Prec@1 89.844 (89.844)
Epoch: [201][60/391]	Time 0.244 (0.189)	Data 0.000 (0.002)	Loss 0.1913 (0.1988)	Prec@1 92.188 (92.943)
Epoch: [201][120/391]	Time 0.212 (0.182)	Data 0.000 (0.001)	Loss 0.2499 (0.1936)	Prec@1 89.844 (93.175)
Epoch: [201][180/391]	Time 0.168 (0.186)	Data 0.000 (0.001)	Loss 0.2527 (0.1967)	Prec@1 92.969 (93.033)
Epoch: [201][240/391]	Time 0.165 (0.184)	Data 0.000 (0.001)	Loss 0.1487 (0.1966)	Prec@1 96.875 (93.072)
Epoch: [201][300/391]	Time 0.166 (0.185)	Data 0.000 (0.001)	Loss 0.0961 (0.1942)	Prec@1 96.094 (93.195)
Epoch: [201][360/391]	Time 0.165 (0.184)	Data 0.000 (0.000)	Loss 0.2464 (0.1963)	Prec@1 90.625 (93.138)
Test: [0/79]	Time 0.273 (0.273)	Loss 0.1213 (0.1213)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.155 (0.170)	Loss 0.2017 (0.2423)	Prec@1 92.188 (92.546)
 * Prec@1 92.560
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [202][0/391]	Time 0.359 (0.359)	Data 0.108 (0.108)	Loss 0.1881 (0.1881)	Prec@1 92.969 (92.969)
Epoch: [202][60/391]	Time 0.237 (0.177)	Data 0.000 (0.002)	Loss 0.1384 (0.2040)	Prec@1 96.094 (92.713)
Epoch: [202][120/391]	Time 0.166 (0.176)	Data 0.000 (0.001)	Loss 0.1798 (0.2038)	Prec@1 92.188 (92.710)
Epoch: [202][180/391]	Time 0.166 (0.179)	Data 0.000 (0.001)	Loss 0.0701 (0.1991)	Prec@1 98.438 (92.762)
Epoch: [202][240/391]	Time 0.166 (0.180)	Data 0.000 (0.001)	Loss 0.2536 (0.1970)	Prec@1 91.406 (92.859)
Epoch: [202][300/391]	Time 0.166 (0.180)	Data 0.000 (0.000)	Loss 0.1337 (0.1965)	Prec@1 95.312 (92.896)
Epoch: [202][360/391]	Time 0.165 (0.182)	Data 0.000 (0.000)	Loss 0.1627 (0.1969)	Prec@1 92.188 (92.938)
Test: [0/79]	Time 0.272 (0.272)	Loss 0.1104 (0.1104)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.156 (0.184)	Loss 0.1997 (0.2427)	Prec@1 92.969 (92.597)
 * Prec@1 92.560
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [203][0/391]	Time 0.328 (0.328)	Data 0.149 (0.149)	Loss 0.1982 (0.1982)	Prec@1 92.969 (92.969)
Epoch: [203][60/391]	Time 0.167 (0.193)	Data 0.000 (0.003)	Loss 0.1609 (0.1974)	Prec@1 93.750 (92.700)
Epoch: [203][120/391]	Time 0.166 (0.193)	Data 0.000 (0.001)	Loss 0.1294 (0.1904)	Prec@1 94.531 (93.091)
Epoch: [203][180/391]	Time 0.167 (0.193)	Data 0.000 (0.001)	Loss 0.1337 (0.1919)	Prec@1 94.531 (93.128)
Epoch: [203][240/391]	Time 0.240 (0.191)	Data 0.000 (0.001)	Loss 0.2859 (0.1907)	Prec@1 91.406 (93.225)
Epoch: [203][300/391]	Time 0.241 (0.187)	Data 0.000 (0.001)	Loss 0.2347 (0.1934)	Prec@1 92.188 (93.143)
Epoch: [203][360/391]	Time 0.166 (0.185)	Data 0.000 (0.001)	Loss 0.2269 (0.1972)	Prec@1 89.844 (93.032)
Test: [0/79]	Time 0.238 (0.238)	Loss 0.1159 (0.1159)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.230 (0.169)	Loss 0.2049 (0.2413)	Prec@1 92.969 (92.636)
 * Prec@1 92.600
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [204][0/391]	Time 0.288 (0.288)	Data 0.108 (0.108)	Loss 0.1581 (0.1581)	Prec@1 93.750 (93.750)
Epoch: [204][60/391]	Time 0.168 (0.189)	Data 0.000 (0.002)	Loss 0.2642 (0.1980)	Prec@1 91.406 (93.122)
Epoch: [204][120/391]	Time 0.166 (0.185)	Data 0.000 (0.001)	Loss 0.2307 (0.1970)	Prec@1 92.969 (93.195)
Epoch: [204][180/391]	Time 0.243 (0.184)	Data 0.000 (0.001)	Loss 0.2355 (0.2003)	Prec@1 90.625 (93.072)
Epoch: [204][240/391]	Time 0.243 (0.183)	Data 0.000 (0.001)	Loss 0.1437 (0.1999)	Prec@1 95.312 (93.092)
Epoch: [204][300/391]	Time 0.168 (0.182)	Data 0.000 (0.001)	Loss 0.1831 (0.2007)	Prec@1 92.969 (93.047)
Epoch: [204][360/391]	Time 0.171 (0.185)	Data 0.000 (0.000)	Loss 0.1785 (0.2010)	Prec@1 94.531 (93.023)
Test: [0/79]	Time 0.248 (0.248)	Loss 0.1208 (0.1208)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.230 (0.162)	Loss 0.2018 (0.2415)	Prec@1 92.188 (92.623)
 * Prec@1 92.570
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [205][0/391]	Time 0.283 (0.283)	Data 0.103 (0.103)	Loss 0.1830 (0.1830)	Prec@1 94.531 (94.531)
Epoch: [205][60/391]	Time 0.168 (0.185)	Data 0.000 (0.002)	Loss 0.2080 (0.1903)	Prec@1 92.969 (93.238)
Epoch: [205][120/391]	Time 0.167 (0.182)	Data 0.000 (0.001)	Loss 0.1722 (0.1976)	Prec@1 92.969 (93.020)
Epoch: [205][180/391]	Time 0.244 (0.181)	Data 0.000 (0.001)	Loss 0.2026 (0.1939)	Prec@1 91.406 (93.163)
Epoch: [205][240/391]	Time 0.243 (0.180)	Data 0.000 (0.001)	Loss 0.1585 (0.1931)	Prec@1 92.969 (93.163)
Epoch: [205][300/391]	Time 0.166 (0.179)	Data 0.000 (0.000)	Loss 0.1220 (0.1923)	Prec@1 97.656 (93.239)
Epoch: [205][360/391]	Time 0.168 (0.180)	Data 0.000 (0.000)	Loss 0.3279 (0.1931)	Prec@1 88.281 (93.213)
Test: [0/79]	Time 0.321 (0.321)	Loss 0.1267 (0.1267)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.156 (0.177)	Loss 0.2122 (0.2415)	Prec@1 91.406 (92.636)
 * Prec@1 92.640
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [206][0/391]	Time 0.419 (0.419)	Data 0.165 (0.165)	Loss 0.1177 (0.1177)	Prec@1 95.312 (95.312)
Epoch: [206][60/391]	Time 0.166 (0.183)	Data 0.000 (0.003)	Loss 0.1691 (0.1877)	Prec@1 93.750 (93.558)
Epoch: [206][120/391]	Time 0.171 (0.182)	Data 0.000 (0.002)	Loss 0.1419 (0.1912)	Prec@1 95.312 (93.253)
Epoch: [206][180/391]	Time 0.169 (0.183)	Data 0.000 (0.001)	Loss 0.2026 (0.1911)	Prec@1 91.406 (93.202)
Epoch: [206][240/391]	Time 0.171 (0.184)	Data 0.000 (0.001)	Loss 0.1541 (0.1890)	Prec@1 94.531 (93.290)
Epoch: [206][300/391]	Time 0.170 (0.185)	Data 0.000 (0.001)	Loss 0.2875 (0.1890)	Prec@1 90.625 (93.337)
Epoch: [206][360/391]	Time 0.167 (0.186)	Data 0.000 (0.001)	Loss 0.1567 (0.1913)	Prec@1 92.969 (93.280)
Test: [0/79]	Time 0.247 (0.247)	Loss 0.1108 (0.1108)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.156 (0.182)	Loss 0.2013 (0.2435)	Prec@1 92.188 (92.572)
 * Prec@1 92.520
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [207][0/391]	Time 0.303 (0.303)	Data 0.119 (0.119)	Loss 0.2162 (0.2162)	Prec@1 91.406 (91.406)
Epoch: [207][60/391]	Time 0.166 (0.182)	Data 0.000 (0.002)	Loss 0.1523 (0.2060)	Prec@1 94.531 (92.546)
Epoch: [207][120/391]	Time 0.166 (0.187)	Data 0.000 (0.001)	Loss 0.2021 (0.1961)	Prec@1 93.750 (93.072)
Epoch: [207][180/391]	Time 0.168 (0.187)	Data 0.000 (0.001)	Loss 0.1815 (0.1966)	Prec@1 94.531 (93.068)
Epoch: [207][240/391]	Time 0.166 (0.186)	Data 0.000 (0.001)	Loss 0.1952 (0.1952)	Prec@1 92.969 (93.079)
Epoch: [207][300/391]	Time 0.166 (0.188)	Data 0.000 (0.001)	Loss 0.1014 (0.1969)	Prec@1 98.438 (93.028)
Epoch: [207][360/391]	Time 0.182 (0.187)	Data 0.000 (0.000)	Loss 0.1920 (0.1971)	Prec@1 94.531 (92.971)
Test: [0/79]	Time 0.255 (0.255)	Loss 0.1191 (0.1191)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.155 (0.182)	Loss 0.2022 (0.2420)	Prec@1 90.625 (92.572)
 * Prec@1 92.540
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [208][0/391]	Time 0.288 (0.288)	Data 0.110 (0.110)	Loss 0.2716 (0.2716)	Prec@1 90.625 (90.625)
Epoch: [208][60/391]	Time 0.168 (0.197)	Data 0.000 (0.002)	Loss 0.2112 (0.2013)	Prec@1 92.969 (92.713)
Epoch: [208][120/391]	Time 0.239 (0.196)	Data 0.000 (0.001)	Loss 0.2482 (0.1997)	Prec@1 88.281 (92.807)
Epoch: [208][180/391]	Time 0.168 (0.190)	Data 0.000 (0.001)	Loss 0.1973 (0.2006)	Prec@1 96.875 (92.805)
Epoch: [208][240/391]	Time 0.166 (0.188)	Data 0.000 (0.001)	Loss 0.1646 (0.1976)	Prec@1 93.750 (92.953)
Epoch: [208][300/391]	Time 0.172 (0.187)	Data 0.000 (0.001)	Loss 0.1641 (0.1947)	Prec@1 94.531 (93.057)
Epoch: [208][360/391]	Time 0.168 (0.187)	Data 0.000 (0.000)	Loss 0.2267 (0.1958)	Prec@1 92.969 (93.012)
Test: [0/79]	Time 0.340 (0.340)	Loss 0.1264 (0.1264)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.156 (0.190)	Loss 0.2138 (0.2439)	Prec@1 92.188 (92.597)
 * Prec@1 92.620
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [209][0/391]	Time 0.302 (0.302)	Data 0.114 (0.114)	Loss 0.2080 (0.2080)	Prec@1 90.625 (90.625)
Epoch: [209][60/391]	Time 0.167 (0.218)	Data 0.000 (0.002)	Loss 0.1328 (0.1992)	Prec@1 96.094 (92.982)
Epoch: [209][120/391]	Time 0.168 (0.199)	Data 0.000 (0.001)	Loss 0.1628 (0.1975)	Prec@1 93.750 (92.969)
Epoch: [209][180/391]	Time 0.166 (0.194)	Data 0.000 (0.001)	Loss 0.2114 (0.2003)	Prec@1 94.531 (92.904)
Epoch: [209][240/391]	Time 0.242 (0.192)	Data 0.000 (0.001)	Loss 0.1253 (0.1988)	Prec@1 95.312 (92.875)
Epoch: [209][300/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.3072 (0.1978)	Prec@1 89.062 (92.912)
Epoch: [209][360/391]	Time 0.166 (0.190)	Data 0.000 (0.000)	Loss 0.1754 (0.1956)	Prec@1 94.531 (93.027)
Test: [0/79]	Time 0.237 (0.237)	Loss 0.1252 (0.1252)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.227 (0.165)	Loss 0.2129 (0.2463)	Prec@1 91.406 (92.405)
 * Prec@1 92.440
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [210][0/391]	Time 0.316 (0.316)	Data 0.137 (0.137)	Loss 0.2092 (0.2092)	Prec@1 92.969 (92.969)
Epoch: [210][60/391]	Time 0.242 (0.184)	Data 0.000 (0.002)	Loss 0.1317 (0.2017)	Prec@1 93.750 (92.764)
Epoch: [210][120/391]	Time 0.168 (0.179)	Data 0.000 (0.001)	Loss 0.1297 (0.1990)	Prec@1 96.094 (93.027)
Epoch: [210][180/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.1510 (0.1997)	Prec@1 93.750 (92.956)
Epoch: [210][240/391]	Time 0.168 (0.191)	Data 0.000 (0.001)	Loss 0.2058 (0.1978)	Prec@1 93.750 (93.017)
Epoch: [210][300/391]	Time 0.241 (0.190)	Data 0.000 (0.001)	Loss 0.1838 (0.1966)	Prec@1 92.969 (93.112)
Epoch: [210][360/391]	Time 0.168 (0.190)	Data 0.000 (0.001)	Loss 0.1946 (0.1978)	Prec@1 95.312 (93.055)
Test: [0/79]	Time 0.261 (0.261)	Loss 0.1235 (0.1235)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.155 (0.171)	Loss 0.1982 (0.2447)	Prec@1 92.969 (92.520)
 * Prec@1 92.570
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [211][0/391]	Time 0.279 (0.279)	Data 0.101 (0.101)	Loss 0.1638 (0.1638)	Prec@1 92.969 (92.969)
Epoch: [211][60/391]	Time 0.167 (0.192)	Data 0.000 (0.002)	Loss 0.2242 (0.1885)	Prec@1 90.625 (93.033)
Epoch: [211][120/391]	Time 0.168 (0.187)	Data 0.000 (0.001)	Loss 0.1428 (0.1951)	Prec@1 92.969 (92.878)
Epoch: [211][180/391]	Time 0.246 (0.185)	Data 0.000 (0.001)	Loss 0.2865 (0.1910)	Prec@1 89.062 (93.059)
Epoch: [211][240/391]	Time 0.247 (0.183)	Data 0.000 (0.001)	Loss 0.1751 (0.1933)	Prec@1 92.969 (93.066)
Epoch: [211][300/391]	Time 0.166 (0.183)	Data 0.000 (0.000)	Loss 0.1728 (0.1923)	Prec@1 92.969 (93.109)
Epoch: [211][360/391]	Time 0.168 (0.183)	Data 0.000 (0.000)	Loss 0.1431 (0.1949)	Prec@1 96.094 (93.049)
Test: [0/79]	Time 0.252 (0.252)	Loss 0.1154 (0.1154)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.230 (0.164)	Loss 0.2071 (0.2447)	Prec@1 92.969 (92.456)
 * Prec@1 92.440
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [212][0/391]	Time 0.387 (0.387)	Data 0.135 (0.135)	Loss 0.2322 (0.2322)	Prec@1 92.969 (92.969)
Epoch: [212][60/391]	Time 0.238 (0.177)	Data 0.000 (0.002)	Loss 0.1264 (0.1932)	Prec@1 96.875 (93.340)
Epoch: [212][120/391]	Time 0.168 (0.180)	Data 0.000 (0.001)	Loss 0.2104 (0.1988)	Prec@1 91.406 (93.130)
Epoch: [212][180/391]	Time 0.166 (0.182)	Data 0.000 (0.001)	Loss 0.1677 (0.1977)	Prec@1 95.312 (93.120)
Epoch: [212][240/391]	Time 0.166 (0.186)	Data 0.000 (0.001)	Loss 0.2618 (0.1961)	Prec@1 91.406 (93.199)
Epoch: [212][300/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.2085 (0.1968)	Prec@1 92.188 (93.156)
Epoch: [212][360/391]	Time 0.167 (0.184)	Data 0.000 (0.001)	Loss 0.2497 (0.1954)	Prec@1 92.969 (93.202)
Test: [0/79]	Time 0.252 (0.252)	Loss 0.1366 (0.1366)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.156 (0.169)	Loss 0.2050 (0.2423)	Prec@1 92.969 (92.520)
 * Prec@1 92.530
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [213][0/391]	Time 0.318 (0.318)	Data 0.139 (0.139)	Loss 0.2339 (0.2339)	Prec@1 91.406 (91.406)
Epoch: [213][60/391]	Time 0.167 (0.195)	Data 0.000 (0.002)	Loss 0.2297 (0.1919)	Prec@1 92.969 (93.097)
Epoch: [213][120/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.1360 (0.1980)	Prec@1 94.531 (93.040)
Epoch: [213][180/391]	Time 0.167 (0.187)	Data 0.000 (0.001)	Loss 0.1018 (0.1971)	Prec@1 97.656 (93.042)
Epoch: [213][240/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.1271 (0.1944)	Prec@1 94.531 (93.056)
Epoch: [213][300/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.1550 (0.1929)	Prec@1 94.531 (93.182)
Epoch: [213][360/391]	Time 0.235 (0.184)	Data 0.000 (0.001)	Loss 0.1906 (0.1939)	Prec@1 92.188 (93.170)
Test: [0/79]	Time 0.332 (0.332)	Loss 0.1252 (0.1252)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.156 (0.166)	Loss 0.1984 (0.2434)	Prec@1 92.969 (92.572)
 * Prec@1 92.490
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [214][0/391]	Time 0.362 (0.362)	Data 0.111 (0.111)	Loss 0.2169 (0.2169)	Prec@1 92.969 (92.969)
Epoch: [214][60/391]	Time 0.242 (0.178)	Data 0.000 (0.002)	Loss 0.2517 (0.2029)	Prec@1 89.844 (92.828)
Epoch: [214][120/391]	Time 0.167 (0.177)	Data 0.000 (0.001)	Loss 0.3145 (0.2010)	Prec@1 90.625 (92.820)
Epoch: [214][180/391]	Time 0.167 (0.181)	Data 0.000 (0.001)	Loss 0.1424 (0.1951)	Prec@1 95.312 (93.059)
Epoch: [214][240/391]	Time 0.167 (0.183)	Data 0.000 (0.001)	Loss 0.2966 (0.1943)	Prec@1 91.406 (93.105)
Epoch: [214][300/391]	Time 0.167 (0.187)	Data 0.000 (0.001)	Loss 0.2945 (0.1969)	Prec@1 88.281 (92.982)
Epoch: [214][360/391]	Time 0.238 (0.187)	Data 0.000 (0.000)	Loss 0.2233 (0.1963)	Prec@1 91.406 (93.027)
Test: [0/79]	Time 0.264 (0.264)	Loss 0.1232 (0.1232)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.155 (0.171)	Loss 0.2067 (0.2432)	Prec@1 91.406 (92.585)
 * Prec@1 92.560
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [215][0/391]	Time 0.336 (0.336)	Data 0.158 (0.158)	Loss 0.2843 (0.2843)	Prec@1 90.625 (90.625)
Epoch: [215][60/391]	Time 0.168 (0.191)	Data 0.000 (0.003)	Loss 0.1792 (0.1963)	Prec@1 92.969 (93.135)
Epoch: [215][120/391]	Time 0.167 (0.193)	Data 0.000 (0.001)	Loss 0.1774 (0.1992)	Prec@1 93.750 (93.085)
Epoch: [215][180/391]	Time 0.242 (0.190)	Data 0.000 (0.001)	Loss 0.1809 (0.2006)	Prec@1 94.531 (92.977)
Epoch: [215][240/391]	Time 0.242 (0.186)	Data 0.000 (0.001)	Loss 0.2713 (0.2012)	Prec@1 90.625 (92.829)
Epoch: [215][300/391]	Time 0.166 (0.184)	Data 0.000 (0.001)	Loss 0.2187 (0.1987)	Prec@1 91.406 (92.943)
Epoch: [215][360/391]	Time 0.168 (0.184)	Data 0.000 (0.001)	Loss 0.2443 (0.1974)	Prec@1 93.750 (92.993)
Test: [0/79]	Time 0.247 (0.247)	Loss 0.1167 (0.1167)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.176 (0.170)	Loss 0.2043 (0.2424)	Prec@1 92.969 (92.623)
 * Prec@1 92.600
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [216][0/391]	Time 0.296 (0.296)	Data 0.115 (0.115)	Loss 0.1449 (0.1449)	Prec@1 94.531 (94.531)
Epoch: [216][60/391]	Time 0.166 (0.193)	Data 0.000 (0.002)	Loss 0.1202 (0.1911)	Prec@1 95.312 (93.058)
Epoch: [216][120/391]	Time 0.215 (0.185)	Data 0.000 (0.001)	Loss 0.1606 (0.1983)	Prec@1 94.531 (92.788)
Epoch: [216][180/391]	Time 0.239 (0.181)	Data 0.000 (0.001)	Loss 0.2209 (0.2000)	Prec@1 92.188 (92.753)
Epoch: [216][240/391]	Time 0.167 (0.181)	Data 0.000 (0.001)	Loss 0.0948 (0.1956)	Prec@1 96.094 (92.959)
Epoch: [216][300/391]	Time 0.166 (0.184)	Data 0.000 (0.000)	Loss 0.2860 (0.1951)	Prec@1 89.844 (93.008)
Epoch: [216][360/391]	Time 0.166 (0.184)	Data 0.000 (0.000)	Loss 0.1438 (0.1965)	Prec@1 95.312 (92.919)
Test: [0/79]	Time 0.271 (0.271)	Loss 0.1307 (0.1307)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.155 (0.179)	Loss 0.2099 (0.2428)	Prec@1 92.188 (92.687)
 * Prec@1 92.580
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [217][0/391]	Time 0.324 (0.324)	Data 0.146 (0.146)	Loss 0.2548 (0.2548)	Prec@1 90.625 (90.625)
Epoch: [217][60/391]	Time 0.168 (0.191)	Data 0.000 (0.003)	Loss 0.1895 (0.1925)	Prec@1 91.406 (93.186)
Epoch: [217][120/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.2629 (0.2014)	Prec@1 92.188 (92.872)
Epoch: [217][180/391]	Time 0.166 (0.191)	Data 0.000 (0.001)	Loss 0.1358 (0.1980)	Prec@1 95.312 (93.012)
Epoch: [217][240/391]	Time 0.167 (0.190)	Data 0.000 (0.001)	Loss 0.1802 (0.1971)	Prec@1 95.312 (93.040)
Epoch: [217][300/391]	Time 0.242 (0.189)	Data 0.000 (0.001)	Loss 0.1891 (0.1971)	Prec@1 93.750 (93.057)
Epoch: [217][360/391]	Time 0.241 (0.187)	Data 0.000 (0.001)	Loss 0.2029 (0.1976)	Prec@1 91.406 (92.995)
Test: [0/79]	Time 0.251 (0.251)	Loss 0.1249 (0.1249)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.231 (0.178)	Loss 0.2015 (0.2415)	Prec@1 91.406 (92.585)
 * Prec@1 92.590
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [218][0/391]	Time 0.316 (0.316)	Data 0.142 (0.142)	Loss 0.2644 (0.2644)	Prec@1 88.281 (88.281)
Epoch: [218][60/391]	Time 0.242 (0.190)	Data 0.000 (0.002)	Loss 0.2171 (0.1909)	Prec@1 90.625 (93.097)
Epoch: [218][120/391]	Time 0.166 (0.185)	Data 0.000 (0.001)	Loss 0.2152 (0.1916)	Prec@1 92.969 (93.020)
Epoch: [218][180/391]	Time 0.166 (0.188)	Data 0.000 (0.001)	Loss 0.1806 (0.1897)	Prec@1 92.969 (93.154)
Epoch: [218][240/391]	Time 0.166 (0.188)	Data 0.000 (0.001)	Loss 0.1345 (0.1916)	Prec@1 95.312 (93.166)
Epoch: [218][300/391]	Time 0.167 (0.187)	Data 0.000 (0.001)	Loss 0.2053 (0.1938)	Prec@1 91.406 (93.161)
Epoch: [218][360/391]	Time 0.166 (0.186)	Data 0.000 (0.001)	Loss 0.1599 (0.1936)	Prec@1 93.750 (93.202)
Test: [0/79]	Time 0.260 (0.260)	Loss 0.1305 (0.1305)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.156 (0.173)	Loss 0.2159 (0.2431)	Prec@1 92.969 (92.597)
 * Prec@1 92.620
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [219][0/391]	Time 0.277 (0.277)	Data 0.104 (0.104)	Loss 0.2248 (0.2248)	Prec@1 92.188 (92.188)
Epoch: [219][60/391]	Time 0.167 (0.187)	Data 0.000 (0.002)	Loss 0.1164 (0.2022)	Prec@1 96.875 (92.943)
Epoch: [219][120/391]	Time 0.169 (0.186)	Data 0.000 (0.001)	Loss 0.1309 (0.2019)	Prec@1 94.531 (92.853)
Epoch: [219][180/391]	Time 0.168 (0.189)	Data 0.000 (0.001)	Loss 0.1912 (0.2003)	Prec@1 93.750 (92.930)
Epoch: [219][240/391]	Time 0.246 (0.187)	Data 0.000 (0.001)	Loss 0.0843 (0.1965)	Prec@1 98.438 (93.030)
Epoch: [219][300/391]	Time 0.171 (0.185)	Data 0.000 (0.001)	Loss 0.1922 (0.1950)	Prec@1 93.750 (93.091)
Epoch: [219][360/391]	Time 0.171 (0.185)	Data 0.000 (0.000)	Loss 0.2103 (0.1947)	Prec@1 92.969 (93.114)
Test: [0/79]	Time 0.251 (0.251)	Loss 0.1075 (0.1075)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.229 (0.167)	Loss 0.1935 (0.2410)	Prec@1 92.969 (92.585)
 * Prec@1 92.560
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [220][0/391]	Time 0.304 (0.304)	Data 0.130 (0.130)	Loss 0.2445 (0.2445)	Prec@1 91.406 (91.406)
Epoch: [220][60/391]	Time 0.240 (0.189)	Data 0.000 (0.002)	Loss 0.2032 (0.1947)	Prec@1 92.969 (92.764)
Epoch: [220][120/391]	Time 0.167 (0.180)	Data 0.000 (0.001)	Loss 0.2142 (0.1940)	Prec@1 92.969 (92.846)
Epoch: [220][180/391]	Time 0.168 (0.189)	Data 0.000 (0.001)	Loss 0.1875 (0.1920)	Prec@1 93.750 (93.033)
Epoch: [220][240/391]	Time 0.168 (0.188)	Data 0.000 (0.001)	Loss 0.2383 (0.1959)	Prec@1 92.969 (92.959)
Epoch: [220][300/391]	Time 0.168 (0.188)	Data 0.000 (0.001)	Loss 0.1765 (0.1963)	Prec@1 94.531 (92.997)
Epoch: [220][360/391]	Time 0.172 (0.188)	Data 0.000 (0.001)	Loss 0.1718 (0.1965)	Prec@1 91.406 (92.986)
Test: [0/79]	Time 0.247 (0.247)	Loss 0.1105 (0.1105)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.156 (0.174)	Loss 0.1994 (0.2429)	Prec@1 91.406 (92.623)
 * Prec@1 92.560
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [221][0/391]	Time 0.288 (0.288)	Data 0.114 (0.114)	Loss 0.1767 (0.1767)	Prec@1 93.750 (93.750)
Epoch: [221][60/391]	Time 0.168 (0.184)	Data 0.000 (0.002)	Loss 0.1643 (0.1889)	Prec@1 94.531 (93.251)
Epoch: [221][120/391]	Time 0.168 (0.186)	Data 0.000 (0.001)	Loss 0.1975 (0.1909)	Prec@1 93.750 (93.311)
Epoch: [221][180/391]	Time 0.168 (0.186)	Data 0.000 (0.001)	Loss 0.0850 (0.1893)	Prec@1 98.438 (93.344)
Epoch: [221][240/391]	Time 0.166 (0.186)	Data 0.000 (0.001)	Loss 0.2212 (0.1876)	Prec@1 95.312 (93.491)
Epoch: [221][300/391]	Time 0.240 (0.185)	Data 0.000 (0.000)	Loss 0.2531 (0.1908)	Prec@1 92.969 (93.311)
Epoch: [221][360/391]	Time 0.224 (0.182)	Data 0.000 (0.000)	Loss 0.1454 (0.1923)	Prec@1 95.312 (93.200)
Test: [0/79]	Time 0.278 (0.278)	Loss 0.1100 (0.1100)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.229 (0.181)	Loss 0.1900 (0.2416)	Prec@1 92.969 (92.597)
 * Prec@1 92.560
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [222][0/391]	Time 0.316 (0.316)	Data 0.137 (0.137)	Loss 0.2372 (0.2372)	Prec@1 92.188 (92.188)
Epoch: [222][60/391]	Time 0.169 (0.192)	Data 0.000 (0.002)	Loss 0.2039 (0.1907)	Prec@1 92.188 (93.225)
Epoch: [222][120/391]	Time 0.235 (0.184)	Data 0.000 (0.001)	Loss 0.1631 (0.1913)	Prec@1 93.750 (93.117)
Epoch: [222][180/391]	Time 0.245 (0.182)	Data 0.000 (0.001)	Loss 0.1358 (0.1917)	Prec@1 95.312 (93.150)
Epoch: [222][240/391]	Time 0.167 (0.181)	Data 0.000 (0.001)	Loss 0.1746 (0.1929)	Prec@1 92.188 (93.111)
Epoch: [222][300/391]	Time 0.167 (0.181)	Data 0.000 (0.001)	Loss 0.1185 (0.1943)	Prec@1 96.875 (93.109)
Epoch: [222][360/391]	Time 0.168 (0.181)	Data 0.000 (0.001)	Loss 0.2398 (0.1960)	Prec@1 92.188 (92.997)
Test: [0/79]	Time 0.326 (0.326)	Loss 0.1190 (0.1190)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.156 (0.165)	Loss 0.2091 (0.2457)	Prec@1 92.188 (92.636)
 * Prec@1 92.630
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [223][0/391]	Time 0.397 (0.397)	Data 0.144 (0.144)	Loss 0.1592 (0.1592)	Prec@1 92.969 (92.969)
Epoch: [223][60/391]	Time 0.238 (0.177)	Data 0.000 (0.003)	Loss 0.1586 (0.1932)	Prec@1 94.531 (93.148)
Epoch: [223][120/391]	Time 0.168 (0.177)	Data 0.000 (0.001)	Loss 0.2424 (0.1915)	Prec@1 92.188 (93.137)
Epoch: [223][180/391]	Time 0.166 (0.183)	Data 0.000 (0.001)	Loss 0.1490 (0.1906)	Prec@1 96.094 (93.223)
Epoch: [223][240/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.2673 (0.1908)	Prec@1 90.625 (93.179)
Epoch: [223][300/391]	Time 0.217 (0.188)	Data 0.000 (0.001)	Loss 0.1877 (0.1890)	Prec@1 92.969 (93.231)
Epoch: [223][360/391]	Time 0.242 (0.186)	Data 0.000 (0.001)	Loss 0.1460 (0.1889)	Prec@1 95.312 (93.300)
Test: [0/79]	Time 0.266 (0.266)	Loss 0.1093 (0.1093)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.156 (0.172)	Loss 0.2001 (0.2426)	Prec@1 92.188 (92.636)
 * Prec@1 92.540
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [224][0/391]	Time 0.290 (0.290)	Data 0.116 (0.116)	Loss 0.1394 (0.1394)	Prec@1 95.312 (95.312)
Epoch: [224][60/391]	Time 0.166 (0.196)	Data 0.000 (0.002)	Loss 0.1761 (0.1999)	Prec@1 92.188 (92.982)
Epoch: [224][120/391]	Time 0.243 (0.192)	Data 0.000 (0.001)	Loss 0.1507 (0.2045)	Prec@1 94.531 (92.665)
Epoch: [224][180/391]	Time 0.240 (0.186)	Data 0.000 (0.001)	Loss 0.2345 (0.2017)	Prec@1 94.531 (92.917)
Epoch: [224][240/391]	Time 0.167 (0.183)	Data 0.000 (0.001)	Loss 0.2288 (0.2008)	Prec@1 92.969 (92.936)
Epoch: [224][300/391]	Time 0.166 (0.183)	Data 0.000 (0.001)	Loss 0.1961 (0.2009)	Prec@1 92.188 (92.925)
Epoch: [224][360/391]	Time 0.166 (0.184)	Data 0.000 (0.000)	Loss 0.2199 (0.1980)	Prec@1 92.969 (92.997)
Test: [0/79]	Time 0.307 (0.307)	Loss 0.1166 (0.1166)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.156 (0.164)	Loss 0.1895 (0.2406)	Prec@1 91.406 (92.585)
 * Prec@1 92.600
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [225][0/391]	Time 0.298 (0.298)	Data 0.121 (0.121)	Loss 0.1709 (0.1709)	Prec@1 93.750 (93.750)
Epoch: [225][60/391]	Time 0.243 (0.178)	Data 0.000 (0.002)	Loss 0.1952 (0.1942)	Prec@1 92.188 (92.969)
Epoch: [225][120/391]	Time 0.166 (0.181)	Data 0.000 (0.001)	Loss 0.1885 (0.1987)	Prec@1 92.188 (92.853)
Epoch: [225][180/391]	Time 0.167 (0.181)	Data 0.000 (0.001)	Loss 0.2618 (0.1972)	Prec@1 89.062 (92.973)
Epoch: [225][240/391]	Time 0.167 (0.180)	Data 0.000 (0.001)	Loss 0.1410 (0.1939)	Prec@1 95.312 (93.131)
Epoch: [225][300/391]	Time 0.167 (0.182)	Data 0.000 (0.001)	Loss 0.2302 (0.1937)	Prec@1 90.625 (93.127)
Epoch: [225][360/391]	Time 0.247 (0.186)	Data 0.000 (0.000)	Loss 0.2129 (0.1919)	Prec@1 90.625 (93.198)
Test: [0/79]	Time 0.258 (0.258)	Loss 0.1143 (0.1143)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.229 (0.193)	Loss 0.2015 (0.2442)	Prec@1 92.969 (92.661)
 * Prec@1 92.640
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [226][0/391]	Time 0.335 (0.335)	Data 0.150 (0.150)	Loss 0.1626 (0.1626)	Prec@1 94.531 (94.531)
Epoch: [226][60/391]	Time 0.169 (0.182)	Data 0.000 (0.003)	Loss 0.2518 (0.1970)	Prec@1 90.625 (93.122)
Epoch: [226][120/391]	Time 0.242 (0.187)	Data 0.000 (0.001)	Loss 0.1984 (0.1984)	Prec@1 95.312 (92.885)
Epoch: [226][180/391]	Time 0.253 (0.183)	Data 0.000 (0.001)	Loss 0.1174 (0.1967)	Prec@1 96.094 (92.934)
Epoch: [226][240/391]	Time 0.168 (0.184)	Data 0.000 (0.001)	Loss 0.2735 (0.1970)	Prec@1 91.406 (92.920)
Epoch: [226][300/391]	Time 0.172 (0.184)	Data 0.000 (0.001)	Loss 0.1875 (0.1947)	Prec@1 93.750 (93.093)
Epoch: [226][360/391]	Time 0.168 (0.186)	Data 0.000 (0.001)	Loss 0.1737 (0.1940)	Prec@1 94.531 (93.107)
Test: [0/79]	Time 0.264 (0.264)	Loss 0.1081 (0.1081)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.156 (0.168)	Loss 0.2208 (0.2432)	Prec@1 92.188 (92.572)
 * Prec@1 92.510
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [227][0/391]	Time 0.414 (0.414)	Data 0.156 (0.156)	Loss 0.1410 (0.1410)	Prec@1 94.531 (94.531)
Epoch: [227][60/391]	Time 0.171 (0.180)	Data 0.000 (0.003)	Loss 0.3180 (0.1969)	Prec@1 90.625 (93.366)
Epoch: [227][120/391]	Time 0.167 (0.186)	Data 0.000 (0.001)	Loss 0.2703 (0.1989)	Prec@1 88.281 (93.259)
Epoch: [227][180/391]	Time 0.167 (0.188)	Data 0.000 (0.001)	Loss 0.2018 (0.1987)	Prec@1 92.969 (93.236)
Epoch: [227][240/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.1803 (0.1984)	Prec@1 91.406 (93.205)
Epoch: [227][300/391]	Time 0.243 (0.189)	Data 0.000 (0.001)	Loss 0.2013 (0.1977)	Prec@1 96.094 (93.213)
Epoch: [227][360/391]	Time 0.245 (0.186)	Data 0.000 (0.001)	Loss 0.1007 (0.1975)	Prec@1 97.656 (93.174)
Test: [0/79]	Time 0.270 (0.270)	Loss 0.1073 (0.1073)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.229 (0.172)	Loss 0.2096 (0.2430)	Prec@1 91.406 (92.380)
 * Prec@1 92.400
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [228][0/391]	Time 0.328 (0.328)	Data 0.142 (0.142)	Loss 0.0963 (0.0963)	Prec@1 96.094 (96.094)
Epoch: [228][60/391]	Time 0.242 (0.187)	Data 0.000 (0.002)	Loss 0.2255 (0.1796)	Prec@1 90.625 (93.494)
Epoch: [228][120/391]	Time 0.167 (0.187)	Data 0.000 (0.001)	Loss 0.2921 (0.1836)	Prec@1 88.281 (93.427)
Epoch: [228][180/391]	Time 0.168 (0.187)	Data 0.000 (0.001)	Loss 0.2036 (0.1907)	Prec@1 89.844 (93.159)
Epoch: [228][240/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.2020 (0.1926)	Prec@1 91.406 (93.196)
Epoch: [228][300/391]	Time 0.236 (0.190)	Data 0.000 (0.001)	Loss 0.1426 (0.1940)	Prec@1 93.750 (93.195)
Epoch: [228][360/391]	Time 0.241 (0.187)	Data 0.000 (0.001)	Loss 0.1405 (0.1943)	Prec@1 93.750 (93.241)
Test: [0/79]	Time 0.241 (0.241)	Loss 0.1166 (0.1166)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.171 (0.176)	Loss 0.2148 (0.2432)	Prec@1 92.188 (92.520)
 * Prec@1 92.490
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [229][0/391]	Time 0.310 (0.310)	Data 0.127 (0.127)	Loss 0.1849 (0.1849)	Prec@1 92.969 (92.969)
Epoch: [229][60/391]	Time 0.168 (0.189)	Data 0.000 (0.002)	Loss 0.1625 (0.1945)	Prec@1 94.531 (93.302)
Epoch: [229][120/391]	Time 0.240 (0.187)	Data 0.000 (0.001)	Loss 0.2668 (0.1902)	Prec@1 91.406 (93.518)
Epoch: [229][180/391]	Time 0.241 (0.183)	Data 0.000 (0.001)	Loss 0.1552 (0.1934)	Prec@1 93.750 (93.323)
Epoch: [229][240/391]	Time 0.170 (0.184)	Data 0.000 (0.001)	Loss 0.1493 (0.1919)	Prec@1 95.312 (93.410)
Epoch: [229][300/391]	Time 0.165 (0.186)	Data 0.000 (0.001)	Loss 0.1902 (0.1891)	Prec@1 91.406 (93.524)
Epoch: [229][360/391]	Time 0.165 (0.186)	Data 0.000 (0.000)	Loss 0.2187 (0.1912)	Prec@1 90.625 (93.402)
Test: [0/79]	Time 0.253 (0.253)	Loss 0.1149 (0.1149)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.155 (0.204)	Loss 0.2063 (0.2445)	Prec@1 92.969 (92.482)
 * Prec@1 92.470
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [230][0/391]	Time 0.321 (0.321)	Data 0.143 (0.143)	Loss 0.1431 (0.1431)	Prec@1 95.312 (95.312)
Epoch: [230][60/391]	Time 0.166 (0.200)	Data 0.000 (0.003)	Loss 0.2312 (0.1883)	Prec@1 91.406 (93.507)
Epoch: [230][120/391]	Time 0.166 (0.193)	Data 0.000 (0.001)	Loss 0.1349 (0.1925)	Prec@1 95.312 (93.046)
Epoch: [230][180/391]	Time 0.246 (0.187)	Data 0.000 (0.001)	Loss 0.2413 (0.1931)	Prec@1 90.625 (93.029)
Epoch: [230][240/391]	Time 0.167 (0.187)	Data 0.000 (0.001)	Loss 0.1423 (0.1930)	Prec@1 94.531 (93.043)
Epoch: [230][300/391]	Time 0.167 (0.188)	Data 0.000 (0.001)	Loss 0.3168 (0.1932)	Prec@1 90.625 (93.179)
Epoch: [230][360/391]	Time 0.166 (0.188)	Data 0.000 (0.001)	Loss 0.2251 (0.1930)	Prec@1 92.188 (93.138)
Test: [0/79]	Time 0.273 (0.273)	Loss 0.1165 (0.1165)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.155 (0.174)	Loss 0.2137 (0.2433)	Prec@1 92.188 (92.636)
 * Prec@1 92.570
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [231][0/391]	Time 0.422 (0.422)	Data 0.165 (0.165)	Loss 0.1462 (0.1462)	Prec@1 95.312 (95.312)
Epoch: [231][60/391]	Time 0.172 (0.185)	Data 0.000 (0.003)	Loss 0.2625 (0.1825)	Prec@1 87.500 (93.750)
Epoch: [231][120/391]	Time 0.167 (0.189)	Data 0.000 (0.002)	Loss 0.2686 (0.1890)	Prec@1 89.844 (93.401)
Epoch: [231][180/391]	Time 0.168 (0.186)	Data 0.000 (0.001)	Loss 0.2554 (0.1898)	Prec@1 92.969 (93.297)
Epoch: [231][240/391]	Time 0.169 (0.188)	Data 0.000 (0.001)	Loss 0.2442 (0.1896)	Prec@1 92.188 (93.335)
Epoch: [231][300/391]	Time 0.166 (0.188)	Data 0.000 (0.001)	Loss 0.2223 (0.1932)	Prec@1 91.406 (93.166)
Epoch: [231][360/391]	Time 0.247 (0.187)	Data 0.000 (0.001)	Loss 0.1931 (0.1936)	Prec@1 92.969 (93.138)
Test: [0/79]	Time 0.253 (0.253)	Loss 0.1165 (0.1165)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.155 (0.171)	Loss 0.2107 (0.2400)	Prec@1 92.188 (92.649)
 * Prec@1 92.620
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [232][0/391]	Time 0.295 (0.295)	Data 0.120 (0.120)	Loss 0.1582 (0.1582)	Prec@1 95.312 (95.312)
Epoch: [232][60/391]	Time 0.168 (0.193)	Data 0.000 (0.002)	Loss 0.2461 (0.1903)	Prec@1 92.969 (93.122)
Epoch: [232][120/391]	Time 0.168 (0.187)	Data 0.000 (0.001)	Loss 0.1978 (0.1929)	Prec@1 89.844 (93.007)
Epoch: [232][180/391]	Time 0.242 (0.184)	Data 0.000 (0.001)	Loss 0.1979 (0.1959)	Prec@1 91.406 (92.986)
Epoch: [232][240/391]	Time 0.168 (0.184)	Data 0.000 (0.001)	Loss 0.1978 (0.1950)	Prec@1 92.969 (93.060)
Epoch: [232][300/391]	Time 0.166 (0.184)	Data 0.000 (0.001)	Loss 0.1481 (0.1953)	Prec@1 92.969 (93.008)
Epoch: [232][360/391]	Time 0.168 (0.190)	Data 0.000 (0.000)	Loss 0.1771 (0.1951)	Prec@1 92.188 (93.064)
Test: [0/79]	Time 0.257 (0.257)	Loss 0.1176 (0.1176)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.156 (0.181)	Loss 0.2180 (0.2421)	Prec@1 91.406 (92.597)
 * Prec@1 92.520
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [233][0/391]	Time 0.410 (0.410)	Data 0.235 (0.235)	Loss 0.1748 (0.1748)	Prec@1 92.969 (92.969)
Epoch: [233][60/391]	Time 0.168 (0.188)	Data 0.000 (0.004)	Loss 0.1939 (0.1970)	Prec@1 92.969 (92.982)
Epoch: [233][120/391]	Time 0.166 (0.188)	Data 0.000 (0.002)	Loss 0.2919 (0.2017)	Prec@1 87.500 (92.840)
Epoch: [233][180/391]	Time 0.168 (0.190)	Data 0.000 (0.001)	Loss 0.2059 (0.2001)	Prec@1 93.750 (92.973)
Epoch: [233][240/391]	Time 0.240 (0.187)	Data 0.000 (0.001)	Loss 0.1515 (0.1989)	Prec@1 93.750 (93.014)
Epoch: [233][300/391]	Time 0.166 (0.184)	Data 0.000 (0.001)	Loss 0.2773 (0.1971)	Prec@1 89.844 (93.065)
Epoch: [233][360/391]	Time 0.166 (0.184)	Data 0.000 (0.001)	Loss 0.2390 (0.1966)	Prec@1 91.406 (93.064)
Test: [0/79]	Time 0.277 (0.277)	Loss 0.1086 (0.1086)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.228 (0.174)	Loss 0.1982 (0.2436)	Prec@1 92.188 (92.431)
 * Prec@1 92.450
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [234][0/391]	Time 0.316 (0.316)	Data 0.139 (0.139)	Loss 0.2496 (0.2496)	Prec@1 91.406 (91.406)
Epoch: [234][60/391]	Time 0.170 (0.189)	Data 0.000 (0.002)	Loss 0.1607 (0.1902)	Prec@1 92.969 (93.366)
Epoch: [234][120/391]	Time 0.242 (0.184)	Data 0.000 (0.001)	Loss 0.1118 (0.1942)	Prec@1 96.094 (93.124)
Epoch: [234][180/391]	Time 0.168 (0.180)	Data 0.000 (0.001)	Loss 0.1203 (0.1923)	Prec@1 94.531 (93.180)
Epoch: [234][240/391]	Time 0.168 (0.182)	Data 0.000 (0.001)	Loss 0.1751 (0.1951)	Prec@1 92.969 (93.095)
Epoch: [234][300/391]	Time 0.168 (0.184)	Data 0.000 (0.001)	Loss 0.1861 (0.1932)	Prec@1 95.312 (93.197)
Epoch: [234][360/391]	Time 0.169 (0.186)	Data 0.000 (0.001)	Loss 0.1424 (0.1935)	Prec@1 94.531 (93.133)
Test: [0/79]	Time 0.278 (0.278)	Loss 0.1174 (0.1174)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.155 (0.177)	Loss 0.1901 (0.2405)	Prec@1 93.750 (92.725)
 * Prec@1 92.680
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [235][0/391]	Time 0.346 (0.346)	Data 0.163 (0.163)	Loss 0.1423 (0.1423)	Prec@1 94.531 (94.531)
Epoch: [235][60/391]	Time 0.169 (0.193)	Data 0.000 (0.003)	Loss 0.1084 (0.1890)	Prec@1 97.656 (93.507)
Epoch: [235][120/391]	Time 0.171 (0.192)	Data 0.000 (0.002)	Loss 0.2465 (0.1926)	Prec@1 92.188 (93.343)
Epoch: [235][180/391]	Time 0.245 (0.193)	Data 0.000 (0.001)	Loss 0.1092 (0.1890)	Prec@1 96.875 (93.418)
Epoch: [235][240/391]	Time 0.168 (0.189)	Data 0.000 (0.001)	Loss 0.2008 (0.1903)	Prec@1 91.406 (93.257)
Epoch: [235][300/391]	Time 0.168 (0.189)	Data 0.000 (0.001)	Loss 0.2402 (0.1890)	Prec@1 92.969 (93.298)
Epoch: [235][360/391]	Time 0.166 (0.191)	Data 0.000 (0.001)	Loss 0.1955 (0.1892)	Prec@1 92.188 (93.291)
Test: [0/79]	Time 0.272 (0.272)	Loss 0.1150 (0.1150)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.156 (0.195)	Loss 0.2096 (0.2399)	Prec@1 93.750 (92.674)
 * Prec@1 92.640
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [236][0/391]	Time 0.280 (0.280)	Data 0.098 (0.098)	Loss 0.1919 (0.1919)	Prec@1 92.188 (92.188)
Epoch: [236][60/391]	Time 0.168 (0.190)	Data 0.000 (0.002)	Loss 0.1455 (0.1942)	Prec@1 95.312 (93.289)
Epoch: [236][120/391]	Time 0.166 (0.187)	Data 0.000 (0.001)	Loss 0.1415 (0.1861)	Prec@1 95.312 (93.253)
Epoch: [236][180/391]	Time 0.166 (0.187)	Data 0.000 (0.001)	Loss 0.1297 (0.1870)	Prec@1 94.531 (93.176)
Epoch: [236][240/391]	Time 0.241 (0.187)	Data 0.000 (0.001)	Loss 0.2622 (0.1878)	Prec@1 90.625 (93.241)
Epoch: [236][300/391]	Time 0.241 (0.184)	Data 0.000 (0.000)	Loss 0.1388 (0.1893)	Prec@1 95.312 (93.215)
Epoch: [236][360/391]	Time 0.244 (0.193)	Data 0.000 (0.000)	Loss 0.1813 (0.1908)	Prec@1 93.750 (93.185)
Test: [0/79]	Time 0.267 (0.267)	Loss 0.1197 (0.1197)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.229 (0.162)	Loss 0.1911 (0.2392)	Prec@1 92.188 (92.610)
 * Prec@1 92.560
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [237][0/391]	Time 0.300 (0.300)	Data 0.117 (0.117)	Loss 0.1888 (0.1888)	Prec@1 94.531 (94.531)
Epoch: [237][60/391]	Time 0.245 (0.180)	Data 0.000 (0.002)	Loss 0.1629 (0.2016)	Prec@1 96.094 (93.110)
Epoch: [237][120/391]	Time 0.168 (0.182)	Data 0.000 (0.001)	Loss 0.1162 (0.1994)	Prec@1 96.094 (93.195)
Epoch: [237][180/391]	Time 0.171 (0.188)	Data 0.000 (0.001)	Loss 0.1995 (0.1994)	Prec@1 93.750 (93.124)
Epoch: [237][240/391]	Time 0.168 (0.186)	Data 0.000 (0.001)	Loss 0.2318 (0.1971)	Prec@1 89.844 (93.163)
Epoch: [237][300/391]	Time 0.168 (0.188)	Data 0.000 (0.001)	Loss 0.1311 (0.1978)	Prec@1 95.312 (93.169)
Epoch: [237][360/391]	Time 0.219 (0.188)	Data 0.000 (0.000)	Loss 0.1632 (0.1980)	Prec@1 95.312 (93.129)
Test: [0/79]	Time 0.249 (0.249)	Loss 0.1020 (0.1020)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.156 (0.183)	Loss 0.1982 (0.2416)	Prec@1 92.188 (92.623)
 * Prec@1 92.640
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [238][0/391]	Time 0.336 (0.336)	Data 0.158 (0.158)	Loss 0.2453 (0.2453)	Prec@1 90.625 (90.625)
Epoch: [238][60/391]	Time 0.166 (0.196)	Data 0.000 (0.003)	Loss 0.2553 (0.1811)	Prec@1 92.188 (93.507)
Epoch: [238][120/391]	Time 0.166 (0.187)	Data 0.000 (0.002)	Loss 0.2309 (0.1868)	Prec@1 91.406 (93.195)
Epoch: [238][180/391]	Time 0.240 (0.185)	Data 0.000 (0.001)	Loss 0.1798 (0.1908)	Prec@1 92.969 (93.033)
Epoch: [238][240/391]	Time 0.166 (0.192)	Data 0.000 (0.001)	Loss 0.1792 (0.1919)	Prec@1 94.531 (93.076)
Epoch: [238][300/391]	Time 0.167 (0.190)	Data 0.000 (0.001)	Loss 0.2337 (0.1904)	Prec@1 92.969 (93.130)
Epoch: [238][360/391]	Time 0.240 (0.190)	Data 0.000 (0.001)	Loss 0.2193 (0.1920)	Prec@1 91.406 (93.125)
Test: [0/79]	Time 0.253 (0.253)	Loss 0.1181 (0.1181)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.155 (0.170)	Loss 0.2019 (0.2429)	Prec@1 92.969 (92.431)
 * Prec@1 92.480
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [239][0/391]	Time 0.324 (0.324)	Data 0.140 (0.140)	Loss 0.1896 (0.1896)	Prec@1 91.406 (91.406)
Epoch: [239][60/391]	Time 0.167 (0.180)	Data 0.000 (0.002)	Loss 0.1818 (0.1894)	Prec@1 96.094 (93.327)
Epoch: [239][120/391]	Time 0.168 (0.183)	Data 0.000 (0.001)	Loss 0.1443 (0.1933)	Prec@1 96.094 (93.098)
Epoch: [239][180/391]	Time 0.168 (0.184)	Data 0.000 (0.001)	Loss 0.2533 (0.1956)	Prec@1 92.188 (93.064)
Epoch: [239][240/391]	Time 0.168 (0.184)	Data 0.000 (0.001)	Loss 0.1908 (0.1948)	Prec@1 93.750 (93.089)
Epoch: [239][300/391]	Time 0.243 (0.183)	Data 0.000 (0.001)	Loss 0.2314 (0.1930)	Prec@1 92.969 (93.124)
Epoch: [239][360/391]	Time 0.244 (0.183)	Data 0.000 (0.001)	Loss 0.2162 (0.1937)	Prec@1 89.844 (93.114)
Test: [0/79]	Time 0.255 (0.255)	Loss 0.1298 (0.1298)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.195 (0.174)	Loss 0.2063 (0.2418)	Prec@1 92.188 (92.623)
 * Prec@1 92.550
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [240][0/391]	Time 0.295 (0.295)	Data 0.117 (0.117)	Loss 0.1916 (0.1916)	Prec@1 94.531 (94.531)
Epoch: [240][60/391]	Time 0.168 (0.194)	Data 0.000 (0.002)	Loss 0.1720 (0.1899)	Prec@1 92.188 (93.507)
Epoch: [240][120/391]	Time 0.242 (0.187)	Data 0.000 (0.001)	Loss 0.2082 (0.1924)	Prec@1 89.844 (93.221)
Epoch: [240][180/391]	Time 0.167 (0.189)	Data 0.000 (0.001)	Loss 0.2123 (0.1913)	Prec@1 92.188 (93.305)
Epoch: [240][240/391]	Time 0.166 (0.190)	Data 0.000 (0.001)	Loss 0.1248 (0.1942)	Prec@1 94.531 (93.257)
Epoch: [240][300/391]	Time 0.238 (0.193)	Data 0.000 (0.001)	Loss 0.2369 (0.1931)	Prec@1 92.188 (93.319)
Epoch: [240][360/391]	Time 0.241 (0.190)	Data 0.000 (0.000)	Loss 0.1777 (0.1923)	Prec@1 93.750 (93.315)
Test: [0/79]	Time 0.258 (0.258)	Loss 0.1261 (0.1261)	Prec@1 94.531 (94.531)
Test: [60/79]	Time 0.229 (0.174)	Loss 0.2029 (0.2436)	Prec@1 91.406 (92.585)
 * Prec@1 92.590
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [241][0/391]	Time 0.337 (0.337)	Data 0.158 (0.158)	Loss 0.2785 (0.2785)	Prec@1 91.406 (91.406)
Epoch: [241][60/391]	Time 0.167 (0.184)	Data 0.000 (0.003)	Loss 0.1028 (0.2053)	Prec@1 96.875 (92.738)
Epoch: [241][120/391]	Time 0.167 (0.183)	Data 0.000 (0.001)	Loss 0.2108 (0.1963)	Prec@1 92.188 (93.156)
Epoch: [241][180/391]	Time 0.240 (0.181)	Data 0.000 (0.001)	Loss 0.1948 (0.1970)	Prec@1 92.188 (93.111)
Epoch: [241][240/391]	Time 0.168 (0.182)	Data 0.000 (0.001)	Loss 0.2376 (0.1966)	Prec@1 91.406 (93.121)
Epoch: [241][300/391]	Time 0.171 (0.183)	Data 0.000 (0.001)	Loss 0.2046 (0.1958)	Prec@1 94.531 (93.202)
Epoch: [241][360/391]	Time 0.171 (0.185)	Data 0.000 (0.001)	Loss 0.1748 (0.1940)	Prec@1 94.531 (93.231)
Test: [0/79]	Time 0.256 (0.256)	Loss 0.1117 (0.1117)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.155 (0.185)	Loss 0.2045 (0.2471)	Prec@1 90.625 (92.649)
 * Prec@1 92.570
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [242][0/391]	Time 0.327 (0.327)	Data 0.140 (0.140)	Loss 0.2112 (0.2112)	Prec@1 94.531 (94.531)
Epoch: [242][60/391]	Time 0.167 (0.190)	Data 0.000 (0.002)	Loss 0.1866 (0.1889)	Prec@1 94.531 (93.519)
Epoch: [242][120/391]	Time 0.171 (0.192)	Data 0.000 (0.001)	Loss 0.1758 (0.1933)	Prec@1 92.969 (93.227)
Epoch: [242][180/391]	Time 0.168 (0.189)	Data 0.000 (0.001)	Loss 0.1664 (0.1898)	Prec@1 92.969 (93.284)
Epoch: [242][240/391]	Time 0.168 (0.187)	Data 0.000 (0.001)	Loss 0.1830 (0.1893)	Prec@1 94.531 (93.355)
Epoch: [242][300/391]	Time 0.246 (0.187)	Data 0.000 (0.001)	Loss 0.2047 (0.1902)	Prec@1 94.531 (93.262)
Epoch: [242][360/391]	Time 0.171 (0.186)	Data 0.000 (0.001)	Loss 0.2235 (0.1896)	Prec@1 93.750 (93.298)
Test: [0/79]	Time 0.289 (0.289)	Loss 0.1291 (0.1291)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.155 (0.174)	Loss 0.2141 (0.2465)	Prec@1 92.188 (92.559)
 * Prec@1 92.540
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [243][0/391]	Time 0.325 (0.325)	Data 0.146 (0.146)	Loss 0.1968 (0.1968)	Prec@1 91.406 (91.406)
Epoch: [243][60/391]	Time 0.167 (0.199)	Data 0.000 (0.003)	Loss 0.1928 (0.1918)	Prec@1 92.188 (93.020)
Epoch: [243][120/391]	Time 0.242 (0.191)	Data 0.000 (0.001)	Loss 0.2236 (0.1950)	Prec@1 91.406 (93.137)
Epoch: [243][180/391]	Time 0.240 (0.186)	Data 0.000 (0.001)	Loss 0.1779 (0.1910)	Prec@1 92.188 (93.305)
Epoch: [243][240/391]	Time 0.172 (0.185)	Data 0.000 (0.001)	Loss 0.1182 (0.1873)	Prec@1 96.094 (93.432)
Epoch: [243][300/391]	Time 0.170 (0.186)	Data 0.000 (0.001)	Loss 0.1862 (0.1879)	Prec@1 94.531 (93.418)
Epoch: [243][360/391]	Time 0.167 (0.187)	Data 0.000 (0.001)	Loss 0.2692 (0.1894)	Prec@1 89.062 (93.339)
Test: [0/79]	Time 0.340 (0.340)	Loss 0.1270 (0.1270)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.155 (0.189)	Loss 0.2146 (0.2446)	Prec@1 92.188 (92.469)
 * Prec@1 92.520
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [244][0/391]	Time 0.330 (0.330)	Data 0.155 (0.155)	Loss 0.2157 (0.2157)	Prec@1 92.188 (92.188)
Epoch: [244][60/391]	Time 0.167 (0.190)	Data 0.000 (0.003)	Loss 0.2524 (0.1922)	Prec@1 90.625 (93.225)
Epoch: [244][120/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.1326 (0.1864)	Prec@1 96.094 (93.447)
Epoch: [244][180/391]	Time 0.166 (0.185)	Data 0.000 (0.001)	Loss 0.2136 (0.1853)	Prec@1 95.312 (93.452)
Epoch: [244][240/391]	Time 0.166 (0.184)	Data 0.000 (0.001)	Loss 0.1467 (0.1844)	Prec@1 92.969 (93.533)
Epoch: [244][300/391]	Time 0.239 (0.184)	Data 0.000 (0.001)	Loss 0.1875 (0.1850)	Prec@1 92.188 (93.506)
Epoch: [244][360/391]	Time 0.261 (0.182)	Data 0.000 (0.001)	Loss 0.2529 (0.1857)	Prec@1 91.406 (93.514)
Test: [0/79]	Time 0.266 (0.266)	Loss 0.1439 (0.1439)	Prec@1 93.750 (93.750)
Test: [60/79]	Time 0.230 (0.165)	Loss 0.2125 (0.2446)	Prec@1 91.406 (92.508)
 * Prec@1 92.560
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [245][0/391]	Time 0.283 (0.283)	Data 0.104 (0.104)	Loss 0.2049 (0.2049)	Prec@1 92.188 (92.188)
Epoch: [245][60/391]	Time 0.241 (0.175)	Data 0.000 (0.002)	Loss 0.2226 (0.1974)	Prec@1 90.625 (92.802)
Epoch: [245][120/391]	Time 0.166 (0.174)	Data 0.000 (0.001)	Loss 0.1540 (0.1943)	Prec@1 95.312 (92.949)
Epoch: [245][180/391]	Time 0.167 (0.177)	Data 0.000 (0.001)	Loss 0.1757 (0.1928)	Prec@1 93.750 (93.081)
Epoch: [245][240/391]	Time 0.167 (0.178)	Data 0.000 (0.001)	Loss 0.1454 (0.1917)	Prec@1 96.094 (93.141)
Epoch: [245][300/391]	Time 0.167 (0.180)	Data 0.000 (0.000)	Loss 0.2857 (0.1925)	Prec@1 89.844 (93.117)
Epoch: [245][360/391]	Time 0.171 (0.183)	Data 0.000 (0.000)	Loss 0.1432 (0.1917)	Prec@1 96.875 (93.185)
Test: [0/79]	Time 0.240 (0.240)	Loss 0.1249 (0.1249)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.155 (0.171)	Loss 0.2158 (0.2457)	Prec@1 92.188 (92.725)
 * Prec@1 92.630
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [246][0/391]	Time 0.287 (0.287)	Data 0.107 (0.107)	Loss 0.2194 (0.2194)	Prec@1 92.188 (92.188)
Epoch: [246][60/391]	Time 0.168 (0.196)	Data 0.000 (0.002)	Loss 0.1981 (0.1957)	Prec@1 91.406 (93.084)
Epoch: [246][120/391]	Time 0.171 (0.193)	Data 0.000 (0.001)	Loss 0.2420 (0.1949)	Prec@1 89.844 (93.059)
Epoch: [246][180/391]	Time 0.246 (0.190)	Data 0.000 (0.001)	Loss 0.1816 (0.1953)	Prec@1 93.750 (93.033)
Epoch: [246][240/391]	Time 0.168 (0.186)	Data 0.000 (0.001)	Loss 0.1882 (0.1917)	Prec@1 94.531 (93.283)
Epoch: [246][300/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.0882 (0.1889)	Prec@1 97.656 (93.332)
Epoch: [246][360/391]	Time 0.168 (0.189)	Data 0.000 (0.000)	Loss 0.1961 (0.1912)	Prec@1 94.531 (93.222)
Test: [0/79]	Time 0.264 (0.264)	Loss 0.1247 (0.1247)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.156 (0.173)	Loss 0.2041 (0.2437)	Prec@1 92.969 (92.700)
 * Prec@1 92.620
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [247][0/391]	Time 0.307 (0.307)	Data 0.132 (0.132)	Loss 0.1276 (0.1276)	Prec@1 95.312 (95.312)
Epoch: [247][60/391]	Time 0.167 (0.210)	Data 0.000 (0.002)	Loss 0.1619 (0.1886)	Prec@1 93.750 (93.238)
Epoch: [247][120/391]	Time 0.168 (0.200)	Data 0.000 (0.001)	Loss 0.1531 (0.1872)	Prec@1 93.750 (93.188)
Epoch: [247][180/391]	Time 0.242 (0.196)	Data 0.000 (0.001)	Loss 0.2635 (0.1894)	Prec@1 90.625 (93.128)
Epoch: [247][240/391]	Time 0.170 (0.192)	Data 0.000 (0.001)	Loss 0.1959 (0.1877)	Prec@1 92.969 (93.173)
Epoch: [247][300/391]	Time 0.167 (0.190)	Data 0.000 (0.001)	Loss 0.3040 (0.1880)	Prec@1 88.281 (93.184)
Epoch: [247][360/391]	Time 0.168 (0.189)	Data 0.000 (0.001)	Loss 0.1855 (0.1877)	Prec@1 96.094 (93.213)
Test: [0/79]	Time 0.312 (0.312)	Loss 0.1166 (0.1166)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.155 (0.172)	Loss 0.2008 (0.2431)	Prec@1 92.188 (92.546)
 * Prec@1 92.560
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [248][0/391]	Time 0.403 (0.403)	Data 0.150 (0.150)	Loss 0.3069 (0.3069)	Prec@1 89.062 (89.062)
Epoch: [248][60/391]	Time 0.167 (0.184)	Data 0.000 (0.003)	Loss 0.1955 (0.1908)	Prec@1 94.531 (93.379)
Epoch: [248][120/391]	Time 0.169 (0.183)	Data 0.000 (0.001)	Loss 0.2575 (0.1909)	Prec@1 89.062 (93.169)
Epoch: [248][180/391]	Time 0.167 (0.183)	Data 0.000 (0.001)	Loss 0.1973 (0.1900)	Prec@1 90.625 (93.202)
Epoch: [248][240/391]	Time 0.170 (0.186)	Data 0.000 (0.001)	Loss 0.2402 (0.1877)	Prec@1 91.406 (93.377)
Epoch: [248][300/391]	Time 0.169 (0.187)	Data 0.000 (0.001)	Loss 0.2552 (0.1877)	Prec@1 91.406 (93.423)
Epoch: [248][360/391]	Time 0.239 (0.185)	Data 0.000 (0.001)	Loss 0.1974 (0.1890)	Prec@1 92.188 (93.367)
Test: [0/79]	Time 0.266 (0.266)	Loss 0.1131 (0.1131)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.216 (0.189)	Loss 0.2029 (0.2464)	Prec@1 91.406 (92.623)
 * Prec@1 92.640
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [249][0/391]	Time 0.342 (0.342)	Data 0.160 (0.160)	Loss 0.2367 (0.2367)	Prec@1 93.750 (93.750)
Epoch: [249][60/391]	Time 0.167 (0.185)	Data 0.000 (0.003)	Loss 0.1067 (0.1878)	Prec@1 96.094 (93.238)
Epoch: [249][120/391]	Time 0.169 (0.183)	Data 0.000 (0.001)	Loss 0.2013 (0.1899)	Prec@1 93.750 (93.240)
Epoch: [249][180/391]	Time 0.237 (0.182)	Data 0.000 (0.001)	Loss 0.1275 (0.1890)	Prec@1 96.094 (93.314)
Epoch: [249][240/391]	Time 0.238 (0.179)	Data 0.000 (0.001)	Loss 0.1352 (0.1907)	Prec@1 96.094 (93.251)
Epoch: [249][300/391]	Time 0.166 (0.179)	Data 0.000 (0.001)	Loss 0.2327 (0.1920)	Prec@1 88.281 (93.202)
Epoch: [249][360/391]	Time 0.167 (0.179)	Data 0.000 (0.001)	Loss 0.1673 (0.1915)	Prec@1 96.094 (93.228)
Test: [0/79]	Time 0.230 (0.230)	Loss 0.1231 (0.1231)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.230 (0.163)	Loss 0.1908 (0.2419)	Prec@1 92.969 (92.610)
 * Prec@1 92.590
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [250][0/391]	Time 0.333 (0.333)	Data 0.155 (0.155)	Loss 0.1737 (0.1737)	Prec@1 92.969 (92.969)
Epoch: [250][60/391]	Time 0.171 (0.189)	Data 0.000 (0.003)	Loss 0.2718 (0.1998)	Prec@1 89.844 (92.713)
Epoch: [250][120/391]	Time 0.245 (0.182)	Data 0.000 (0.001)	Loss 0.1629 (0.1973)	Prec@1 93.750 (92.962)
Epoch: [250][180/391]	Time 0.166 (0.181)	Data 0.000 (0.001)	Loss 0.2034 (0.1951)	Prec@1 92.969 (93.029)
Epoch: [250][240/391]	Time 0.166 (0.185)	Data 0.000 (0.001)	Loss 0.2379 (0.1962)	Prec@1 92.969 (93.014)
Epoch: [250][300/391]	Time 0.171 (0.185)	Data 0.000 (0.001)	Loss 0.1397 (0.1937)	Prec@1 93.750 (93.104)
Epoch: [250][360/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.1489 (0.1913)	Prec@1 96.094 (93.157)
Test: [0/79]	Time 0.265 (0.265)	Loss 0.1248 (0.1248)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.155 (0.173)	Loss 0.2099 (0.2433)	Prec@1 92.969 (92.533)
 * Prec@1 92.530
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [251][0/391]	Time 0.316 (0.316)	Data 0.136 (0.136)	Loss 0.1627 (0.1627)	Prec@1 93.750 (93.750)
Epoch: [251][60/391]	Time 0.167 (0.188)	Data 0.000 (0.002)	Loss 0.2193 (0.1944)	Prec@1 90.625 (93.302)
Epoch: [251][120/391]	Time 0.167 (0.200)	Data 0.000 (0.001)	Loss 0.1509 (0.1936)	Prec@1 93.750 (93.221)
Epoch: [251][180/391]	Time 0.242 (0.194)	Data 0.000 (0.001)	Loss 0.1615 (0.1886)	Prec@1 94.531 (93.409)
Epoch: [251][240/391]	Time 0.167 (0.190)	Data 0.000 (0.001)	Loss 0.1444 (0.1875)	Prec@1 95.312 (93.439)
Epoch: [251][300/391]	Time 0.167 (0.189)	Data 0.000 (0.001)	Loss 0.1399 (0.1886)	Prec@1 96.875 (93.426)
Epoch: [251][360/391]	Time 0.166 (0.189)	Data 0.000 (0.001)	Loss 0.3372 (0.1898)	Prec@1 89.844 (93.358)
Test: [0/79]	Time 0.249 (0.249)	Loss 0.1180 (0.1180)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.155 (0.178)	Loss 0.2046 (0.2450)	Prec@1 92.188 (92.585)
 * Prec@1 92.520
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [252][0/391]	Time 0.285 (0.285)	Data 0.103 (0.103)	Loss 0.1094 (0.1094)	Prec@1 96.094 (96.094)
Epoch: [252][60/391]	Time 0.167 (0.180)	Data 0.000 (0.002)	Loss 0.1630 (0.1952)	Prec@1 93.750 (93.174)
Epoch: [252][120/391]	Time 0.174 (0.198)	Data 0.000 (0.001)	Loss 0.2479 (0.1922)	Prec@1 90.625 (93.259)
Epoch: [252][180/391]	Time 0.170 (0.193)	Data 0.000 (0.001)	Loss 0.1283 (0.1899)	Prec@1 96.094 (93.362)
Epoch: [252][240/391]	Time 0.240 (0.189)	Data 0.000 (0.001)	Loss 0.2173 (0.1880)	Prec@1 92.188 (93.406)
Epoch: [252][300/391]	Time 0.240 (0.186)	Data 0.000 (0.001)	Loss 0.2174 (0.1887)	Prec@1 92.188 (93.413)
Epoch: [252][360/391]	Time 0.168 (0.187)	Data 0.000 (0.000)	Loss 0.2208 (0.1896)	Prec@1 87.500 (93.328)
Test: [0/79]	Time 0.265 (0.265)	Loss 0.1331 (0.1331)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.229 (0.164)	Loss 0.2114 (0.2456)	Prec@1 92.188 (92.508)
 * Prec@1 92.530
Best Accuracy:92.69
current lr 1.00000e-03
Epoch: [253][0/391]	Time 0.300 (0.300)	Data 0.124 (0.124)	Loss 0.2464 (0.2464)	Prec@1 89.062 (89.062)
Epoch: [253][60/391]	Time 0.167 (0.190)	Data 0.000 (0.002)	Loss 0.1533 (0.1952)	Prec@1 93.750 (93.058)
Epoch: [253][120/391]	Time 0.238 (0.181)	Data 0.000 (0.001)	Loss 0.1143 (0.1901)	Prec@1 95.312 (93.395)
Epoch: [253][180/391]	Time 0.169 (0.181)	Data 0.000 (0.001)	Loss 0.3102 (0.1914)	Prec@1 90.625 (93.297)
Epoch: [253][240/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.2015 (0.1895)	Prec@1 93.750 (93.345)
Epoch: [253][300/391]	Time 0.168 (0.184)	Data 0.000 (0.001)	Loss 0.1905 (0.1898)	Prec@1 93.750 (93.311)
Epoch: [253][360/391]	Time 0.168 (0.184)	Data 0.000 (0.001)	Loss 0.2314 (0.1883)	Prec@1 92.188 (93.332)
Test: [0/79]	Time 0.236 (0.236)	Loss 0.1241 (0.1241)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.156 (0.169)	Loss 0.2164 (0.2420)	Prec@1 92.969 (92.777)
 * Prec@1 92.710
Best Accuracy:92.71
current lr 1.00000e-03
Epoch: [254][0/391]	Time 0.273 (0.273)	Data 0.099 (0.099)	Loss 0.1871 (0.1871)	Prec@1 92.969 (92.969)
Epoch: [254][60/391]	Time 0.167 (0.187)	Data 0.000 (0.002)	Loss 0.2272 (0.2018)	Prec@1 91.406 (92.930)
Epoch: [254][120/391]	Time 0.167 (0.185)	Data 0.000 (0.001)	Loss 0.1356 (0.1960)	Prec@1 95.312 (93.066)
Epoch: [254][180/391]	Time 0.168 (0.184)	Data 0.000 (0.001)	Loss 0.1571 (0.1961)	Prec@1 96.094 (93.107)
Epoch: [254][240/391]	Time 0.167 (0.184)	Data 0.000 (0.001)	Loss 0.1998 (0.1936)	Prec@1 91.406 (93.173)
Epoch: [254][300/391]	Time 0.228 (0.184)	Data 0.000 (0.000)	Loss 0.1639 (0.1929)	Prec@1 93.750 (93.169)
Epoch: [254][360/391]	Time 0.260 (0.181)	Data 0.000 (0.000)	Loss 0.1277 (0.1943)	Prec@1 95.312 (93.092)
Test: [0/79]	Time 0.266 (0.266)	Loss 0.1252 (0.1252)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.155 (0.177)	Loss 0.2152 (0.2436)	Prec@1 92.188 (92.559)
 * Prec@1 92.580
Best Accuracy:92.71
current lr 1.00000e-03
Epoch: [255][0/391]	Time 0.325 (0.325)	Data 0.152 (0.152)	Loss 0.1701 (0.1701)	Prec@1 93.750 (93.750)
Epoch: [255][60/391]	Time 0.243 (0.203)	Data 0.000 (0.003)	Loss 0.1926 (0.1826)	Prec@1 94.531 (93.417)
Epoch: [255][120/391]	Time 0.240 (0.189)	Data 0.000 (0.001)	Loss 0.1825 (0.1845)	Prec@1 94.531 (93.440)
Epoch: [255][180/391]	Time 0.167 (0.188)	Data 0.000 (0.001)	Loss 0.2546 (0.1839)	Prec@1 92.188 (93.469)
Epoch: [255][240/391]	Time 0.166 (0.188)	Data 0.000 (0.001)	Loss 0.1605 (0.1835)	Prec@1 93.750 (93.465)
Epoch: [255][300/391]	Time 0.167 (0.191)	Data 0.000 (0.001)	Loss 0.2162 (0.1849)	Prec@1 91.406 (93.418)
Epoch: [255][360/391]	Time 0.240 (0.189)	Data 0.000 (0.001)	Loss 0.3016 (0.1861)	Prec@1 88.281 (93.347)
Test: [0/79]	Time 0.248 (0.248)	Loss 0.1185 (0.1185)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1949 (0.2444)	Prec@1 92.969 (92.636)
 * Prec@1 92.580
Best Accuracy:92.71
current lr 1.00000e-03
Epoch: [256][0/391]	Time 0.344 (0.344)	Data 0.165 (0.165)	Loss 0.1406 (0.1406)	Prec@1 93.750 (93.750)
Epoch: [256][60/391]	Time 0.166 (0.170)	Data 0.000 (0.003)	Loss 0.1755 (0.1840)	Prec@1 94.531 (93.379)
Epoch: [256][120/391]	Time 0.169 (0.169)	Data 0.000 (0.002)	Loss 0.1718 (0.1816)	Prec@1 91.406 (93.408)
Epoch: [256][180/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.1926 (0.1828)	Prec@1 93.750 (93.409)
Epoch: [256][240/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1627 (0.1838)	Prec@1 94.531 (93.374)
Epoch: [256][300/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.2440 (0.1884)	Prec@1 92.188 (93.254)
Epoch: [256][360/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1783 (0.1902)	Prec@1 92.188 (93.170)
Test: [0/79]	Time 0.272 (0.272)	Loss 0.1154 (0.1154)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1955 (0.2440)	Prec@1 92.188 (92.623)
 * Prec@1 92.620
Best Accuracy:92.71
current lr 1.00000e-03
Epoch: [257][0/391]	Time 0.307 (0.307)	Data 0.129 (0.129)	Loss 0.1783 (0.1783)	Prec@1 93.750 (93.750)
Epoch: [257][60/391]	Time 0.170 (0.170)	Data 0.000 (0.002)	Loss 0.2247 (0.1944)	Prec@1 92.188 (93.174)
Epoch: [257][120/391]	Time 0.168 (0.169)	Data 0.000 (0.001)	Loss 0.2025 (0.1972)	Prec@1 95.312 (92.969)
Epoch: [257][180/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1191 (0.1939)	Prec@1 96.094 (93.094)
Epoch: [257][240/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1376 (0.1922)	Prec@1 93.750 (93.202)
Epoch: [257][300/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1706 (0.1908)	Prec@1 93.750 (93.254)
Epoch: [257][360/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.0881 (0.1911)	Prec@1 96.875 (93.172)
Test: [0/79]	Time 0.279 (0.279)	Loss 0.1159 (0.1159)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.2116 (0.2440)	Prec@1 92.188 (92.713)
 * Prec@1 92.710
Best Accuracy:92.71
current lr 1.00000e-03
Epoch: [258][0/391]	Time 0.330 (0.330)	Data 0.153 (0.153)	Loss 0.2307 (0.2307)	Prec@1 91.406 (91.406)
Epoch: [258][60/391]	Time 0.169 (0.170)	Data 0.000 (0.003)	Loss 0.1120 (0.1793)	Prec@1 96.094 (93.737)
Epoch: [258][120/391]	Time 0.166 (0.169)	Data 0.000 (0.001)	Loss 0.1728 (0.1830)	Prec@1 95.312 (93.627)
Epoch: [258][180/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.1874 (0.1849)	Prec@1 93.750 (93.504)
Epoch: [258][240/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.2586 (0.1900)	Prec@1 92.188 (93.241)
Epoch: [258][300/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.0826 (0.1914)	Prec@1 98.438 (93.119)
Epoch: [258][360/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.2385 (0.1927)	Prec@1 88.281 (93.055)
Test: [0/79]	Time 0.245 (0.245)	Loss 0.1134 (0.1134)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1969 (0.2408)	Prec@1 92.188 (92.661)
 * Prec@1 92.650
Best Accuracy:92.71
current lr 1.00000e-03
Epoch: [259][0/391]	Time 0.321 (0.321)	Data 0.149 (0.149)	Loss 0.2275 (0.2275)	Prec@1 92.188 (92.188)
Epoch: [259][60/391]	Time 0.166 (0.168)	Data 0.000 (0.003)	Loss 0.3612 (0.1887)	Prec@1 90.625 (93.366)
Epoch: [259][120/391]	Time 0.165 (0.167)	Data 0.000 (0.001)	Loss 0.2277 (0.1869)	Prec@1 89.844 (93.472)
Epoch: [259][180/391]	Time 0.166 (0.167)	Data 0.000 (0.001)	Loss 0.2395 (0.1866)	Prec@1 91.406 (93.400)
Epoch: [259][240/391]	Time 0.166 (0.166)	Data 0.000 (0.001)	Loss 0.1197 (0.1862)	Prec@1 96.094 (93.406)
Epoch: [259][300/391]	Time 0.166 (0.166)	Data 0.000 (0.001)	Loss 0.1222 (0.1866)	Prec@1 94.531 (93.361)
Epoch: [259][360/391]	Time 0.166 (0.166)	Data 0.000 (0.001)	Loss 0.0803 (0.1879)	Prec@1 98.438 (93.326)
Test: [0/79]	Time 0.261 (0.261)	Loss 0.1229 (0.1229)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1910 (0.2424)	Prec@1 94.531 (92.700)
 * Prec@1 92.690
Best Accuracy:92.71
current lr 1.00000e-03
Epoch: [260][0/391]	Time 0.346 (0.346)	Data 0.167 (0.167)	Loss 0.1929 (0.1929)	Prec@1 94.531 (94.531)
Epoch: [260][60/391]	Time 0.166 (0.170)	Data 0.000 (0.003)	Loss 0.1663 (0.1858)	Prec@1 94.531 (93.263)
Epoch: [260][120/391]	Time 0.166 (0.169)	Data 0.000 (0.002)	Loss 0.1315 (0.1882)	Prec@1 96.094 (93.266)
Epoch: [260][180/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1570 (0.1902)	Prec@1 95.312 (93.185)
Epoch: [260][240/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.2481 (0.1912)	Prec@1 91.406 (93.176)
Epoch: [260][300/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1372 (0.1906)	Prec@1 94.531 (93.182)
Epoch: [260][360/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1863 (0.1909)	Prec@1 93.750 (93.170)
Test: [0/79]	Time 0.273 (0.273)	Loss 0.1073 (0.1073)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.156 (0.157)	Loss 0.2085 (0.2448)	Prec@1 92.188 (92.623)
 * Prec@1 92.640
Best Accuracy:92.71
current lr 1.00000e-03
Epoch: [261][0/391]	Time 0.294 (0.294)	Data 0.117 (0.117)	Loss 0.1731 (0.1731)	Prec@1 92.969 (92.969)
Epoch: [261][60/391]	Time 0.168 (0.170)	Data 0.000 (0.002)	Loss 0.1637 (0.1859)	Prec@1 92.188 (93.263)
Epoch: [261][120/391]	Time 0.166 (0.169)	Data 0.000 (0.001)	Loss 0.1547 (0.1882)	Prec@1 93.750 (93.259)
Epoch: [261][180/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1996 (0.1902)	Prec@1 93.750 (93.193)
Epoch: [261][240/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.2554 (0.1904)	Prec@1 91.406 (93.235)
Epoch: [261][300/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.2041 (0.1897)	Prec@1 89.844 (93.296)
Epoch: [261][360/391]	Time 0.168 (0.168)	Data 0.000 (0.000)	Loss 0.1784 (0.1902)	Prec@1 93.750 (93.313)
Test: [0/79]	Time 0.282 (0.282)	Loss 0.1107 (0.1107)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.2060 (0.2454)	Prec@1 91.406 (92.546)
 * Prec@1 92.570
Best Accuracy:92.71
current lr 1.00000e-03
Epoch: [262][0/391]	Time 0.292 (0.292)	Data 0.117 (0.117)	Loss 0.2603 (0.2603)	Prec@1 89.062 (89.062)
Epoch: [262][60/391]	Time 0.167 (0.169)	Data 0.000 (0.002)	Loss 0.1469 (0.1830)	Prec@1 93.750 (93.443)
Epoch: [262][120/391]	Time 0.168 (0.169)	Data 0.000 (0.001)	Loss 0.1369 (0.1866)	Prec@1 93.750 (93.356)
Epoch: [262][180/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.1629 (0.1867)	Prec@1 94.531 (93.344)
Epoch: [262][240/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1117 (0.1873)	Prec@1 95.312 (93.293)
Epoch: [262][300/391]	Time 0.170 (0.168)	Data 0.000 (0.001)	Loss 0.1106 (0.1864)	Prec@1 94.531 (93.350)
Epoch: [262][360/391]	Time 0.168 (0.168)	Data 0.000 (0.000)	Loss 0.1628 (0.1885)	Prec@1 95.312 (93.278)
Test: [0/79]	Time 0.278 (0.278)	Loss 0.1238 (0.1238)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.156 (0.158)	Loss 0.2047 (0.2417)	Prec@1 92.188 (92.777)
 * Prec@1 92.750
Best Accuracy:92.75
current lr 1.00000e-03
Epoch: [263][0/391]	Time 0.313 (0.313)	Data 0.135 (0.135)	Loss 0.1798 (0.1798)	Prec@1 92.188 (92.188)
Epoch: [263][60/391]	Time 0.168 (0.170)	Data 0.000 (0.002)	Loss 0.0884 (0.1878)	Prec@1 96.875 (92.994)
Epoch: [263][120/391]	Time 0.167 (0.169)	Data 0.000 (0.001)	Loss 0.2493 (0.1871)	Prec@1 88.281 (93.098)
Epoch: [263][180/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.2226 (0.1853)	Prec@1 90.625 (93.236)
Epoch: [263][240/391]	Time 0.171 (0.168)	Data 0.000 (0.001)	Loss 0.1629 (0.1851)	Prec@1 94.531 (93.264)
Epoch: [263][300/391]	Time 0.170 (0.168)	Data 0.000 (0.001)	Loss 0.1513 (0.1872)	Prec@1 93.750 (93.195)
Epoch: [263][360/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1174 (0.1897)	Prec@1 95.312 (93.207)
Test: [0/79]	Time 0.267 (0.267)	Loss 0.1161 (0.1161)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.156 (0.157)	Loss 0.2048 (0.2431)	Prec@1 92.969 (92.546)
 * Prec@1 92.540
Best Accuracy:92.75
current lr 1.00000e-03
Epoch: [264][0/391]	Time 0.305 (0.305)	Data 0.121 (0.121)	Loss 0.1441 (0.1441)	Prec@1 94.531 (94.531)
Epoch: [264][60/391]	Time 0.167 (0.170)	Data 0.000 (0.002)	Loss 0.2223 (0.1984)	Prec@1 92.188 (92.725)
Epoch: [264][120/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1419 (0.1914)	Prec@1 92.969 (93.066)
Epoch: [264][180/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1151 (0.1944)	Prec@1 95.312 (93.046)
Epoch: [264][240/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1889 (0.1933)	Prec@1 94.531 (93.076)
Epoch: [264][300/391]	Time 0.170 (0.168)	Data 0.000 (0.001)	Loss 0.3176 (0.1907)	Prec@1 88.281 (93.218)
Epoch: [264][360/391]	Time 0.170 (0.167)	Data 0.000 (0.000)	Loss 0.1305 (0.1909)	Prec@1 96.094 (93.213)
Test: [0/79]	Time 0.264 (0.264)	Loss 0.1084 (0.1084)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1989 (0.2396)	Prec@1 92.969 (92.802)
 * Prec@1 92.790
Best Accuracy:92.79
current lr 1.00000e-03
Epoch: [265][0/391]	Time 0.350 (0.350)	Data 0.169 (0.169)	Loss 0.3156 (0.3156)	Prec@1 89.062 (89.062)
Epoch: [265][60/391]	Time 0.172 (0.171)	Data 0.000 (0.003)	Loss 0.1777 (0.1751)	Prec@1 95.312 (93.737)
Epoch: [265][120/391]	Time 0.168 (0.169)	Data 0.000 (0.002)	Loss 0.2672 (0.1850)	Prec@1 90.625 (93.447)
Epoch: [265][180/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1601 (0.1831)	Prec@1 95.312 (93.444)
Epoch: [265][240/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.1887 (0.1836)	Prec@1 92.188 (93.400)
Epoch: [265][300/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.1866 (0.1852)	Prec@1 95.312 (93.374)
Epoch: [265][360/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1969 (0.1858)	Prec@1 92.969 (93.378)
Test: [0/79]	Time 0.254 (0.254)	Loss 0.1276 (0.1276)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.2143 (0.2425)	Prec@1 92.188 (92.700)
 * Prec@1 92.700
Best Accuracy:92.79
current lr 1.00000e-03
Epoch: [266][0/391]	Time 0.337 (0.337)	Data 0.162 (0.162)	Loss 0.2570 (0.2570)	Prec@1 91.406 (91.406)
Epoch: [266][60/391]	Time 0.170 (0.170)	Data 0.000 (0.003)	Loss 0.2292 (0.1982)	Prec@1 94.531 (93.251)
Epoch: [266][120/391]	Time 0.167 (0.169)	Data 0.000 (0.001)	Loss 0.1723 (0.1910)	Prec@1 95.312 (93.317)
Epoch: [266][180/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1666 (0.1858)	Prec@1 93.750 (93.556)
Epoch: [266][240/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1858 (0.1876)	Prec@1 92.969 (93.445)
Epoch: [266][300/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.2207 (0.1885)	Prec@1 90.625 (93.436)
Epoch: [266][360/391]	Time 0.170 (0.168)	Data 0.000 (0.001)	Loss 0.2341 (0.1888)	Prec@1 91.406 (93.417)
Test: [0/79]	Time 0.268 (0.268)	Loss 0.1179 (0.1179)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.2016 (0.2425)	Prec@1 92.969 (92.751)
 * Prec@1 92.710
Best Accuracy:92.79
current lr 1.00000e-03
Epoch: [267][0/391]	Time 0.298 (0.298)	Data 0.118 (0.118)	Loss 0.1930 (0.1930)	Prec@1 92.188 (92.188)
Epoch: [267][60/391]	Time 0.167 (0.169)	Data 0.000 (0.002)	Loss 0.2132 (0.1866)	Prec@1 92.969 (93.302)
Epoch: [267][120/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.1627 (0.1899)	Prec@1 95.312 (93.324)
Epoch: [267][180/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.2351 (0.1892)	Prec@1 92.969 (93.327)
Epoch: [267][240/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1560 (0.1878)	Prec@1 93.750 (93.361)
Epoch: [267][300/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1528 (0.1879)	Prec@1 95.312 (93.374)
Epoch: [267][360/391]	Time 0.166 (0.168)	Data 0.000 (0.000)	Loss 0.2190 (0.1891)	Prec@1 92.969 (93.300)
Test: [0/79]	Time 0.281 (0.281)	Loss 0.1265 (0.1265)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.156 (0.158)	Loss 0.2053 (0.2441)	Prec@1 93.750 (92.777)
 * Prec@1 92.800
Best Accuracy:92.8
current lr 1.00000e-03
Epoch: [268][0/391]	Time 0.276 (0.276)	Data 0.101 (0.101)	Loss 0.1816 (0.1816)	Prec@1 94.531 (94.531)
Epoch: [268][60/391]	Time 0.166 (0.169)	Data 0.000 (0.002)	Loss 0.1581 (0.1966)	Prec@1 94.531 (93.174)
Epoch: [268][120/391]	Time 0.168 (0.169)	Data 0.000 (0.001)	Loss 0.1354 (0.1916)	Prec@1 95.312 (93.175)
Epoch: [268][180/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.3135 (0.1894)	Prec@1 85.156 (93.254)
Epoch: [268][240/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1223 (0.1879)	Prec@1 93.750 (93.325)
Epoch: [268][300/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.2541 (0.1858)	Prec@1 92.188 (93.446)
Epoch: [268][360/391]	Time 0.168 (0.168)	Data 0.000 (0.000)	Loss 0.2595 (0.1875)	Prec@1 89.844 (93.343)
Test: [0/79]	Time 0.274 (0.274)	Loss 0.1193 (0.1193)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.156 (0.157)	Loss 0.2004 (0.2434)	Prec@1 93.750 (92.841)
 * Prec@1 92.770
Best Accuracy:92.8
current lr 1.00000e-03
Epoch: [269][0/391]	Time 0.301 (0.301)	Data 0.120 (0.120)	Loss 0.1812 (0.1812)	Prec@1 92.188 (92.188)
Epoch: [269][60/391]	Time 0.167 (0.170)	Data 0.000 (0.002)	Loss 0.1202 (0.1886)	Prec@1 96.094 (93.212)
Epoch: [269][120/391]	Time 0.168 (0.169)	Data 0.000 (0.001)	Loss 0.2308 (0.1848)	Prec@1 91.406 (93.292)
Epoch: [269][180/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1989 (0.1870)	Prec@1 92.188 (93.331)
Epoch: [269][240/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.2319 (0.1892)	Prec@1 92.188 (93.280)
Epoch: [269][300/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1663 (0.1902)	Prec@1 93.750 (93.221)
Epoch: [269][360/391]	Time 0.166 (0.168)	Data 0.000 (0.000)	Loss 0.1631 (0.1896)	Prec@1 94.531 (93.272)
Test: [0/79]	Time 0.250 (0.250)	Loss 0.1194 (0.1194)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.2196 (0.2423)	Prec@1 92.969 (92.777)
 * Prec@1 92.770
Best Accuracy:92.8
current lr 1.00000e-03
Epoch: [270][0/391]	Time 0.273 (0.273)	Data 0.097 (0.097)	Loss 0.1929 (0.1929)	Prec@1 93.750 (93.750)
Epoch: [270][60/391]	Time 0.167 (0.168)	Data 0.000 (0.002)	Loss 0.1360 (0.1890)	Prec@1 96.094 (93.225)
Epoch: [270][120/391]	Time 0.166 (0.167)	Data 0.000 (0.001)	Loss 0.2170 (0.1884)	Prec@1 92.188 (93.317)
Epoch: [270][180/391]	Time 0.168 (0.167)	Data 0.000 (0.001)	Loss 0.1762 (0.1931)	Prec@1 95.312 (93.185)
Epoch: [270][240/391]	Time 0.168 (0.167)	Data 0.000 (0.001)	Loss 0.1558 (0.1907)	Prec@1 94.531 (93.238)
Epoch: [270][300/391]	Time 0.167 (0.167)	Data 0.000 (0.000)	Loss 0.1004 (0.1909)	Prec@1 97.656 (93.231)
Epoch: [270][360/391]	Time 0.166 (0.167)	Data 0.000 (0.000)	Loss 0.1784 (0.1913)	Prec@1 95.312 (93.278)
Test: [0/79]	Time 0.257 (0.257)	Loss 0.1252 (0.1252)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1954 (0.2410)	Prec@1 92.969 (92.905)
 * Prec@1 92.850
Best Accuracy:92.85
current lr 1.00000e-03
Epoch: [271][0/391]	Time 0.291 (0.291)	Data 0.118 (0.118)	Loss 0.1273 (0.1273)	Prec@1 96.094 (96.094)
Epoch: [271][60/391]	Time 0.168 (0.169)	Data 0.000 (0.002)	Loss 0.0947 (0.1932)	Prec@1 96.875 (93.084)
Epoch: [271][120/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.2099 (0.1905)	Prec@1 92.188 (93.221)
Epoch: [271][180/391]	Time 0.170 (0.168)	Data 0.000 (0.001)	Loss 0.2609 (0.1931)	Prec@1 91.406 (93.068)
Epoch: [271][240/391]	Time 0.169 (0.168)	Data 0.000 (0.001)	Loss 0.1759 (0.1910)	Prec@1 93.750 (93.189)
Epoch: [271][300/391]	Time 0.172 (0.168)	Data 0.000 (0.001)	Loss 0.1825 (0.1910)	Prec@1 93.750 (93.208)
Epoch: [271][360/391]	Time 0.166 (0.168)	Data 0.000 (0.000)	Loss 0.2209 (0.1889)	Prec@1 93.750 (93.293)
Test: [0/79]	Time 0.258 (0.258)	Loss 0.1165 (0.1165)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1981 (0.2418)	Prec@1 92.969 (92.994)
 * Prec@1 92.870
Best Accuracy:92.87
current lr 1.00000e-03
Epoch: [272][0/391]	Time 0.329 (0.329)	Data 0.154 (0.154)	Loss 0.1361 (0.1361)	Prec@1 94.531 (94.531)
Epoch: [272][60/391]	Time 0.166 (0.170)	Data 0.000 (0.003)	Loss 0.1417 (0.1846)	Prec@1 94.531 (93.148)
Epoch: [272][120/391]	Time 0.166 (0.169)	Data 0.000 (0.001)	Loss 0.2543 (0.1856)	Prec@1 89.844 (93.350)
Epoch: [272][180/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.2236 (0.1907)	Prec@1 94.531 (93.219)
Epoch: [272][240/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.2017 (0.1909)	Prec@1 91.406 (93.179)
Epoch: [272][300/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.2373 (0.1893)	Prec@1 92.188 (93.293)
Epoch: [272][360/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.2355 (0.1884)	Prec@1 91.406 (93.272)
Test: [0/79]	Time 0.249 (0.249)	Loss 0.1259 (0.1259)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.2003 (0.2459)	Prec@1 92.969 (92.674)
 * Prec@1 92.620
Best Accuracy:92.87
current lr 1.00000e-03
Epoch: [273][0/391]	Time 0.316 (0.316)	Data 0.137 (0.137)	Loss 0.2553 (0.2553)	Prec@1 91.406 (91.406)
Epoch: [273][60/391]	Time 0.166 (0.169)	Data 0.000 (0.002)	Loss 0.1697 (0.2002)	Prec@1 92.969 (92.828)
Epoch: [273][120/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.2238 (0.1910)	Prec@1 92.969 (93.246)
Epoch: [273][180/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.2188 (0.1917)	Prec@1 92.188 (93.180)
Epoch: [273][240/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.2425 (0.1891)	Prec@1 89.844 (93.348)
Epoch: [273][300/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.3039 (0.1879)	Prec@1 88.281 (93.381)
Epoch: [273][360/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.0951 (0.1870)	Prec@1 95.312 (93.376)
Test: [0/79]	Time 0.270 (0.270)	Loss 0.1148 (0.1148)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1962 (0.2438)	Prec@1 92.969 (92.649)
 * Prec@1 92.620
Best Accuracy:92.87
current lr 1.00000e-03
Epoch: [274][0/391]	Time 0.328 (0.328)	Data 0.156 (0.156)	Loss 0.1943 (0.1943)	Prec@1 92.969 (92.969)
Epoch: [274][60/391]	Time 0.166 (0.169)	Data 0.000 (0.003)	Loss 0.2079 (0.1912)	Prec@1 92.188 (93.225)
Epoch: [274][120/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1554 (0.1882)	Prec@1 93.750 (93.472)
Epoch: [274][180/391]	Time 0.166 (0.167)	Data 0.000 (0.001)	Loss 0.2026 (0.1874)	Prec@1 95.312 (93.400)
Epoch: [274][240/391]	Time 0.168 (0.167)	Data 0.000 (0.001)	Loss 0.1449 (0.1866)	Prec@1 95.312 (93.371)
Epoch: [274][300/391]	Time 0.171 (0.167)	Data 0.000 (0.001)	Loss 0.1910 (0.1873)	Prec@1 92.188 (93.340)
Epoch: [274][360/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.2483 (0.1876)	Prec@1 90.625 (93.369)
Test: [0/79]	Time 0.262 (0.262)	Loss 0.1187 (0.1187)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1894 (0.2452)	Prec@1 93.750 (92.700)
 * Prec@1 92.650
Best Accuracy:92.87
current lr 1.00000e-03
Epoch: [275][0/391]	Time 0.330 (0.330)	Data 0.151 (0.151)	Loss 0.2255 (0.2255)	Prec@1 92.188 (92.188)
Epoch: [275][60/391]	Time 0.172 (0.171)	Data 0.000 (0.003)	Loss 0.1661 (0.1895)	Prec@1 94.531 (93.327)
Epoch: [275][120/391]	Time 0.166 (0.170)	Data 0.000 (0.001)	Loss 0.2509 (0.1892)	Prec@1 91.406 (93.233)
Epoch: [275][180/391]	Time 0.166 (0.170)	Data 0.000 (0.001)	Loss 0.1436 (0.1900)	Prec@1 93.750 (93.223)
Epoch: [275][240/391]	Time 0.168 (0.169)	Data 0.000 (0.001)	Loss 0.2575 (0.1899)	Prec@1 90.625 (93.299)
Epoch: [275][300/391]	Time 0.166 (0.169)	Data 0.000 (0.001)	Loss 0.1904 (0.1881)	Prec@1 95.312 (93.332)
Epoch: [275][360/391]	Time 0.169 (0.169)	Data 0.000 (0.001)	Loss 0.1662 (0.1881)	Prec@1 94.531 (93.337)
Test: [0/79]	Time 0.257 (0.257)	Loss 0.1196 (0.1196)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.156 (0.157)	Loss 0.1957 (0.2439)	Prec@1 91.406 (92.649)
 * Prec@1 92.610
Best Accuracy:92.87
current lr 1.00000e-03
Epoch: [276][0/391]	Time 0.319 (0.319)	Data 0.140 (0.140)	Loss 0.2519 (0.2519)	Prec@1 93.750 (93.750)
Epoch: [276][60/391]	Time 0.168 (0.170)	Data 0.000 (0.002)	Loss 0.1929 (0.1896)	Prec@1 93.750 (93.110)
Epoch: [276][120/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1839 (0.1899)	Prec@1 92.188 (93.233)
Epoch: [276][180/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.2298 (0.1918)	Prec@1 90.625 (93.141)
Epoch: [276][240/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1701 (0.1893)	Prec@1 97.656 (93.264)
Epoch: [276][300/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.1326 (0.1875)	Prec@1 94.531 (93.363)
Epoch: [276][360/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1968 (0.1880)	Prec@1 92.188 (93.378)
Test: [0/79]	Time 0.249 (0.249)	Loss 0.1139 (0.1139)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.156 (0.157)	Loss 0.1887 (0.2440)	Prec@1 92.969 (92.751)
 * Prec@1 92.680
Best Accuracy:92.87
current lr 1.00000e-03
Epoch: [277][0/391]	Time 0.306 (0.306)	Data 0.126 (0.126)	Loss 0.2397 (0.2397)	Prec@1 90.625 (90.625)
Epoch: [277][60/391]	Time 0.166 (0.170)	Data 0.000 (0.002)	Loss 0.1047 (0.1952)	Prec@1 96.094 (93.007)
Epoch: [277][120/391]	Time 0.171 (0.169)	Data 0.000 (0.001)	Loss 0.2174 (0.1897)	Prec@1 92.969 (93.221)
Epoch: [277][180/391]	Time 0.171 (0.169)	Data 0.000 (0.001)	Loss 0.1434 (0.1874)	Prec@1 96.094 (93.374)
Epoch: [277][240/391]	Time 0.172 (0.169)	Data 0.000 (0.001)	Loss 0.2580 (0.1866)	Prec@1 88.281 (93.374)
Epoch: [277][300/391]	Time 0.171 (0.169)	Data 0.000 (0.001)	Loss 0.1643 (0.1879)	Prec@1 94.531 (93.353)
Epoch: [277][360/391]	Time 0.167 (0.169)	Data 0.000 (0.001)	Loss 0.2603 (0.1887)	Prec@1 89.844 (93.326)
Test: [0/79]	Time 0.269 (0.269)	Loss 0.1121 (0.1121)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.156 (0.157)	Loss 0.1959 (0.2420)	Prec@1 91.406 (92.700)
 * Prec@1 92.700
Best Accuracy:92.87
current lr 1.00000e-03
Epoch: [278][0/391]	Time 0.321 (0.321)	Data 0.140 (0.140)	Loss 0.1864 (0.1864)	Prec@1 90.625 (90.625)
Epoch: [278][60/391]	Time 0.168 (0.170)	Data 0.000 (0.002)	Loss 0.1291 (0.1893)	Prec@1 98.438 (93.148)
Epoch: [278][120/391]	Time 0.167 (0.169)	Data 0.000 (0.001)	Loss 0.1559 (0.1882)	Prec@1 95.312 (93.175)
Epoch: [278][180/391]	Time 0.168 (0.169)	Data 0.000 (0.001)	Loss 0.2183 (0.1914)	Prec@1 94.531 (93.137)
Epoch: [278][240/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.1593 (0.1901)	Prec@1 94.531 (93.225)
Epoch: [278][300/391]	Time 0.170 (0.169)	Data 0.000 (0.001)	Loss 0.2573 (0.1902)	Prec@1 92.188 (93.241)
Epoch: [278][360/391]	Time 0.171 (0.169)	Data 0.000 (0.001)	Loss 0.1703 (0.1908)	Prec@1 92.188 (93.239)
Test: [0/79]	Time 0.266 (0.266)	Loss 0.1039 (0.1039)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1938 (0.2457)	Prec@1 92.969 (92.751)
 * Prec@1 92.620
Best Accuracy:92.87
current lr 1.00000e-03
Epoch: [279][0/391]	Time 0.359 (0.359)	Data 0.174 (0.174)	Loss 0.1743 (0.1743)	Prec@1 94.531 (94.531)
Epoch: [279][60/391]	Time 0.166 (0.170)	Data 0.000 (0.003)	Loss 0.3193 (0.1804)	Prec@1 90.625 (93.840)
Epoch: [279][120/391]	Time 0.170 (0.169)	Data 0.000 (0.002)	Loss 0.1508 (0.1920)	Prec@1 93.750 (93.427)
Epoch: [279][180/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1951 (0.1914)	Prec@1 93.750 (93.357)
Epoch: [279][240/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.2087 (0.1926)	Prec@1 93.750 (93.332)
Epoch: [279][300/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1746 (0.1903)	Prec@1 94.531 (93.381)
Epoch: [279][360/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.1800 (0.1901)	Prec@1 91.406 (93.419)
Test: [0/79]	Time 0.261 (0.261)	Loss 0.1135 (0.1135)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.2043 (0.2446)	Prec@1 91.406 (92.713)
 * Prec@1 92.710
Best Accuracy:92.87
current lr 1.00000e-03
Epoch: [280][0/391]	Time 0.323 (0.323)	Data 0.143 (0.143)	Loss 0.1990 (0.1990)	Prec@1 91.406 (91.406)
Epoch: [280][60/391]	Time 0.166 (0.170)	Data 0.000 (0.002)	Loss 0.2314 (0.1921)	Prec@1 91.406 (93.481)
Epoch: [280][120/391]	Time 0.167 (0.169)	Data 0.000 (0.001)	Loss 0.2592 (0.1920)	Prec@1 92.188 (93.363)
Epoch: [280][180/391]	Time 0.169 (0.169)	Data 0.000 (0.001)	Loss 0.2332 (0.1890)	Prec@1 91.406 (93.405)
Epoch: [280][240/391]	Time 0.169 (0.169)	Data 0.000 (0.001)	Loss 0.1951 (0.1894)	Prec@1 93.750 (93.338)
Epoch: [280][300/391]	Time 0.169 (0.169)	Data 0.000 (0.001)	Loss 0.1648 (0.1877)	Prec@1 95.312 (93.400)
Epoch: [280][360/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1887 (0.1863)	Prec@1 93.750 (93.425)
Test: [0/79]	Time 0.258 (0.258)	Loss 0.1125 (0.1125)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1916 (0.2469)	Prec@1 93.750 (92.725)
 * Prec@1 92.670
Best Accuracy:92.87
current lr 1.00000e-03
Epoch: [281][0/391]	Time 0.320 (0.320)	Data 0.143 (0.143)	Loss 0.1944 (0.1944)	Prec@1 89.844 (89.844)
Epoch: [281][60/391]	Time 0.167 (0.170)	Data 0.000 (0.003)	Loss 0.2511 (0.1942)	Prec@1 92.969 (93.212)
Epoch: [281][120/391]	Time 0.168 (0.169)	Data 0.000 (0.001)	Loss 0.2071 (0.1864)	Prec@1 91.406 (93.505)
Epoch: [281][180/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1211 (0.1837)	Prec@1 96.094 (93.569)
Epoch: [281][240/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1985 (0.1872)	Prec@1 92.969 (93.419)
Epoch: [281][300/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1626 (0.1867)	Prec@1 94.531 (93.475)
Epoch: [281][360/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.2586 (0.1877)	Prec@1 89.062 (93.386)
Test: [0/79]	Time 0.274 (0.274)	Loss 0.1183 (0.1183)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1850 (0.2408)	Prec@1 92.188 (92.841)
 * Prec@1 92.780
Best Accuracy:92.87
current lr 1.00000e-03
Epoch: [282][0/391]	Time 0.348 (0.348)	Data 0.170 (0.170)	Loss 0.2187 (0.2187)	Prec@1 92.969 (92.969)
Epoch: [282][60/391]	Time 0.169 (0.170)	Data 0.000 (0.003)	Loss 0.1935 (0.1862)	Prec@1 92.188 (93.519)
Epoch: [282][120/391]	Time 0.166 (0.169)	Data 0.000 (0.002)	Loss 0.1840 (0.1869)	Prec@1 94.531 (93.279)
Epoch: [282][180/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.2410 (0.1892)	Prec@1 91.406 (93.275)
Epoch: [282][240/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.2811 (0.1881)	Prec@1 90.625 (93.410)
Epoch: [282][300/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1303 (0.1878)	Prec@1 94.531 (93.348)
Epoch: [282][360/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.2020 (0.1876)	Prec@1 93.750 (93.425)
Test: [0/79]	Time 0.246 (0.246)	Loss 0.1286 (0.1286)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.156 (0.157)	Loss 0.2006 (0.2470)	Prec@1 93.750 (92.610)
 * Prec@1 92.600
Best Accuracy:92.87
current lr 1.00000e-03
Epoch: [283][0/391]	Time 0.338 (0.338)	Data 0.156 (0.156)	Loss 0.1661 (0.1661)	Prec@1 92.188 (92.188)
Epoch: [283][60/391]	Time 0.168 (0.170)	Data 0.000 (0.003)	Loss 0.1838 (0.1852)	Prec@1 93.750 (93.353)
Epoch: [283][120/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1996 (0.1900)	Prec@1 92.188 (93.221)
Epoch: [283][180/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.0753 (0.1876)	Prec@1 97.656 (93.422)
Epoch: [283][240/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1431 (0.1855)	Prec@1 94.531 (93.478)
Epoch: [283][300/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1657 (0.1857)	Prec@1 93.750 (93.477)
Epoch: [283][360/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1569 (0.1859)	Prec@1 94.531 (93.484)
Test: [0/79]	Time 0.255 (0.255)	Loss 0.1184 (0.1184)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.2105 (0.2429)	Prec@1 92.188 (92.700)
 * Prec@1 92.660
Best Accuracy:92.87
current lr 1.00000e-03
Epoch: [284][0/391]	Time 0.351 (0.351)	Data 0.170 (0.170)	Loss 0.1610 (0.1610)	Prec@1 96.094 (96.094)
Epoch: [284][60/391]	Time 0.168 (0.170)	Data 0.000 (0.003)	Loss 0.2102 (0.1839)	Prec@1 92.188 (93.635)
Epoch: [284][120/391]	Time 0.169 (0.169)	Data 0.000 (0.002)	Loss 0.2375 (0.1856)	Prec@1 92.969 (93.421)
Epoch: [284][180/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.2000 (0.1851)	Prec@1 93.750 (93.448)
Epoch: [284][240/391]	Time 0.170 (0.168)	Data 0.000 (0.001)	Loss 0.2178 (0.1846)	Prec@1 91.406 (93.517)
Epoch: [284][300/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1539 (0.1857)	Prec@1 95.312 (93.511)
Epoch: [284][360/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.2367 (0.1857)	Prec@1 89.844 (93.492)
Test: [0/79]	Time 0.272 (0.272)	Loss 0.1121 (0.1121)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.2015 (0.2418)	Prec@1 92.969 (92.725)
 * Prec@1 92.680
Best Accuracy:92.87
current lr 1.00000e-03
Epoch: [285][0/391]	Time 0.324 (0.324)	Data 0.148 (0.148)	Loss 0.1736 (0.1736)	Prec@1 95.312 (95.312)
Epoch: [285][60/391]	Time 0.168 (0.169)	Data 0.000 (0.003)	Loss 0.2261 (0.1818)	Prec@1 91.406 (93.852)
Epoch: [285][120/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1361 (0.1836)	Prec@1 95.312 (93.750)
Epoch: [285][180/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.2139 (0.1862)	Prec@1 92.188 (93.590)
Epoch: [285][240/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1865 (0.1867)	Prec@1 92.188 (93.555)
Epoch: [285][300/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.2988 (0.1863)	Prec@1 89.062 (93.529)
Epoch: [285][360/391]	Time 0.166 (0.167)	Data 0.000 (0.001)	Loss 0.2539 (0.1879)	Prec@1 90.625 (93.441)
Test: [0/79]	Time 0.253 (0.253)	Loss 0.1043 (0.1043)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.2089 (0.2412)	Prec@1 91.406 (92.841)
 * Prec@1 92.780
Best Accuracy:92.87
current lr 1.00000e-03
Epoch: [286][0/391]	Time 0.275 (0.275)	Data 0.097 (0.097)	Loss 0.1239 (0.1239)	Prec@1 95.312 (95.312)
Epoch: [286][60/391]	Time 0.169 (0.169)	Data 0.000 (0.002)	Loss 0.2608 (0.1863)	Prec@1 90.625 (93.468)
Epoch: [286][120/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.2024 (0.1818)	Prec@1 92.188 (93.576)
Epoch: [286][180/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1878 (0.1860)	Prec@1 92.969 (93.452)
Epoch: [286][240/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1684 (0.1862)	Prec@1 94.531 (93.465)
Epoch: [286][300/391]	Time 0.171 (0.168)	Data 0.000 (0.000)	Loss 0.2606 (0.1875)	Prec@1 91.406 (93.381)
Epoch: [286][360/391]	Time 0.166 (0.168)	Data 0.000 (0.000)	Loss 0.0618 (0.1879)	Prec@1 97.656 (93.347)
Test: [0/79]	Time 0.267 (0.267)	Loss 0.1134 (0.1134)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.2054 (0.2439)	Prec@1 93.750 (92.533)
 * Prec@1 92.480
Best Accuracy:92.87
current lr 1.00000e-03
Epoch: [287][0/391]	Time 0.296 (0.296)	Data 0.116 (0.116)	Loss 0.1223 (0.1223)	Prec@1 94.531 (94.531)
Epoch: [287][60/391]	Time 0.168 (0.170)	Data 0.000 (0.002)	Loss 0.2070 (0.1855)	Prec@1 91.406 (93.443)
Epoch: [287][120/391]	Time 0.168 (0.169)	Data 0.000 (0.001)	Loss 0.1134 (0.1872)	Prec@1 96.875 (93.453)
Epoch: [287][180/391]	Time 0.169 (0.168)	Data 0.000 (0.001)	Loss 0.2633 (0.1865)	Prec@1 91.406 (93.444)
Epoch: [287][240/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.2086 (0.1870)	Prec@1 92.969 (93.423)
Epoch: [287][300/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1556 (0.1866)	Prec@1 95.312 (93.420)
Epoch: [287][360/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.3445 (0.1869)	Prec@1 89.062 (93.395)
Test: [0/79]	Time 0.245 (0.245)	Loss 0.1099 (0.1099)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.2102 (0.2398)	Prec@1 92.188 (92.738)
 * Prec@1 92.730
Best Accuracy:92.87
current lr 1.00000e-03
Epoch: [288][0/391]	Time 0.301 (0.301)	Data 0.121 (0.121)	Loss 0.1676 (0.1676)	Prec@1 91.406 (91.406)
Epoch: [288][60/391]	Time 0.167 (0.172)	Data 0.000 (0.002)	Loss 0.1634 (0.1847)	Prec@1 92.969 (93.174)
Epoch: [288][120/391]	Time 0.169 (0.171)	Data 0.000 (0.001)	Loss 0.1366 (0.1803)	Prec@1 94.531 (93.427)
Epoch: [288][180/391]	Time 0.171 (0.171)	Data 0.000 (0.001)	Loss 0.2500 (0.1831)	Prec@1 91.406 (93.474)
Epoch: [288][240/391]	Time 0.172 (0.170)	Data 0.000 (0.001)	Loss 0.1700 (0.1779)	Prec@1 95.312 (93.769)
Epoch: [288][300/391]	Time 0.171 (0.170)	Data 0.000 (0.001)	Loss 0.2741 (0.1788)	Prec@1 92.188 (93.719)
Epoch: [288][360/391]	Time 0.168 (0.170)	Data 0.000 (0.000)	Loss 0.2597 (0.1814)	Prec@1 90.625 (93.620)
Test: [0/79]	Time 0.241 (0.241)	Loss 0.1179 (0.1179)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.2045 (0.2433)	Prec@1 93.750 (92.879)
 * Prec@1 92.880
Best Accuracy:92.88
current lr 1.00000e-03
Epoch: [289][0/391]	Time 0.309 (0.309)	Data 0.129 (0.129)	Loss 0.1454 (0.1454)	Prec@1 95.312 (95.312)
Epoch: [289][60/391]	Time 0.168 (0.170)	Data 0.000 (0.002)	Loss 0.2325 (0.1802)	Prec@1 90.625 (93.929)
Epoch: [289][120/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1451 (0.1890)	Prec@1 96.875 (93.459)
Epoch: [289][180/391]	Time 0.169 (0.168)	Data 0.000 (0.001)	Loss 0.1661 (0.1881)	Prec@1 97.656 (93.504)
Epoch: [289][240/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1149 (0.1881)	Prec@1 97.656 (93.487)
Epoch: [289][300/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1638 (0.1878)	Prec@1 96.094 (93.480)
Epoch: [289][360/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1801 (0.1881)	Prec@1 96.875 (93.477)
Test: [0/79]	Time 0.258 (0.258)	Loss 0.1115 (0.1115)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.2033 (0.2424)	Prec@1 92.188 (92.841)
 * Prec@1 92.730
Best Accuracy:92.88
current lr 1.00000e-03
Epoch: [290][0/391]	Time 0.295 (0.295)	Data 0.118 (0.118)	Loss 0.1857 (0.1857)	Prec@1 94.531 (94.531)
Epoch: [290][60/391]	Time 0.169 (0.170)	Data 0.000 (0.002)	Loss 0.2492 (0.1900)	Prec@1 93.750 (93.161)
Epoch: [290][120/391]	Time 0.167 (0.170)	Data 0.000 (0.001)	Loss 0.1200 (0.1939)	Prec@1 96.875 (93.150)
Epoch: [290][180/391]	Time 0.168 (0.170)	Data 0.000 (0.001)	Loss 0.1303 (0.1901)	Prec@1 93.750 (93.150)
Epoch: [290][240/391]	Time 0.168 (0.170)	Data 0.000 (0.001)	Loss 0.2566 (0.1896)	Prec@1 89.844 (93.186)
Epoch: [290][300/391]	Time 0.171 (0.170)	Data 0.000 (0.001)	Loss 0.2352 (0.1897)	Prec@1 90.625 (93.226)
Epoch: [290][360/391]	Time 0.171 (0.170)	Data 0.000 (0.000)	Loss 0.2111 (0.1889)	Prec@1 92.969 (93.293)
Test: [0/79]	Time 0.266 (0.266)	Loss 0.1185 (0.1185)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.156 (0.157)	Loss 0.2001 (0.2431)	Prec@1 92.188 (92.777)
 * Prec@1 92.760
Best Accuracy:92.88
current lr 1.00000e-03
Epoch: [291][0/391]	Time 0.329 (0.329)	Data 0.150 (0.150)	Loss 0.1467 (0.1467)	Prec@1 94.531 (94.531)
Epoch: [291][60/391]	Time 0.168 (0.172)	Data 0.000 (0.003)	Loss 0.1575 (0.1907)	Prec@1 96.094 (93.468)
Epoch: [291][120/391]	Time 0.166 (0.170)	Data 0.000 (0.001)	Loss 0.2829 (0.1850)	Prec@1 89.844 (93.660)
Epoch: [291][180/391]	Time 0.171 (0.170)	Data 0.000 (0.001)	Loss 0.2748 (0.1888)	Prec@1 92.969 (93.422)
Epoch: [291][240/391]	Time 0.166 (0.170)	Data 0.000 (0.001)	Loss 0.2013 (0.1882)	Prec@1 95.312 (93.461)
Epoch: [291][300/391]	Time 0.171 (0.169)	Data 0.000 (0.001)	Loss 0.1957 (0.1843)	Prec@1 91.406 (93.602)
Epoch: [291][360/391]	Time 0.168 (0.169)	Data 0.000 (0.001)	Loss 0.2129 (0.1856)	Prec@1 90.625 (93.516)
Test: [0/79]	Time 0.272 (0.272)	Loss 0.1244 (0.1244)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1956 (0.2422)	Prec@1 92.969 (92.738)
 * Prec@1 92.720
Best Accuracy:92.88
current lr 1.00000e-03
Epoch: [292][0/391]	Time 0.289 (0.289)	Data 0.111 (0.111)	Loss 0.2422 (0.2422)	Prec@1 89.844 (89.844)
Epoch: [292][60/391]	Time 0.168 (0.170)	Data 0.000 (0.002)	Loss 0.3740 (0.1948)	Prec@1 86.719 (93.225)
Epoch: [292][120/391]	Time 0.168 (0.169)	Data 0.000 (0.001)	Loss 0.1486 (0.1906)	Prec@1 94.531 (93.324)
Epoch: [292][180/391]	Time 0.168 (0.169)	Data 0.000 (0.001)	Loss 0.0991 (0.1916)	Prec@1 97.656 (93.280)
Epoch: [292][240/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.2727 (0.1903)	Prec@1 89.844 (93.345)
Epoch: [292][300/391]	Time 0.171 (0.168)	Data 0.000 (0.001)	Loss 0.1869 (0.1875)	Prec@1 94.531 (93.433)
Epoch: [292][360/391]	Time 0.166 (0.168)	Data 0.000 (0.000)	Loss 0.1834 (0.1871)	Prec@1 92.188 (93.391)
Test: [0/79]	Time 0.270 (0.270)	Loss 0.1288 (0.1288)	Prec@1 95.312 (95.312)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1943 (0.2428)	Prec@1 92.969 (92.700)
 * Prec@1 92.620
Best Accuracy:92.88
current lr 1.00000e-03
Epoch: [293][0/391]	Time 0.331 (0.331)	Data 0.154 (0.154)	Loss 0.1214 (0.1214)	Prec@1 96.875 (96.875)
Epoch: [293][60/391]	Time 0.166 (0.169)	Data 0.000 (0.003)	Loss 0.1487 (0.1845)	Prec@1 95.312 (93.648)
Epoch: [293][120/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.2345 (0.1817)	Prec@1 89.844 (93.608)
Epoch: [293][180/391]	Time 0.166 (0.167)	Data 0.000 (0.001)	Loss 0.2216 (0.1862)	Prec@1 94.531 (93.456)
Epoch: [293][240/391]	Time 0.168 (0.167)	Data 0.000 (0.001)	Loss 0.2044 (0.1874)	Prec@1 92.188 (93.458)
Epoch: [293][300/391]	Time 0.168 (0.167)	Data 0.000 (0.001)	Loss 0.1510 (0.1880)	Prec@1 96.094 (93.452)
Epoch: [293][360/391]	Time 0.167 (0.167)	Data 0.000 (0.001)	Loss 0.2008 (0.1877)	Prec@1 92.188 (93.466)
Test: [0/79]	Time 0.258 (0.258)	Loss 0.1283 (0.1283)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1994 (0.2437)	Prec@1 93.750 (92.597)
 * Prec@1 92.600
Best Accuracy:92.88
current lr 1.00000e-03
Epoch: [294][0/391]	Time 0.308 (0.308)	Data 0.131 (0.131)	Loss 0.1146 (0.1146)	Prec@1 96.094 (96.094)
Epoch: [294][60/391]	Time 0.168 (0.170)	Data 0.000 (0.002)	Loss 0.2164 (0.1831)	Prec@1 91.406 (93.212)
Epoch: [294][120/391]	Time 0.166 (0.169)	Data 0.000 (0.001)	Loss 0.2109 (0.1866)	Prec@1 92.969 (93.001)
Epoch: [294][180/391]	Time 0.166 (0.169)	Data 0.000 (0.001)	Loss 0.2257 (0.1836)	Prec@1 90.625 (93.241)
Epoch: [294][240/391]	Time 0.168 (0.169)	Data 0.000 (0.001)	Loss 0.1899 (0.1853)	Prec@1 94.531 (93.384)
Epoch: [294][300/391]	Time 0.170 (0.168)	Data 0.000 (0.001)	Loss 0.1287 (0.1877)	Prec@1 96.094 (93.257)
Epoch: [294][360/391]	Time 0.171 (0.168)	Data 0.000 (0.001)	Loss 0.2283 (0.1889)	Prec@1 89.062 (93.192)
Test: [0/79]	Time 0.248 (0.248)	Loss 0.1107 (0.1107)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1935 (0.2400)	Prec@1 93.750 (92.982)
 * Prec@1 92.860
Best Accuracy:92.88
current lr 1.00000e-03
Epoch: [295][0/391]	Time 0.290 (0.290)	Data 0.115 (0.115)	Loss 0.2034 (0.2034)	Prec@1 92.188 (92.188)
Epoch: [295][60/391]	Time 0.166 (0.168)	Data 0.000 (0.002)	Loss 0.1746 (0.1756)	Prec@1 93.750 (93.968)
Epoch: [295][120/391]	Time 0.166 (0.167)	Data 0.000 (0.001)	Loss 0.1403 (0.1875)	Prec@1 92.969 (93.466)
Epoch: [295][180/391]	Time 0.166 (0.167)	Data 0.000 (0.001)	Loss 0.2823 (0.1862)	Prec@1 92.188 (93.521)
Epoch: [295][240/391]	Time 0.166 (0.167)	Data 0.000 (0.001)	Loss 0.1868 (0.1830)	Prec@1 92.969 (93.581)
Epoch: [295][300/391]	Time 0.166 (0.167)	Data 0.000 (0.001)	Loss 0.0935 (0.1832)	Prec@1 95.312 (93.545)
Epoch: [295][360/391]	Time 0.166 (0.167)	Data 0.000 (0.000)	Loss 0.2021 (0.1842)	Prec@1 94.531 (93.527)
Test: [0/79]	Time 0.265 (0.265)	Loss 0.1175 (0.1175)	Prec@1 96.875 (96.875)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1852 (0.2417)	Prec@1 94.531 (92.738)
 * Prec@1 92.650
Best Accuracy:92.88
current lr 1.00000e-03
Epoch: [296][0/391]	Time 0.305 (0.305)	Data 0.120 (0.120)	Loss 0.2425 (0.2425)	Prec@1 93.750 (93.750)
Epoch: [296][60/391]	Time 0.171 (0.170)	Data 0.000 (0.002)	Loss 0.1774 (0.1952)	Prec@1 95.312 (93.110)
Epoch: [296][120/391]	Time 0.167 (0.169)	Data 0.000 (0.001)	Loss 0.1175 (0.1897)	Prec@1 95.312 (93.175)
Epoch: [296][180/391]	Time 0.166 (0.169)	Data 0.000 (0.001)	Loss 0.2742 (0.1928)	Prec@1 92.188 (93.103)
Epoch: [296][240/391]	Time 0.168 (0.169)	Data 0.000 (0.001)	Loss 0.1976 (0.1878)	Prec@1 92.188 (93.316)
Epoch: [296][300/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.2172 (0.1878)	Prec@1 92.188 (93.319)
Epoch: [296][360/391]	Time 0.167 (0.168)	Data 0.000 (0.000)	Loss 0.1412 (0.1901)	Prec@1 93.750 (93.246)
Test: [0/79]	Time 0.271 (0.271)	Loss 0.1059 (0.1059)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.1954 (0.2432)	Prec@1 92.969 (92.764)
 * Prec@1 92.650
Best Accuracy:92.88
current lr 1.00000e-03
Epoch: [297][0/391]	Time 0.321 (0.321)	Data 0.145 (0.145)	Loss 0.1544 (0.1544)	Prec@1 94.531 (94.531)
Epoch: [297][60/391]	Time 0.166 (0.169)	Data 0.000 (0.003)	Loss 0.1516 (0.1859)	Prec@1 93.750 (93.532)
Epoch: [297][120/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.2535 (0.1911)	Prec@1 90.625 (93.279)
Epoch: [297][180/391]	Time 0.166 (0.167)	Data 0.000 (0.001)	Loss 0.1907 (0.1890)	Prec@1 92.969 (93.331)
Epoch: [297][240/391]	Time 0.166 (0.167)	Data 0.000 (0.001)	Loss 0.1796 (0.1909)	Prec@1 94.531 (93.264)
Epoch: [297][300/391]	Time 0.166 (0.167)	Data 0.000 (0.001)	Loss 0.1519 (0.1896)	Prec@1 94.531 (93.285)
Epoch: [297][360/391]	Time 0.166 (0.167)	Data 0.000 (0.001)	Loss 0.1389 (0.1878)	Prec@1 95.312 (93.393)
Test: [0/79]	Time 0.242 (0.242)	Loss 0.1053 (0.1053)	Prec@1 97.656 (97.656)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.2042 (0.2419)	Prec@1 92.969 (92.943)
 * Prec@1 92.840
Best Accuracy:92.88
current lr 1.00000e-03
Epoch: [298][0/391]	Time 0.327 (0.327)	Data 0.144 (0.144)	Loss 0.2022 (0.2022)	Prec@1 93.750 (93.750)
Epoch: [298][60/391]	Time 0.168 (0.170)	Data 0.000 (0.003)	Loss 0.1966 (0.1776)	Prec@1 89.844 (93.468)
Epoch: [298][120/391]	Time 0.168 (0.169)	Data 0.000 (0.001)	Loss 0.2011 (0.1780)	Prec@1 93.750 (93.621)
Epoch: [298][180/391]	Time 0.168 (0.169)	Data 0.000 (0.001)	Loss 0.2030 (0.1791)	Prec@1 92.188 (93.551)
Epoch: [298][240/391]	Time 0.168 (0.168)	Data 0.000 (0.001)	Loss 0.1765 (0.1827)	Prec@1 93.750 (93.497)
Epoch: [298][300/391]	Time 0.167 (0.168)	Data 0.000 (0.001)	Loss 0.1433 (0.1851)	Prec@1 96.875 (93.452)
Epoch: [298][360/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.2024 (0.1856)	Prec@1 92.188 (93.358)
Test: [0/79]	Time 0.265 (0.265)	Loss 0.1204 (0.1204)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.2009 (0.2426)	Prec@1 93.750 (92.777)
 * Prec@1 92.660
Best Accuracy:92.88
current lr 1.00000e-03
Epoch: [299][0/391]	Time 0.311 (0.311)	Data 0.128 (0.128)	Loss 0.1759 (0.1759)	Prec@1 92.188 (92.188)
Epoch: [299][60/391]	Time 0.168 (0.169)	Data 0.000 (0.002)	Loss 0.1651 (0.1843)	Prec@1 92.969 (93.507)
Epoch: [299][120/391]	Time 0.169 (0.168)	Data 0.000 (0.001)	Loss 0.1603 (0.1841)	Prec@1 95.312 (93.382)
Epoch: [299][180/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1363 (0.1807)	Prec@1 94.531 (93.612)
Epoch: [299][240/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.2126 (0.1846)	Prec@1 92.969 (93.491)
Epoch: [299][300/391]	Time 0.166 (0.168)	Data 0.000 (0.001)	Loss 0.1382 (0.1855)	Prec@1 96.094 (93.446)
Epoch: [299][360/391]	Time 0.172 (0.168)	Data 0.000 (0.001)	Loss 0.0991 (0.1837)	Prec@1 96.875 (93.484)
Test: [0/79]	Time 0.260 (0.260)	Loss 0.1208 (0.1208)	Prec@1 96.094 (96.094)
Test: [60/79]	Time 0.155 (0.157)	Loss 0.2135 (0.2437)	Prec@1 92.969 (92.866)
 * Prec@1 92.780
Best Accuracy:92.88
Saving the trained model as: resnet20_Oct10_ss_vmode_nicap.th
